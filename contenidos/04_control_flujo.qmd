# üîÑ Control de Flujo

<center><img src="../images/control.png" width = "550"></center><br>


EL control de flujo o sentencias de control permiten modificar el flujo del programa introduciendo **ciclos** y **condicionales**.

* Un **condicional** es un conjunto de sentencias que pueden o no ejecutarse, dependiendo del resultado de una condici√≥n.

* Un **ciclo** es un conjunto de sentencias que son ejecutadas varias veces, hasta que una condici√≥n de t√©rmino es satisfecha.

Tanto los condicionales como los ciclos contienen a otras sentencias. Para indicar esta relaci√≥n se utiliza la **indentaci√≥n**: las sentencias contenidas no se escriben en la misma columna que la sentencia de control, sino un poco m√°s a la derecha.

```{pyodide-python}
# definir variables
n = 5
m = 10

# inicializar flujo
if m < n:
    t = m
    m = n
    n = t

# sentencia despues del flujo
print(m, n)
```

## Condicional if-elif-else 

### Condicional if

La sentencia `if` (¬´si¬ª) ejecuta las instrucciones s√≥lo si se cumple una condici√≥n. Si la condici√≥n es falsa, no se hace nada:

La sintaxis es la siguiente:

<img src="https://progra-utfsm.github.io/material/images/if.png"  align="center" width="300" />

```python
if condici√≥n:
    sentencias
```

**Ejemplos**

```{pyodide-python}
nota = 60
print(f"Ingrese su nota: {nota}")

if nota >= 55:
    print("Felicitaciones!!!")
```

```{pyodide-python}
nota = 40
print(f"Ingrese su nota: {nota}")

if nota < 55:
    print("Lamentablemente Ud. ha reprobado.")
```

### Condicional if-else

La sentencia `if-else` (¬´si-o-si-no¬ª) decide qu√© instrucciones ejecutar dependiendo si una condici√≥n es verdadera o falsa:

<img src="https://progra-utfsm.github.io/material/images/if-else.png"  align="center" width="300" />

```python
if condici√≥n:
    qu√© hacer cuando la condici√≥n es verdadera
else
    qu√© hacer cuando la condici√≥n es falsa
```



**ejemplo 01**

```{pyodide-python}
edad = 20
print(f"Ingrese su edad: {edad}")

if edad < 18:
    print("Usted es menor de edad")
else:
    print("Usted es adulto")
```

```{pyodide-python}
edad = 10
print(f"Ingrese su edad: {edad}")

if edad < 18:
    print("Usted es menor de edad")
else:
    print("Usted es adulto")
```

**ejemplo 02**

```{pyodide-python}
n = 15
print(f"Ingrese su numero: {n}")

if n % 2 == 0:
    print("El numero es par")
    print("La mitad del numero es", n / 2)
else:
    print("El numero es impar")
    print("El sucesor del numero es", n + 1)
print("Fin")
```

```{pyodide-python}
n = 20
print(f"Ingrese su numero: {n}")

if n % 2 == 0:
    print("El numero es par")
    print("La mitad del numero es", n / 2)
else:
    print("El numero es impar")
    print("El sucesor del numero es", n + 1)
print("Fin")
```

### Condicional if-elif-else

La sentencia `if-elif-else` depende de dos o m√°s condiciones, que son evaluadas en orden. La primera que es verdadera determina qu√© instrucciones ser√°n ejecutadas:

<img src="https://raw.githubusercontent.com/fralfaro/python_intro/main/docs/images/if_else.png"  align="center" width="300" />

La sintaxis es la siguiente:

```python
if condici√≥n1:
    qu√© hacer si condici√≥n1 es verdadera
elif condici√≥n2:
    qu√© hacer si condici√≥n2 es verdadera
...
else:
    qu√© hacer cuando ninguna de las
    condiciones anteriores es verdadera
```

Existen tres formas de ocupar esta condicional.

* **Estructura if**: La estructura if se utiliza para tomar decisiones en funci√≥n de una condici√≥n. Si la condici√≥n es verdadera, el bloque de c√≥digo dentro del if se ejecutar√°.

* **Estructura if-else**: La estructura if-else se utiliza para tomar decisiones y ejecutar un bloque de c√≥digo si la condici√≥n es verdadera y otro bloque de c√≥digo si la condici√≥n es falsa.

* **Estructura if-elif-else**: La estructura if-elif-else se utiliza para tomar decisiones y ejecutar diferentes bloques de c√≥digo seg√∫n diferentes condiciones. Se eval√∫an las condiciones en orden, y si alguna es verdadera, se ejecutar√° el bloque de c√≥digo correspondiente. Si ninguna de las condiciones es verdadera, se ejecutar√° el bloque de c√≥digo en la cl√°usula else.

Es decir, puede no existir o pueden existir varios  `elif`. Por otro lado, el `else` es opcional dependiendo del caso.


**ejemplo 01**

Escriba un programa que califique el rendimiento del alumno en una asignatura seg√∫n la nota obtenida.

```{pyodide-python}
nota = 90
print(f"Ingrese su nota: {nota}")

if nota >= 80:
    print("Usted es un alumno destacado.")
elif nota >= 65:
    print("Usted ha aprobado.")
elif nota >= 55:
    print("Usted aprob√≥ con algunas dificultades.")
elif nota >= 45:
    print("Con un poco mas de empe√±o hubiese aprobado.")
else:
    print("Nos vemos el pr√≥ximo semestre.")
```

**ejemplo 02**

Considerar la siguiente tabla que muestra la tasa de impuesto a pagar por una persona seg√∫n su sueldo.

| Sueldo               | Tasa de impuesto |
|----------------------|------------------|
| menos de 1000        | 0%               |
| 1000 ‚â§ sueldo < 2000 | 5%               |
| 2000 ‚â§ sueldo < 4000 | 10%              |
| 4000 o m√°s           | 12%              |

Un ejemplo de como se calcula el impuesto ser√≠a el siguiente:



```{pyodide-python}
sueldo = 2000
print(f"Ingrese su sueldo: {sueldo}")

if sueldo < 1000:
    print("caso 1")
    tasa = 0.00
elif sueldo < 2000: # 1000 <= sueldo < 2000?
    print("caso 2")
    tasa = 0.05
elif sueldo < 4000: # 2000 <= sueldo < 4000
    print("caso 3")
    tasa = 0.10
else:
    print("caso falso")
    tasa = 0.12
print("Usted debe pagar", int(tasa*sueldo), "de impuesto.")
```

Otra forma de calcular el impuesto es la siguiente:



```{pyodide-python}
sueldo = 2000
if sueldo < 1000: #1000 > sueldo:
    print("caso 1")
    tasa = 0.00
if sueldo >= 1000 and sueldo < 2000: #if 1000 <= sueldo < 2000:
    print("caso 2")
    tasa = 0.05
if 2000 <= sueldo < 4000:
    print("caso 3")
    tasa = 0.10
if 4000 <= sueldo: #sueldo>= 4000
    print("caso falso")
    tasa = 0.12
print("Usted debe pagar", int(tasa*sueldo), "de impuesto.")
```

¬øEn qu√© se diferencian los dos programas anteriores?

**Soluci√≥n**:

1. **Diferencia en la forma de expresar las condiciones**:
   En el primer programa, se utilizan operadores de desigualdad (`<`) para expresar las condiciones, mientras que en el segundo programa, se utilizan operadores de igualdad (`>=`) y (`<=`) para expresar las mismas condiciones.

2. **Diferencia en el resultado impreso**:
   En el primer programa, se imprime el caso correspondiente (por ejemplo, "caso 1", "caso 2", etc.) antes de calcular la tasa de impuesto, mientras que en el segundo programa, se calcula la tasa de impuesto sin imprimir el caso correspondiente.


## While Loop

El ciclo while (¬´mientras¬ª) ejecuta una secuencia de instrucciones mientras una condici√≥n sea verdadera:


Cada una de las veces que el cuerpo del ciclo es ejecutado se llama iteraci√≥n.

La condici√≥n es evaluada antes de cada iteraci√≥n. Si la condici√≥n es inicialmente falsa, el ciclo no se ejecutar√° ninguna vez.

<img src="https://raw.githubusercontent.com/fralfaro/python_intro/main/docs/images/while.png"  align="center" width="300"/>


La sintaxis es la siguiente:

```python
while condici√≥n:
    sentencias
```

**Notas adicionales**:

* A una ejecuci√≥n de las instrucciones que componen el ciclo se le llama **iteraci√≥n**.
* La condici√≥n de un while es evaluada antes de cada iteraci√≥n.
* Por lo anterior, es posible que un `while` **no ejecute** ninguna iteraci√≥n, si la condici√≥n es False al inicio.

Por ejemplo, el siguiente programa multiplica dos n√∫meros enteros sin usar el operador `*`:



```{pyodide-python}
m = 4
n = 7
p = 0

while m > 0:
    m = m - 1
    p = p + n
    
print(f"El producto de 'm' y 'n' es {p}")
```

Para ver c√≥mo funciona este programa, hagamos un ruteo con la entrada $m = 4$ y $n = 7$:

| p  | m | n |
|----|---|---|
|    | 4 |   |
|    |   | 7 |
| 0  |   |   |
|    | 3 |   |
| 7  |   |   |
|    | 2 |   |
| 14 |   |   |
|    | 1 |   |
| 21 |   |   |
|    | 0 |   |
| 28 |   |   |

El proceso funciona de la siguiente manera:

1. Se inician las variables `m` con el valor 4, `n` con el valor 7 y `p` con el valor 0.
2. Se entra en un bucle `while` con la condici√≥n `m > 0`, lo que significa que el bucle se ejecutar√° mientras `m` sea mayor que 0.
3. En cada iteraci√≥n del bucle, el valor de `m` se reduce en 1 (usando `m = m - 1`) y el valor de `n` se suma al valor actual de `p` (usando `p = p + n`).
4. El bucle contin√∫a ejecut√°ndose hasta que `m` sea igual a 0. Cuando `m` alcanza 0, la condici√≥n `m > 0` se vuelve falsa, y el bucle se detiene.
5. Despu√©s de que el bucle se detiene, se imprime el resultado, que es el producto acumulado de `m` y `n` en la variable `p`.

La raz√≥n por la que estamos seguros de que el ciclo terminar√° en alg√∫n momento es que la condici√≥n del bucle `while` se verifica en cada iteraci√≥n, y `m` se reduce en 1 en cada iteraci√≥n. Dado que `m` se inicializa con el valor 4, y en cada iteraci√≥n se reduce en 1, eventualmente alcanzar√° el valor 0 despu√©s de 4 iteraciones, lo que har√° que la condici√≥n `m > 0` sea falsa y el ciclo se detendr√°. Por lo tanto, podemos estar seguros de que el ciclo terminar√°.

### Ejemplo:  acumulaci√≥n con suma

Escriba un programa que reciba como entrada un n√∫mero entero. El programa debe mostrar el resultado de la suma de los n√∫meros al cuadrado desde el $1$ hasta el valor ingresado.
$$
1^2+2^2+\ldots+(n-1)^2+n^2
$$

```{pyodide-python}
# Solicita al usuario ingresar un n√∫mero entero
numero = 10

# Inicializa la variable para la suma
suma = 0

# Inicializa un contador
i = 1

# Utiliza un ciclo while para calcular la suma de los cuadrados
while i <= numero:
    suma += i ** 2
    i += 1

# Muestra el resultado
print(f"La suma de los cuadrados desde 1 hasta {numero} es {suma}")
```

### Ejemplo: acumulaci√≥n con multiplicaci√≥n

Escriba una programa que calcule el factorial de un n√∫mero $n$ ingresada como entrada:
$10! = 1\cdot 2 \cdot 3 ... \cdot 10$

```{pyodide-python}
# Solicita al usuario ingresar un n√∫mero entero
n = 10

# Inicializa el valor del factorial a 1
factorial = 1

# Inicializa un contador
i = 1

# Utiliza un ciclo while para calcular el factorial
while i <= n:
    factorial *= i
    i += 1

# Muestra el resultado
print(f"{n}! = {factorial}")
```

### Ejemplo: conteo

Escriba un programa que solicite un n√∫mero entero y calcule cuantos n√∫meros son divisibles por 3 o 5.

```{pyodide-python}
# Solicita al usuario ingresar un n√∫mero entero
numero = 35

# Inicializa un contador de n√∫meros divisibles por 3 o 5
contador = 0

# Inicializa un valor para contar
i = 1

# Utiliza un ciclo while para contar n√∫meros divisibles por 3 o 5
while i <= numero:
    if i % 3 == 0 or i % 5 == 0:
        contador += 1
    i += 1

# Muestra la cantidad de n√∫meros divisibles por 3 o 5
print(f"En el rango de 1 a {numero}, hay {contador} n√∫meros divisibles por 3 o 5.")
```

## Ciclo for con rango


El ciclo **for con rango** ejecuta una secuencia de sentencias una cantidad fija de veces.

Para llevar la cuenta, utiliza una **variable de control** que toma valores distintos en cada iteraci√≥n.

Una de las sintaxis para usar un for con rango es la siguiente:

```python
for variable in range(fin):
    qu√© hacer para cada valor de la variable de control
```

En la primera iteraci√≥n, la variable de control toma el valor 0. Al final de cada iteraci√≥n, el valor de la variable aumenta autom√°ticamente. El ciclo termina justo antes que la variable tome el valor fin.

Por ejemplo, el siguiente programa muestra los cubos de los n√∫meros del 0 al 20:

```{pyodide-python}
# Imprimir los n√∫meros del 0 al 20 y sus cubos
for i in range(21):
    print(f"N√∫mero: {i}, Cubo: {i**3}")
```

Un **rango** es una sucesi√≥n de n√∫meros enteros equiespaciados. Incluyendo la presentada m√°s arriba, hay tres maneras de definir un rango:

```python
range(final)
range(inicial, final)
range(inicial, final, incremento)
```

El valor inicial siempre es parte del rango. El valor final nunca es parte del rango. El incremento indica la diferencia entre dos valores consecutivos del rango.

Si el valor inicial es omitido, se supone que es 0. Si el incremento es omitido, se supone que es 1.

Con algunos ejemplos quedar√° m√°s claro:

| sentencia          | resultado                       |
|--------------------|---------------------------------|
| `range(9)`         | 0, 1, 2, 3, 4, 5, 6, 7, 8       |
| `range(3, 13)`     | 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 |
| `range(3, 13, 2)`  | 3, 5, 7, 9, 11                  |
| `range(11, 4)`     | ning√∫n valor                    |
| `range(11, 4, -1)` | 11, 10, 9, 8, 7, 6, 5           |

```{pyodide-python}
# Imprimir los valores de los objetos range

print(list(range(9)))            
print(list(range(3, 13)))        
print(list(range(3, 13, 2)))     
print(list(range(11, 4)))        
print(list(range(11, 4, -1)))  
```

Usando un incremento negativo, es posible hacer ciclos que van hacia atr√°s:

```{pyodide-python}
# Cuenta regresiva para el A√±o Nuevo
for i in range(10, 0, -1):
    print(i)

print('¬°Feliz A√±o Nuevo!')
```

## Salir o continuar un ciclo


###  Break
Adem√°s de las condiciones de t√©rmino propias de los ciclos `while` y `for`, siempre es posible salir de un ciclo en medio de una iteraci√≥n usando la sentencia `break`. Lo l√≥gico es que sea usada dentro de un `if`, para evitar que el ciclo termine prematuramente en la primera iteraci√≥n:

<img src="https://raw.githubusercontent.com/fralfaro/python_intro/main/docs/images/break.png"  align="center" width="300"/>


Veamos el siguiente ejemplo:

```{pyodide-python}
for n in range(1, 21):
    if n % 7 == 0:
        break  # Se rompe el ciclo en esta iteraci√≥n
    print(n)

print("--Fin--")
```

Este c√≥digo es un bucle `for` en Python que itera a trav√©s de los n√∫meros del 1 al 20. El objetivo del bucle es imprimir los n√∫meros en cada iteraci√≥n hasta que se encuentre un n√∫mero divisible por 7. Aqu√≠ est√° lo que hace paso a paso:

1. Inicia un bucle `for` que utiliza la variable `n` para recorrer los n√∫meros del 1 al 20 (inclusive) con la funci√≥n `range(1, 21)`.

2. En cada iteraci√≥n del bucle, se verifica si el n√∫mero `n` es divisible por 7 utilizando la expresi√≥n `n % 7 == 0`. Esto se hace con el operador de m√≥dulo (`%`) para comprobar si el residuo de la divisi√≥n de `n` por 7 es igual a 0. Si esta condici√≥n es verdadera, significa que `n` es divisible por 7.

3. Si se encuentra un n√∫mero que es divisible por 7, se utiliza la instrucci√≥n `break` para salir inmediatamente del bucle `for`, lo que significa que el bucle se interrumpe en esa iteraci√≥n.

4. Si el bucle no se rompe con `break`, se imprime el n√∫mero `n` en esa iteraci√≥n.

5. Despu√©s de que se complete el bucle `for`, se imprime "--Fin--" una vez para marcar el final del programa.



### Continue

La sentencia `continue` se usa para saltar a la iteraci√≥n siguiente sin llegar al final de la que est√° en curso.

<img src="https://raw.githubusercontent.com/fralfaro/python_intro/main/docs/images/continue.png"  align="center" width="300"  />


Veamos el siguiente ejemplo:

```{pyodide-python}
for n in range(1, 21):
    if n % 7 == 0:
        continue # continua el ciclo ignorando esta iteracion
    print(n)

print("--Fin--")
```

El c√≥digo que proporcionaste es un bucle `for` en Python que itera a trav√©s de los n√∫meros del 1 al 20 utilizando la funci√≥n `range(1, 21)`. El bucle imprime todos los n√∫meros excepto aquellos que son divisibles por 7. A continuaci√≥n, se explica paso a paso lo que hace el c√≥digo:

1. El bucle `for` se inicia y la variable `n` toma valores del 1 al 20 en cada iteraci√≥n.

2. En cada iteraci√≥n del bucle, se verifica si el n√∫mero `n` es divisible por 7 utilizando la expresi√≥n `n % 7 == 0`. El operador de m√≥dulo (`%`) se utiliza para calcular el residuo de la divisi√≥n de `n` por 7. Si el residuo es igual a 0, significa que `n` es divisible por 7.

3. Si la condici√≥n `n % 7 == 0` es verdadera, se ejecuta la instrucci√≥n `continue`, que salta el resto del c√≥digo en esa iteraci√≥n y pasa a la siguiente iteraci√≥n del bucle. Esto significa que cuando se encuentra un n√∫mero divisible por 7, no se imprime y el bucle contin√∫a con el siguiente n√∫mero.

4. Si la condici√≥n `n % 7 == 0` no es verdadera (es decir, si `n` no es divisible por 7), se ejecuta la instrucci√≥n `print(n)`, que imprime el valor de `n` en la consola.

5. Despu√©s de que se complete el bucle `for`, se imprime "--Fin--" una vez para marcar el final del programa.

## Ejercicios

### if-elif-else

**Ejercicio 01**

Escriba un programa que determine si el n√∫mero entero ingresado por el usuario es par o no.


```terminal
Ingrese un n√∫mero: 4
Su n√∫mero es par
```

```terminal
Ingrese un n√∫mero: 3
Su n√∫mero es impar
```

```{pyodide-python}
# respuesta
```

**Ejercicio 02**

Escriba un programa que pida dos n√∫meros enteros y que calcule la divisi√≥n, indicando si la divisi√≥n es exacta o no.



```terminal
Dividendo: 14
Divisor: 5

La divisi√≥n no es exacta.
Cociente: 2
Resto: 4
```

```{pyodide-python}
Dividendo: 100
Divisor: 10

La divisi√≥n es exacta.
Cociente: 10
Resto: 0
```

```{pyodide-python}
# respuesta
```

**Ejercicio 03**

Escriba un programa que pida al usuario dos palabras, y que indique cu√°l de ellas es la m√°s larga y por cu√°ntas letras lo es.

```terminal
Palabra 1: edificio
Palabra 2: tren
La palabra edificio tiene 4 letras mas que tren.
```

```terminal
Palabra 1: sol
Palabra 2: paralelepipedo
La palabra paralelepipedo tiene 11 letras mas que sol
```

```terminal
Palabra 1: plancha
Palabra 2: lapices
Las dos palabras tienen el mismo largo
```

```{pyodide-python}
# respuesta
```

**Ejercicio 04**

Un a√±o es [bisiesto](https://es.wikipedia.org/wiki/A%C3%B1o_bisiesto) si es divisible por $4$, excepto si es divisible por $100$ y no por $400$. 
 Escriba un programa que reciba un a√±o como entrada e indique `True` si un a√±o es bisiesto o `False` si no lo es.

```terminal
Ingrese un anno: 1988
1988 es bisiesto
```



```terminal
Ingrese un anno: 2011
2011 no es bisiesto
```


```terminal
Ingrese un anno: 1700
1700 no es bisiesto
```


```terminal
Ingrese un anno: 2400
2400 es bisiesto
```

```{pyodide-python}
# respuesta
```

**Ejercicio 05**

Los tres lados $a, b$ y $c$ de un tri√°ngulo deben satisfacer la [desigualdad triangular](https://es.wikipedia.org/wiki/Desigualdad_triangular): cada uno de los lados no puede ser m√°s largo que la suma de los otros dos.

Escriba un programa que reciba como entrada los tres lados de un tri√°ngulo, e indique:

* si acaso el tri√°ngulo es inv√°lido
* si el tri√°ngulo es v√°lido, qu√© [tipo de tri√°ngulo](https://www.universoformulas.com/matematicas/geometria/tipos-triangulos/) es.

```terminal
Ingrese a: 3.9
Ingrese b: 6.0
Ingrese c: 1.2
No es un triangulo valido.
```

```terminal
Ingrese a: 1.9
Ingrese b: 2
Ingrese c: 2
El triangulo es isoceles.
```

```terminal
Ingrese a: 3.0
Ingrese b: 5.0
Ingrese c: 4.0
El triangulo es escaleno.
```

```terminal
Ingrese a: 2
Ingrese b: 2
Ingrese c: 2
El triangulo es equilatero.
```

```{pyodide-python}
# respuesta
```

**Ejercicio 06**

El riesgo de que una persona sufra enfermedades coronarias depende de su edad y su √≠ndice de masa corporal:


|            | edad < 45 | edad ‚â• 45 |
|------------|-----------|-----------|
| IMC < 22.0 | bajo      | medio     |
| IMC ‚â• 22.0 | medio     | alto      |

El √≠ndice de masa corporal es el cuociente entre el peso del individuo en kilos y el cuadrado de su estatura en metros ($IMC = \dfrac{peso}{estatura^2} $).

Escriba un programa que reciba como entrada la estatura, el peso y la edad de una persona, y le entregue su condici√≥n de riesgo.

**ejemplos**

* Si el usuario ingresa una estatura de 1.75 metros, un peso de 70 kilogramos y una edad de 30 a√±os, el programa mostrar√°: "La condici√≥n de riesgo es: medio".
* Si el usuario ingresa una estatura de 1.65 metros, un peso de 90 kilogramos y una edad de 50 a√±os, el programa mostrar√°: "La condici√≥n de riesgo es: alto".

```{pyodide-python}
# respuesta
```

**Ejercicio 07**

Un n√∫mero natural es un [pal√≠ndromo](https://es.wikipedia.org/wiki/Pal%C3%ADndromo) si se lee igual de izquierda a derecha y de derecha a izquierda.

Por ejemplo, $14941$ es un pal√≠ndromo, mientras que $81924$ no lo es.

Escriba un programa que indique si el n√∫mero ingresado es o no pal√≠ndromo:

```terminal
Ingrese un numero: 14941
14941 es palindromo
```

```terminal
Ingrese un numero: 81924
81924 no es palindromo

```

> **Hint**: Para encontrar el inverso de un string en Python, puedes utilizar la t√©cnica de `texto[::-1]`. 

```{pyodide-python}
# respuesta
```

### While

**Ejercicio 01**

Solicita al usuario un n√∫mero y muestra un contador regresivo desde ese n√∫mero hasta 1. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 5
Contador regresivo desde 5 hasta 1:
5
4
3
2
1
```

```{pyodide-python}
# respuesta
```

**Ejercicio 02**

Solicita al usuario un n√∫mero y calcula la suma de todos los n√∫meros pares desde 2 hasta ese n√∫mero. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 10
La suma de n√∫meros pares desde 2 hasta 10 es 30
```

```{pyodide-python}
# respuesta
```

**Ejercicio 03**

Solicita al usuario un n√∫mero entero y suma todos sus d√≠gitos. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero entero: 12345
La suma de los d√≠gitos es 15
```

```{pyodide-python}
# respuesta
```

**Ejercicio 04**

Pide al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 123456
El n√∫mero tiene 3 d√≠gitos pares.
```

```{pyodide-python}
# respuesta
```

**Ejercicio 05**

Solicita al usuario un n√∫mero y cuenta cu√°ntos n√∫meros en el rango de 1 a ese n√∫mero son divisibles por 7. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 20
Hay 2 n√∫meros divisibles por 7 en el rango de 1 a 20.
```

```{pyodide-python}
# respuesta
```

**Ejercicio 06**

Solicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son impares. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 7654321
El n√∫mero tiene 4 d√≠gitos impares.
```

```{pyodide-python}
# respuesta
```

### Range

**Ejercicio 01**

Calcula la suma de todos los n√∫meros pares desde 1 hasta un n√∫mero dado ($n$). Utiliza la declaraci√≥n `range` para resolver este problema.

```
Ingrese un n√∫mero: 10
La suma de n√∫meros pares desde 1 hasta 10 es 30
```

```{pyodide-python}
# respuesta
```

**Ejercicio 02**

Muestra un contador regresivo desde un n√∫mero ($n$) dado hasta 1. Utiliza la declaraci√≥n `range` para resolver este problema.

```
Ingrese un n√∫mero: 5
Contador regresivo desde 5 hasta 1:
5
4
3
2
1
```

```{pyodide-python}
# respuesta
```

**Ejercicio 03**

Muestra la tabla de multiplicar de un n√∫mero dado. Utiliza la declaraci√≥n `range` para resolver este problema.

```
Ingrese un n√∫mero: 7
Tabla de multiplicar del 7:
7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63
7 x 10 = 70
```

```{pyodide-python}
# respuesta
```

**Ejercicio 04**

Escribe un programa que solicite al usuario un n√∫mero entero positivo y luego calcule la suma de los cuadrados de todos los n√∫meros desde 1 hasta el n√∫mero ingresado. Utiliza la declaraci√≥n `range` para generar los n√∫meros en el rango y luego suma los cuadrados de esos n√∫meros.

**Ejemplos**

1. Si el usuario ingresa el n√∫mero 4, el programa calcular√° la suma de los cuadrados de los n√∫meros desde 1 hasta 4 de la siguiente manera:

   Suma = 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30

   El programa mostrar√°: "La suma de los cuadrados de los n√∫meros en el rango de 1 a 4 es 30."

```{pyodide-python}
# respuesta
```

### Break & Continue

**Ejercicio 01**

Solicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n `continue` para omitir los d√≠gitos impares.

```
Ingrese un n√∫mero: 123456
El n√∫mero tiene 3 d√≠gitos pares.
```

```{pyodide-python}
# respuesta
```

**Ejercicio 02**

Calcula la suma de los n√∫meros en un rango dado (por ejemplo, de 1 a 10), pero omite los m√∫ltiplos de 3 utilizando la declaraci√≥n `continue`.

```
Ingrese un n√∫mero: 10
La suma de los n√∫meros no divisibles por 3 en el rango de 1 a 10 es 37
```

```{pyodide-python}
# respuesta
```

**Ejercicio 03**

Dada una lista de n√∫meros enteros, solicita al usuario un n√∫mero objetivo y busca si el n√∫mero est√° en la lista. Utiliza un bucle con `break` para detener la b√∫squeda una vez que encuentres el n√∫mero o determines que no est√° en la lista.


```{pyodide-python}
# respuesta
```

**Ejercicio 04**

Simula un juego en el que la computadora "piensa" en un n√∫mero y el jugador intenta adivinarlo. Crea un bucle que permita al jugador hacer intentos para adivinar el n√∫mero, y utiliza `break` para salir del bucle si el jugador adivina el n√∫mero o excede un n√∫mero m√°ximo de intentos.

> **Hint**: Considera la siguiente rutina para partir tu c√≥digo:
```{pyodide-python}
import random

# Generar un n√∫mero aleatorio entre 1 y 100
numero_secreto = random.randint(1, 100)

# N√∫mero m√°ximo de intentos permitidos
intentos_maximos = 10

# ....
```

```{pyodide-python}
# respuesta
```