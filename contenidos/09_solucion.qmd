#  üí° Soluci√≥n Ejercicios

## Nomenclatura

**Ejercicio 01**

Escriba un programa que pida al usuario que escriba su nombre, y lo salude llam√°ndolo por su nombre.

```terminal
Ingrese su nombre: Python
Hola, Python
```

```{pyodide-python}
# Solicita al usuario que ingrese su nombre y lo almacena en la variable "nombre"
nombre = "Python"

# Imprime un saludo personalizado utilizando el nombre ingresado por el usuario
print(f"Hola, {nombre}!")
```

**Ejercicio 02**

Escriba un programa que reciba como entrada el radio de un c√≠rculo y entregue como salida su per√≠metro y su √°rea:
```terminal
Ingrese el radio: 5
Perimetro: 31.4
√Årea: 78.5
```

```{pyodide-python}
# Solicitar al usuario que ingrese el radio del c√≠rculo
radio = 5

# Definir la variable para el valor de Pi
pi = 3.14159265359

# Calcular el per√≠metro y el √°rea del c√≠rculo
perimetro = 2 * pi * radio
area = pi * radio ** 2

# Imprimir el resultado con un formato m√°s claro
print(f"Per√≠metro: {perimetro:.1f}")
print(f"√Årea: {area:.1f}")
```

**Ejercicio 03**

Escriba un programa que calcule el promedio de 4 notas ingresadas por el usuario:


```terminal
Primera nota: 55
Segunda nota: 71
Tercera nota: 46
Cuarta nota: 87
El promedio es: 64.75
```

```{pyodide-python}
# Solicitar al usuario que ingrese las 4 notas
nota1 = 55
nota2 = 71
nota3 = 46
nota4 = 87

# Calcular el promedio
promedio = (nota1 + nota2 + nota3 + nota4) / 4

# Imprimir el resultado
print(f"El promedio es: {promedio:.2f}")
```

**Ejercicio 04**

Escriba un programa que convierta de cent√≠metros a pulgadas. Una pulgada es igual a 2.54 cent√≠metros.


```terminal
Ingrese longitud: 45
45 cm = 17.7165 in
```

```{pyodide-python}
# Solicitar al usuario que ingrese la longitud en cent√≠metros
longitud_cm = 45

# Realizar la conversi√≥n a pulgadas
longitud_in = longitud_cm / 2.54

# Imprimir el resultado
print(f"{longitud_cm} cm = {longitud_in:.4f} in")
```

**Ejercicio 05**

Escriba un programa que reciba como entrada las longitudes de los dos catetos $a$ y $b$ de un tri√°ngulo rect√°ngulo, y que entregue como salida el largo de la hipotenusa $c$ del triangulo, dado por el teorema de Pit√°goras: $c^2=a^2+b^2$.

```terminal
Ingrese cateto a: 7
Ingrese cateto b: 5
La hipotenusa es 8.6023252670426267
```

```{pyodide-python}
# Solicitar al usuario que ingrese la longitud de los catetos
cateto_a = 7
cateto_b = 5

# Calcular la hipotenusa utilizando el teorema de Pit√°goras
hipotenusa = (cateto_a ** 2 + cateto_b ** 2) ** 0.5

# Imprimir el resultado
print(f"La hipotenusa es {hipotenusa}")
```

**Ejercicio 06**

Escriba un programa que pregunte al usuario la hora actual $t$ del reloj y un n√∫mero entero de horas $h$, que indique qu√© hora marcar√° el reloj dentro de $h$ horas:


```terminal
Hora actual: 23
Cantidad de horas: 5
En 5 horas, el reloj marcara las 4
```

```{pyodide-python}
# Solicitar al usuario la hora actual y la cantidad de horas
hora_actual = 23
horas_pasadas = 5

# Calcular la nueva hora
nueva_hora = (hora_actual + horas_pasadas) % 24

# Imprimir el resultado
print(f"En {horas_pasadas} horas, el reloj marcar√° las {nueva_hora}")
```

**Ejercicio 07**

Un alumno desea saber que nota necesita en el tercer certamen para aprobar un ramo.

El promedio del ramo se calcula con la siguiente formula.

$$N_C=(C_1+C_2+C_3)/3$$
$$ N_F=N_C‚ãÖ0.7+N_L‚ãÖ0.3$$


Donde $N_C$ es el promedio de cert√°menes, $N_L$ el promedio de laboratorio y $N_F$ la nota final.

Escriba un programa que pregunte al usuario las notas de los dos primeros certamen y la nota de laboratorio, y muestre la nota que necesita el alumno para aprobar el ramo con nota final 60.

```terminal
Ingrese nota certamen 1: 45
Ingrese nota certamen 2: 55
Ingrese nota laboratorio: 65
Necesita nota 74 en el certamen 3
```

```{pyodide-python}
# Solicitar al usuario las notas de los dos primeros cert√°menes y la nota de laboratorio
certamen1 = 45
certamen2 = 55
laboratorio = 65


# Calcular la nota necesaria en el tercer certamen para aprobar con nota final 60
nota_necesaria = 3*((60-0.3*laboratorio)/0.7)-certamen1-certamen2

# Imprimir la nota necesaria en el tercer certamen
print(f"Necesita nota {nota_necesaria:.0f} en el certamen 3")
```

**Ejercicio 08**

Realice un programa que calcule el √°rea de un tri√°ngulo a partir de las longitudes de sus lados.

Para calcularlo puede utilizar la f√≥rmula de Her√≥n:

$$
    A = \sqrt{s\,(s-a)(s-b)(s-c)},
$$
donde $a$, $b$ y $c$ son las longitudes de cada lado y $s=\dfrac{a+b+c}{2}$ es el semiper√≠metro.


```terminal
Ingrese longitud de lado 1: 3
Ingrese longitud de lado 2: 4
Ingrese longitud de lado 3: 5
El √°rea del tri√°ngulo es 6.0
```

```{pyodide-python}
import math

# Solicitar al usuario las longitudes de los lados del tri√°ngulo
lado1 = 3
lado2 = 4
lado3 = 5

# Calcular el semiper√≠metro
s = (lado1 + lado2 + lado3) / 2

# Calcular el √°rea utilizando la f√≥rmula de Her√≥n
area = math.sqrt(s * (s - lado1) * (s - lado2) * (s - lado3))

# Imprimir el resultado
print(f"El √°rea del tri√°ngulo es {area:.1f}")
```

## Control de Flujo

### if-elif-else

**Ejercicio 01**

Escriba un programa que determine si el n√∫mero entero ingresado por el usuario es par o no.


```terminal
Ingrese un n√∫mero: 4
Su n√∫mero es par
```

```terminal
Ingrese un n√∫mero: 3
Su n√∫mero es impar
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero entero

# Caso 01
numero = 4 

# Caso 02
#numero = 3

# Verificar si el n√∫mero es par o impar
if numero % 2 == 0:
    print("Su n√∫mero es par")
else:
    print("Su n√∫mero es impar")
```

**Ejercicio 02**

Escriba un programa que pida dos n√∫meros enteros y que calcule la divisi√≥n, indicando si la divisi√≥n es exacta o no.



```terminal
Dividendo: 14
Divisor: 5

La divisi√≥n no es exacta.
Cociente: 2
Resto: 4
```

```{pyodide-python}
Dividendo: 100
Divisor: 10

La divisi√≥n es exacta.
Cociente: 10
Resto: 0
```

```{pyodide-python}
# Solicitar al usuario que ingrese el dividendo y el divisor

# Caso 01
dividendo = 14
divisor = 5

# Caso 02
#dividendo = 100
#divisor = 10

# Calcular el cociente y el resto de la divisi√≥n
cociente = dividendo // divisor
resto = dividendo % divisor

# Verificar si la divisi√≥n es exacta
if resto == 0:
    print("La divisi√≥n es exacta.")
else:
    print("La divisi√≥n no es exacta.")

# Imprimir el cociente y el resto
print(f"Cociente: {cociente}")
print(f"Resto: {resto}")
```

**Ejercicio 03**

Escriba un programa que pida al usuario dos palabras, y que indique cu√°l de ellas es la m√°s larga y por cu√°ntas letras lo es.

```terminal
Palabra 1: edificio
Palabra 2: tren
La palabra edificio tiene 4 letras mas que tren.
```

```terminal
Palabra 1: sol
Palabra 2: paralelepipedo
La palabra paralelepipedo tiene 11 letras mas que sol
```

```terminal
Palabra 1: plancha
Palabra 2: lapices
Las dos palabras tienen el mismo largo
```

```{pyodide-python}
# Solicitar al usuario que ingrese las dos palabras

# Caso 01
palabra1 = 'edificio'
palabra2 = 'tren'

# Caso 02
#palabra1 = 'sol'
#palabra2 = 'paralelepipedo'

# Caso 03
#palabra1 = 'plancha'
#palabra2 = 'lapices'

# Calcular la diferencia en la longitud de las palabras
diferencia = abs(len(palabra1) - len(palabra2))

# Determinar cu√°l palabra es m√°s larga y construir el mensaje
if len(palabra1) > len(palabra2):
    mensaje = f"La palabra {palabra1} tiene {diferencia} letras m√°s que {palabra2}."
elif len(palabra1) < len(palabra2):
    mensaje = f"La palabra {palabra2} tiene {diferencia} letras m√°s que {palabra1}."
else:
    mensaje = "Las dos palabras tienen el mismo largo."

# Imprimir el resultado
print(mensaje)
```

**Ejercicio 04**

Un a√±o es [bisiesto](https://es.wikipedia.org/wiki/A%C3%B1o_bisiesto) si es divisible por $4$, excepto si es divisible por $100$ y no por $400$. 
 Escriba un programa que reciba un a√±o como entrada e indique `True` si un a√±o es bisiesto o `False` si no lo es.

```terminal
Ingrese un anno: 1988
1988 es bisiesto
```



```terminal
Ingrese un anno: 2011
2011 no es bisiesto
```


```terminal
Ingrese un anno: 1700
1700 no es bisiesto
```


```terminal
Ingrese un anno: 2400
2400 es bisiesto
```

```{pyodide-python}
# Solicitar al usuario que ingrese un a√±o

# Caso 01
anno = 1988

# Caso 02
#anno = 2011

# Caso 03
#anno = 1700

# Caso 04
#anno = 2400

# Verificar si el a√±o es bisiesto
if (anno % 4 == 0 and anno % 100 != 0) or anno % 400 == 0:
    print(f"{anno} es bisiesto")
else:
    print(f"{anno} no es bisiesto")
```

**Ejercicio 05**

Los tres lados $a, b$ y $c$ de un tri√°ngulo deben satisfacer la [desigualdad triangular](https://es.wikipedia.org/wiki/Desigualdad_triangular): cada uno de los lados no puede ser m√°s largo que la suma de los otros dos.

Escriba un programa que reciba como entrada los tres lados de un tri√°ngulo, e indique:

* si acaso el tri√°ngulo es inv√°lido
* si el tri√°ngulo es v√°lido, qu√© [tipo de tri√°ngulo](https://www.universoformulas.com/matematicas/geometria/tipos-triangulos/) es.

```terminal
Ingrese a: 3.9
Ingrese b: 6.0
Ingrese c: 1.2
No es un triangulo valido.
```

```terminal
Ingrese a: 1.9
Ingrese b: 2
Ingrese c: 2
El triangulo es isoceles.
```

```terminal
Ingrese a: 3.0
Ingrese b: 5.0
Ingrese c: 4.0
El triangulo es escaleno.
```

```terminal
Ingrese a: 2
Ingrese b: 2
Ingrese c: 2
El triangulo es equilatero.
```

```{pyodide-python}
# Solicitar al usuario que ingrese los lados del tri√°ngulo

# Caso 01
a = 3.9
b = 6.0
c = 1.2

# Caso 02
#a = 1.9
#b = 1.9
#c = 2.0

# Caso 03
#a = 3.0
#b = 5.0
#c = 4.0

# Caso 04
#a = 2.0
#b = 2.0
#c = 2.0

# Verificar si es un tri√°ngulo v√°lido
if a + b > c and a + c > b and b + c > a:
    if a == b == c:
        print("El tri√°ngulo es equil√°tero.")
    elif a == b or a == c or b == c:
        print("El tri√°ngulo es is√≥sceles.")
    else:
        print("El tri√°ngulo es escaleno.")
else:
    print("No es un tri√°ngulo v√°lido.")
```

**Ejercicio 06**

El riesgo de que una persona sufra enfermedades coronarias depende de su edad y su √≠ndice de masa corporal:


|            | edad < 45 | edad ‚â• 45 |
|------------|-----------|-----------|
| IMC < 22.0 | bajo      | medio     |
| IMC ‚â• 22.0 | medio     | alto      |

El √≠ndice de masa corporal es el cuociente entre el peso del individuo en kilos y el cuadrado de su estatura en metros ($IMC = \dfrac{peso}{estatura^2} $).

Escriba un programa que reciba como entrada la estatura, el peso y la edad de una persona, y le entregue su condici√≥n de riesgo.

**ejemplos**

* Si el usuario ingresa una estatura de 1.75 metros, un peso de 70 kilogramos y una edad de 30 a√±os, el programa mostrar√°: "La condici√≥n de riesgo es: medio".
* Si el usuario ingresa una estatura de 1.65 metros, un peso de 90 kilogramos y una edad de 50 a√±os, el programa mostrar√°: "La condici√≥n de riesgo es: alto".

```{pyodide-python}
# Solicitar al usuario que ingrese la estatura, peso y edad
estatura = 1.65
peso = 180
edad = 45

# Calcular el √≠ndice de masa corporal (IMC)
imc = peso / (estatura ** 2)

# Determinar la condici√≥n de riesgo
if edad < 45:
    if imc < 22.0:
        riesgo = "bajo"
    else:
        riesgo = "medio"
else:
    if imc < 22.0:
        riesgo = "medio"
    else:
        riesgo = "alto"

# Imprimir la condici√≥n de riesgo
print(f"La condici√≥n de riesgo es: {riesgo}")
```

**Ejercicio 07**

Un n√∫mero natural es un [pal√≠ndromo](https://es.wikipedia.org/wiki/Pal%C3%ADndromo) si se lee igual de izquierda a derecha y de derecha a izquierda.

Por ejemplo, $14941$ es un pal√≠ndromo, mientras que $81924$ no lo es.

Escriba un programa que indique si el n√∫mero ingresado es o no pal√≠ndromo:

```terminal
Ingrese un numero: 14941
14941 es palindromo
```

```terminal
Ingrese un numero: 81924
81924 no es palindromo
```

> **Hint**: Para encontrar el inverso de un string en Python, puedes utilizar la t√©cnica de `texto[::-1]`. 

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero

# Caso 01
numero = '14941'

# Caso 02
#numero = '81924'


# Obtener el n√∫mero en su versi√≥n invertida
numero_invertido = numero[::-1]

# Verificar si el n√∫mero y su versi√≥n invertida son iguales
if numero == numero_invertido:
    print(f"{numero} es un pal√≠ndromo")
else:
    print(f"{numero} no es un pal√≠ndromo")
```

### While

**Ejercicio 01**

Solicita al usuario un n√∫mero y muestra un contador regresivo desde ese n√∫mero hasta 1. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 5
Contador regresivo desde 5 hasta 1:
5
4
3
2
1
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
numero = 5

# Mostrar un contador regresivo desde el n√∫mero ingresado hasta 1
print("Contador regresivo desde", numero, "hasta 1:")
while numero >= 1:
    print(numero)
    numero -= 1
```

**Ejercicio 02**

Solicita al usuario un n√∫mero y calcula la suma de todos los n√∫meros pares desde 2 hasta ese n√∫mero. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 10
La suma de n√∫meros pares desde 2 hasta 10 es 30
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
numero = 10

# Inicializar la suma y el contador
suma = 0
contador = 2

# Calcular la suma de n√∫meros pares desde 2 hasta el n√∫mero ingresado
while contador <= numero:
    suma += contador
    contador += 2  # Avanzar al siguiente n√∫mero par

# Imprimir el resultado
print(f"La suma de n√∫meros pares desde 2 hasta {numero} es {suma}")
```

**Ejercicio 03**

Solicita al usuario un n√∫mero entero y suma todos sus d√≠gitos. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero entero: 12345
La suma de los d√≠gitos es 15
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero entero
numero = 12345

# Inicializar la suma y el contador
suma_digitos = 0

# Calcular la suma de los d√≠gitos
while numero > 0:
    # Obtener el √∫ltimo d√≠gito y sumarlo
    digito = numero % 10
    suma_digitos += digito
    
    # Eliminar el √∫ltimo d√≠gito
    numero //= 10

# Imprimir el resultado
print(f"La suma de los d√≠gitos es {suma_digitos}")
```

**Ejercicio 04**

Pide al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 123456
El n√∫mero tiene 3 d√≠gitos pares.
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
numero = 123456

# Inicializar el contador de d√≠gitos pares
contador_pares = 0

# Contar los d√≠gitos pares
while numero > 0:
    digito = numero % 10
    if digito % 2 == 0:
        contador_pares += 1
    numero //= 10

# Imprimir el resultado
print(f"El n√∫mero tiene {contador_pares} d√≠gitos pares.")
```

**Ejercicio 05**

Solicita al usuario un n√∫mero y cuenta cu√°ntos n√∫meros en el rango de 1 a ese n√∫mero son divisibles por 7. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 20
Hay 2 n√∫meros divisibles por 7 en el rango de 1 a 20.
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
numero = 20

# Inicializar el contador de n√∫meros divisibles por 7
contador_divisibles = 0

# Contar los n√∫meros divisibles por 7 en el rango de 1 a numero
numero_actual = 1
while numero_actual <= numero:
    if numero_actual % 7 == 0:
        contador_divisibles += 1
    numero_actual += 1

# Imprimir el resultado
print(f"Hay {contador_divisibles} n√∫meros divisibles por 7 en el rango de 1 a {numero}.")
```

**Ejercicio 06**

Solicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son impares. Utiliza la declaraci√≥n `while` para resolver este problema.

```
Ingrese un n√∫mero: 7654321
El n√∫mero tiene 4 d√≠gitos impares.
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
numero = 7654321

# Inicializar el contador de d√≠gitos impares
contador_impares = 0

# Contar los d√≠gitos impares
while numero > 0:
    digito = numero % 10
    if digito % 2 != 0:
        contador_impares += 1
    numero //= 10

# Imprimir el resultado
print(f"El n√∫mero tiene {contador_impares} d√≠gitos impares.")
```

### Range

**Ejercicio 01**

Calcula la suma de todos los n√∫meros pares desde 1 hasta un n√∫mero dado ($n$). Utiliza la declaraci√≥n `range` para resolver este problema.

```
Ingrese un n√∫mero: 10
La suma de n√∫meros pares desde 1 hasta 10 es 30
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
n = 10

# Inicializar la suma
suma_pares = 0

# Calcular la suma de n√∫meros pares desde 1 hasta n
for i in range(2, n + 1, 2):
    suma_pares += i

# Imprimir el resultado
print(f"La suma de n√∫meros pares desde 1 hasta {n} es {suma_pares}")
```

**Ejercicio 02**

Muestra un contador regresivo desde un n√∫mero ($n$) dado hasta 1. Utiliza la declaraci√≥n `range` para resolver este problema.

```
Ingrese un n√∫mero: 5
Contador regresivo desde 5 hasta 1:
5
4
3
2
1
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
n = 5

# Mostrar un contador regresivo desde n hasta 1
print(f"Contador regresivo desde {n} hasta 1:")
for i in range(n, 0, -1):
    print(i)
```

**Ejercicio 03**

Muestra la tabla de multiplicar de un n√∫mero dado. Utiliza la declaraci√≥n `range` para resolver este problema.

```
Ingrese un n√∫mero: 7
Tabla de multiplicar del 7:
7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63
7 x 10 = 70
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
n = 7

# Mostrar la tabla de multiplicar de n
print(f"Tabla de multiplicar del {n}:")
for i in range(1, 11):
    resultado = n * i
    print(f"{n} x {i} = {resultado}")
```

**Ejercicio 04**

Escribe un programa que solicite al usuario un n√∫mero entero positivo y luego calcule la suma de los cuadrados de todos los n√∫meros desde 1 hasta el n√∫mero ingresado. Utiliza la declaraci√≥n `range` para generar los n√∫meros en el rango y luego suma los cuadrados de esos n√∫meros.

**Ejemplos**

1. Si el usuario ingresa el n√∫mero 4, el programa calcular√° la suma de los cuadrados de los n√∫meros desde 1 hasta 4 de la siguiente manera:

   Suma = $1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30$

   El programa mostrar√°: "La suma de los cuadrados de los n√∫meros en el rango de 1 a 4 es 30."

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero entero positivo
n = 4

# Inicializar la suma de cuadrados
suma_cuadrados = 0

# Calcular la suma de los cuadrados de los n√∫meros en el rango de 1 a n
for numero in range(1, n + 1):
    cuadrado = numero ** 2
    suma_cuadrados += cuadrado

# Imprimir el resultado
print(f"La suma de los cuadrados de los n√∫meros en el rango de 1 a {n} es {suma_cuadrados}")
```

### Break & Continue

**Ejercicio 01**

Solicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n `continue` para omitir los d√≠gitos impares.

```
Ingrese un n√∫mero: 123456
El n√∫mero tiene 3 d√≠gitos pares.
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
numero = 123456

# Inicializar el contador de d√≠gitos pares
contador_pares = 0

# Contar los d√≠gitos pares
while numero > 0:
    digito = numero % 10
    if digito % 2 != 0:
        # Si el d√≠gito es impar, omitirlo
        numero //= 10
        continue
    contador_pares += 1
    numero //= 10

# Imprimir el resultado
print(f"El n√∫mero tiene {contador_pares} d√≠gitos pares.")
```

**Ejercicio 02**

Calcula la suma de los n√∫meros en un rango dado (por ejemplo, de 1 a 10), pero omite los m√∫ltiplos de 3 utilizando la declaraci√≥n `continue`.

```
Ingrese un n√∫mero: 10
La suma de los n√∫meros no divisibles por 3 en el rango de 1 a 10 es 37
```

```{pyodide-python}
# Solicitar al usuario que ingrese un n√∫mero
n = 10

# Inicializar la suma
suma = 0

# Calcular la suma de los n√∫meros en el rango de 1 a n, omitiendo los m√∫ltiplos de 3
for numero in range(1, n + 1):
    if numero % 3 == 0:
        # Si es m√∫ltiplo de 3, omitirlo
        continue
    suma += numero

# Imprimir el resultado
print(f"La suma de los n√∫meros no divisibles por 3 en el rango de 1 a {n} es {suma}")
```

**Ejercicio 03**

Dada una lista de n√∫meros enteros, solicita al usuario un n√∫mero objetivo y busca si el n√∫mero est√° en la lista. Utiliza un bucle con `break` para detener la b√∫squeda una vez que encuentres el n√∫mero o determines que no est√° en la lista.

```{pyodide-python}
# Lista de n√∫meros
numeros = [12, 45, 23, 7, 18, 35, 9, 42]

# Solicitar al usuario un n√∫mero objetivo
objetivo = 10

# Inicializar una variable para verificar si se encontr√≥ el n√∫mero
encontrado = False

# Recorrer la lista de n√∫meros
for numero in numeros:
    if numero == objetivo:
        encontrado = True
        break  # Detener la b√∫squeda una vez que se encuentra el n√∫mero

# Comprobar si se encontr√≥ el n√∫mero o no
if encontrado:
    print(f"El n√∫mero {objetivo} fue encontrado en la lista.")
else:
    print(f"El n√∫mero {objetivo} no se encontr√≥ en la lista.")
```

**Ejercicio 04**

Simula un juego en el que la computadora "piensa" en un n√∫mero y el jugador intenta adivinarlo. Crea un bucle que permita al jugador hacer intentos para adivinar el n√∫mero, y utiliza `break` para salir del bucle si el jugador adivina el n√∫mero o excede un n√∫mero m√°ximo de intentos.

```{pyodide-python}
import random

# Generar un n√∫mero aleatorio entre 1 y 100
numero_secreto = random.randint(1, 100)

# N√∫mero m√°ximo de intentos permitidos
intentos_maximos = 10

print("Bienvenido al juego de adivinar el n√∫mero.")
print(f"Estoy pensando en un n√∫mero entre 1 y 100. Adivina cu√°l es.")
print(f"Tienes un m√°ximo de {intentos_maximos} intentos.")

# Bucle principal
for intento in range(1, intentos_maximos + 1):
    # Solicitar al jugador que ingrese un n√∫mero
    intento_jugador = int(input(f"Intento {intento}: Ingresa un n√∫mero: "))

    # Comprobar si el jugador adivin√≥ el n√∫mero
    if intento_jugador == numero_secreto:
        print(f"¬°Felicidades! Adivinaste el n√∫mero {numero_secreto} en {intento} intentos.")
        break  # Salir del bucle, el juego ha terminado

    # Comprobar si el intento es demasiado alto o bajo
    if intento_jugador < numero_secreto:
        print("El n√∫mero es m√°s alto. Int√©ntalo de nuevo.")
    else:
        print("El n√∫mero es m√°s bajo. Int√©ntalo de nuevo.")

# Si el jugador no adivin√≥ despu√©s de los intentos m√°ximos
else:
    print(f"Agotaste tus {intentos_maximos} intentos. El n√∫mero secreto era {numero_secreto}. ¬°Mejor suerte la pr√≥xima vez!")
```

## Estructura de Datos

### Listas

**Ejercicio 01**


Considere las siguientes listas:

```{pyodide-python}
a = [5, 1, 4, 9, 0]
b = range(3, 10) + range(20, 23)
c = [[1, 2], [3, 4, 5], [6, 7]]
d = ['perro', 'gato', 'jirafa', 'elefante']
e = ['a', a, 2 * a]
```

Sin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.

```{pyodide-python}
a[2]
b[9]
c[1][2]
e[0] == e[1]
len(c)
len(c[0])
len(e)
c[-1]
c[-1][+1]
c[2:] + d[2:]
a[3:10]
a[3:10:2]
d.index('jirafa')
e[c[0][1]].count(5)
sorted(a)[2]
complex(b[0], b[1])
```

Respuestas y verificaciones en el computador para las expresiones dadas:

1. `a[2]`: Resultado: `4`, Tipo: `int`

```{pyodide-python}
a = [5, 1, 4, 9, 0]
a[2]  # Resultado: 4
```

2. `b[9]`: Resultado: `29`, Tipo: `int`

```{pyodide-python}
b = list(range(3, 10)) + list(range(20, 23))
b[9]  # Resultado: 29
```

3. `c[1][2]`: Resultado: `5`, Tipo: `int`

```{pyodide-python}
c = [[1, 2], [3, 4, 5], [6, 7]]
c[1][2]  # Resultado: 5
```

4. `e[0] == e[1]`: Resultado: `False`, Tipo: `bool`

```{pyodide-python}
e = ['a', a, 2 * a]
e[0] == e[1]  # Resultado: False
```

5. `len(c)`: Resultado: `3`, Tipo: `int`

```{pyodide-python}
len(c)  # Resultado: 3
```

6. `len(c[0])`: Resultado: `2`, Tipo: `int`

```{pyodide-python}
len(c[0])  # Resultado: 2
```

7. `len(e)`: Resultado: `3`, Tipo: `int`

```{pyodide-python}
len(e)  # Resultado: 3
```

8. `c[-1]`: Resultado: `[6, 7]`, Tipo: `list`

```{pyodide-python}
c[-1]  # Resultado: [6, 7]
```

9. `c[-1][+1]`: Resultado: `7`, Tipo: `int`

```{pyodide-python}
c[-1][+1]  # Resultado: 7
```

10. `c[2:] + d[2:]`: Resultado: `[[6, 7], 'jirafa', 'elefante']`, Tipo: `list`

```{pyodide-python}
c[2:] + d[2:]  # Resultado: [[6, 7], 'jirafa', 'elefante']
```

11. `a[3:10]`: Resultado: `[9, 0]`, Tipo: `list`

```{pyodide-python}
a[3:10]  # Resultado: [9, 0]
```

12. `a[3:10:2]`: Resultado: `[9]`, Tipo: `list`

```{pyodide-python}
a[3:10:2]  # Resultado: [9]
```

13. `d.index('jirafa')`: Resultado: `2`, Tipo: `int`

```{pyodide-python}
d = ['perro', 'gato', 'jirafa', 'elefante']
d.index('jirafa')  # Resultado: 2
```

14. `e[c[0][1]].count(5)`: Resultado: `0`, Tipo: `int`

```{pyodide-python}
e[c[0][1]].count(5)  # Resultado: 0
```

15. `sorted(a)[2]`: Resultado: `4`, Tipo: `int`

```{pyodide-python}
sorted(a)[2]  # Resultado: 4
```

16. `complex(b[0], b[1])`: Resultado: `(3+4j)`, Tipo: `complex`

```{pyodide-python}
complex(b[0], b[1])  # Resultado: (3+4j)
```

**Ejercicio 02**

Escriba una rutina  que cuente cu√°ntos valores en la lista valores son mayores que `x`:

```terminal
>>> numero = 5
>>> lista = [7, 3, 6, 0, 4, 5, 10]
Existen 3 numeros mayores que 5 en la lista. 
```

```{pyodide-python}
# N√∫mero de referencia
x = 5

# Lista de valores
valores = [7, 3, 6, 0, 4, 5, 10]

# Contador para llevar el seguimiento de los valores mayores que x
contador = 0

# Iterar a trav√©s de la lista y contar los valores mayores que x
for valor in valores:
    if valor > x:
        contador += 1

# Imprimir el resultado
print(f"Existen {contador} n√∫meros mayores que {x} en la lista.")
```

**Ejercicio 03**

El [producto interno](https://es.wikipedia.org/wiki/Producto_escalar) de dos listas de n√∫meros es la suma de los productos de los t√©rminos correspondientes de ambas.

Por ejemplo, si:
```
a = [5, 1, 6]
b = [1, -2, 8]
```

entonces el producto interno entre $a$ y $b$ es:

```
(5 * 1) + (1 * -2) + (6 * 8)
```

1. Escriba una rutina que entregue el producto interno de `a` y `b`:

    ```
    >>> a = [7, 1, 4, 9, 8]
    >>> b = range(5)
    El producto interno es 68
    ```

2. Dos listas de n√∫meros son [ortogonales](https://es.wikipedia.org/wiki/Producto_escalar#Vectores_ortogonales) si su producto interno es cero. Escriba una rutina que indique si `a` y `b` son ortogonales:

    ```
    >>> a = [2, 1]
    >>> b =  [-3, 6]
    Los vectores son ortonormales
    ```  

**producto interno**

```{pyodide-python}
# Lista de n√∫meros 'a'
a = [7, 1, 4, 9, 8]

# Lista de n√∫meros 'b'
b = list(range(5))

# Inicializar la suma del producto interno
producto_interno = 0

# Calcular el producto interno
for i in range(len(a)):
    producto_interno += a[i] * b[i]

# Imprimir el resultado
print(f"El producto interno es {producto_interno}")
```

**vectores ortonormales**

```{pyodide-python}
# Lista de n√∫meros 'a'
a = [2, 1]

# Lista de n√∫meros 'b'
b = [-3, 6]

# Inicializar la suma del producto interno
producto_interno = 0

# Calcular el producto interno
for i in range(len(a)):
    producto_interno += a[i] * b[i]

# Verificar si son ortogonales
if producto_interno == 0:
    print("Los vectores son ortogonales")
else:
    print("Los vectores no son ortogonales")
```

### Tuplas

**Ejercicio 01**


Considere las siguientes asignaciones:

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
c = ('Donald', True, b)
x, y = ((27, 3), 9)
z, w = x
v = (x, a)
```

Sin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.

```{pyodide-python}
a < b
y + w
x + a
len(v)
v[1][1]
c[0][0]
z, y
a + b[1:5]
(a + b)[1:5]
str(a[2]) + str(b[2])
str(a[2] + b[2])
str((a + b)[2])
str(a + b)[2]
```

Respuestas y verificaciones en el computador para las expresiones dadas:

1. `a < b`: Resultado: `True`, Tipo: `bool`

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
a < b  # Resultado: True
```

2. `y + w`: Resultado: `12`, Tipo: `int`

```{pyodide-python}
x, y = ((27, 3), 9)
z, w = x
y + w  # Resultado: 12
```

3. `x + a`: Esto generar√° un error porque no se pueden sumar una tupla `(x)` y una tupla `(a)`.

4. `len(v)`: Resultado: `2`, Tipo: `int`

```{pyodide-python}
v = (x, a)
len(v)  # Resultado: 2
```

5. `v[1][1]`: Esto generar√° un error porque est√°s tratando de acceder a un √≠ndice en una tupla `(a)` que est√° dentro de otra tupla `(v)`.

6. `c[0][0]`: Resultado: `'D'`, Tipo: `str`

```{pyodide-python}
c = ('Donald', True, b)
c[0][0]  # Resultado: 'D'
```

7. `z, y`: Resultado: `(27, 9)`, Tipo: `tuple`

```{pyodide-python}
x, y = ((27, 3), 9)
z, y  # Resultado: (27, 9)
```

8. `a + b[1:5]`: Resultado: `(2, 10, 1991, 12, 1990)`, Tipo: `tuple`

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
a + b[1:5]  # Resultado: (2, 10, 1991, 12, 1990)
```

9. `(a + b)[1:5]`: Resultado: `(10, 1991, 12, 1990)`, Tipo: `tuple`

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
(a + b)[1:5]  # Resultado: (10, 1991, 12, 1990)
```

10. `str(a[2]) + str(b[2])`: Resultado: `'19911990'`, Tipo: `str`

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
str(a[2]) + str(b[2])  # Resultado: '19911990'
```

11. `str(a[2] + b[2])`: Resultado: `'3981'`, Tipo: `str`

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
str(a[2] + b[2])  # Resultado: '3981'
```

12. `str((a + b)[2])`: Resultado: `'1991'`, Tipo: `str`

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
str((a + b)[2])  # Resultado: '1991'
```

13. `str(a + b)[2]`: Resultado: `'('`, Tipo: `str`

```{pyodide-python}
a = (2, 10, 1991)
b = (25, 12, 1990)
str(a + b)[2]  # Resultado: '('
```

### Conjuntos

**Ejercicio 01**


Considere las siguientes asignaciones:

```{pyodide-python}
a = {5, 2, 3, 9, 4}
b = {3, 1}
c = {7, 5, 5, 1, 8, 6}
d = [6, 2, 4, 5, 5, 3, 1, 3, 7, 8]
e = {(2, 3), (3, 4), (4, 5)}
f = [{2, 3}, {3, 4}, {4, 5}]
```

Sin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.


```{pyodide-python}
len(c)
len(set(d))
a & (b | c)
(a & b) | c
c - a
max(e)
f[0] < a
set(range(4)) & a
(set(range(4)) & a) in f
len(set('perro'))
len({'perro'})
```

Respuestas y verificaciones en el computador para las expresiones dadas:

1. `len(c)`: Resultado: `5`, Tipo: `int`

```{pyodide-python}
c = {7, 5, 5, 1, 8, 6}
len(c)  # Resultado: 5
```

2. `len(set(d))`: Resultado: `6`, Tipo: `int`

```{pyodide-python}
d = [6, 2, 4, 5, 5, 3, 1, 3, 7, 8]
len(set(d))  # Resultado: 6
```

3. `a & (b | c)`: Resultado: `{1, 3, 5}`, Tipo: `set`

```{pyodide-python}
a = {5, 2, 3, 9, 4}
b = {3, 1}
c = {7, 5, 5, 1, 8, 6}
a & (b | c)  # Resultado: {1, 3, 5}
```

4. `(a & b) | c`: Resultado: `{1, 2, 3, 4, 5, 6, 7, 8, 9}`, Tipo: `set`

```{pyodide-python}
(a & b) | c  # Resultado: {1, 2, 3, 4, 5, 6, 7, 8, 9}
```

5. `c - a`: Resultado: `{1, 6, 8, 7}`, Tipo: `set`

```{pyodide-python}
c - a  # Resultado: {1, 6, 8, 7}
```

6. `max(e)`: Resultado: `(4, 5)`, Tipo: `tuple`

```{pyodide-python}
e = {(2, 3), (3, 4), (4, 5)}
max(e)  # Resultado: (4, 5)
```

7. `f[0] < a`: Resultado: `True`, Tipo: `bool`

```{pyodide-python}
f = [{2, 3}, {3, 4}, {4, 5}]
f[0] < a  # Resultado: True
```

8. `set(range(4)) & a`: Resultado: `{2, 3}`, Tipo: `set`

```{pyodide-python}
set(range(4)) & a  # Resultado: {2, 3}
```

9. `(set(range(4)) & a) in f`: Resultado: `True`, Tipo: `bool`

```{pyodide-python}
(set(range(4)) & a) in f  # Resultado: True
```

10. `len(set('perro'))`: Resultado: `4`, Tipo: `int`

```{pyodide-python}
len(set('perro'))  # Resultado: 4
```

11. `len({'perro'})`: Resultado: `1`, Tipo: `int`

```{pyodide-python}
len({'perro'})  # Resultado: 1
```


### Diccionarios

**Ejercicio 01**


Considere las siguientes asignaciones:

```{pyodide-python}
a = {'a': 14, 'b': 23, 'c': 88}
b = {12: True, 55: False, -2: False}
c = dict()
d = {1: [2, 3, 4], 5: [6, 7, 8, 9], 10: [11]}
e = {2 + 3: 4, 5: 6 + 7, 8: 9, 10: 11 + 12}
```

Sin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.

```{pyodide-python}
a['c']
a[23]
b[-2] or b[55]
23 in a
'a' in a
5 in d[5]
sum(b)
len(c)
len(d)
len(d[1])
len(b.values())
len(e)
sum(a.values())
max(list(e))
d[1] + d[5] + d[10]
```

Respuestas y verificaciones en el computador para las expresiones dadas:

Aqu√≠ tienes las respuestas y verificaciones en el computador para las expresiones dadas:

1. `a['c']`: Resultado: `88`, Tipo: `int`

```{pyodide-python}
a = {'a': 14, 'b': 23, 'c': 88}
a['c']  # Resultado: 88
```

2. `a[23]`: Resultado: `KeyError`, Tipo: `Error`

```{pyodide-python}
# No se encuentra la clave 23 en el diccionario 'a'
a[23]  # Resultado: KeyError
```

3. `b[-2] or b[55]`: Resultado: `False`, Tipo: `bool`

```{pyodide-python}
b = {12: True, 55: False, -2: False}
b[-2] or b[55]  # Resultado: False
```

4. `23 in a`: Resultado: `False`, Tipo: `bool`

```{pyodide-python}
23 in a  # Resultado: False
```

5. `'a' in a`: Resultado: `True`, Tipo: `bool`

```{pyodide-python}
'a' in a  # Resultado: True
```

6. `5 in d[5]`: Resultado: `True`, Tipo: `bool`

```{pyodide-python}
d = {1: [2, 3, 4], 5: [6, 7, 8, 9], 10: [11]}
5 in d[5]  # Resultado: True
```

7. `sum(b)`: Resultado: `65`, Tipo: `int`

```{pyodide-python}
b = {12: True, 55: False, -2: False}
sum(b)  # Resultado: 65
```

8. `len(c)`: Resultado: `0`, Tipo: `int`

```{pyodide-python}
c = dict()
len(c)  # Resultado: 0
```

9. `len(d)`: Resultado: `3`, Tipo: `int`

```{pyodide-python}
d = {1: [2, 3, 4], 5: [6, 7, 8, 9], 10: [11]}
len(d)  # Resultado: 3
```

10. `len(d[1])`: Resultado: `3`, Tipo: `int`

```{pyodide-python}
len(d[1])  # Resultado: 3
```

11. `len(b.values())`: Resultado: `3`, Tipo: `int`

```{pyodide-python}
len(b.values())  # Resultado: 3
```

12. `len(e)`: Resultado: `4`, Tipo: `int`

```{pyodide-python}
e = {2 + 3: 4, 5: 6 + 7, 8: 9, 10: 11 + 12}
len(e)  # Resultado: 4
```

13. `sum(a.values())`: Resultado: `125`, Tipo: `int`

```{pyodide-python}
a = {'a': 14, 'b': 23, 'c': 88}
sum(a.values())  # Resultado: 125
```

14. `max(list(e))`: Resultado: `10`, Tipo: `int`

```{pyodide-python}
max(list(e))  # Resultado: 10
```

15. `d[1] + d[5] + d[10]`: Resultado: `[2, 3, 4, 6, 7, 8, 9, 11]`, Tipo: `list`

```{pyodide-python}
d[1] + d[5] + d[10]  # Resultado: [2, 3, 4, 6, 7, 8, 9, 11]
```


## Funciones



**Ejercicio 01**

Escriba una funci√≥n que se llame `saludar` que reciba como input un string **s** y devuelva como output "Hola + valor de s".
* **Ejemplo**: *saludar("mundo")* = "Hola mundo"

```{pyodide-python}
def saludar(s):
    return "Hola " + s
```

```{pyodide-python}
mensaje = saludar("mundo")
print(mensaje)
```

**Ejercicio 02**

Escriba una funci√≥n que se llame `es_par` que reciba como input un n√∫mero entero **n** y devuelva como output *True* si el n√∫mero es par, y *False* en otro caso.

* **Ejemplo**: 
    * *es_par(4)* = True
    * *es_par(3)* = False

```{pyodide-python}
def es_par(n):
    return n % 2 == 0
```

```{pyodide-python}
resultado1 = es_par(4)
resultado2 = es_par(3)

print(resultado1)  # Esto imprimir√° True
print(resultado2)  # Esto imprimir√° False
```

**Ejercicio 03**

Escriba la funci√≥n `invertir_digitos(n)` que reciba un n√∫mero entero n y entregue como resultado el n√∫mero `n` con los d√≠gitos en el orden inverso:

```terminal
 >>> invertir_digitos(142)
241
```
 
A continuaci√≥n, escriba un programa que indique si el n√∫mero ingresado es pal√≠ndromo o no, usando la funci√≥n `invertir_digitos`:

```terminal
Ingrese n: 81418
Es pal√≠ndromo
```



```{pyodide-python}
def invertir_digitos(n):
    # Convertir el n√∫mero a cadena para facilitar la inversi√≥n
    str_n = str(n)
    # Invertir la cadena
    str_invertida = str_n[::-1]
    # Convertir la cadena invertida nuevamente a un n√∫mero entero
    n_invertido = int(str_invertida)
    return n_invertido
```

```{pyodide-python}
resultado1 = invertir_digitos(142)
print(resultado1)  
```

```{pyodide-python}
def es_palindromo(n):
    num_invertido = invertir_digitos(n)
    if n == num_invertido:
        return "Es pal√≠ndromo"
    else:
        return "No es pal√≠ndromo"
```

```{pyodide-python}
resultado1 = es_palindromo(81418)
print(resultado1)  
```

**Ejercicio 04**



Muchos de estos programas s√≥lo ten√≠an peque√±as diferencias entre ellos, por lo que hab√≠a que repetir mucho c√≥digo al escribirlos. En este ejercicio, usted deber√° implementar algunos de esos programas como funciones, reutilizando componentes para evitar escribir c√≥digo repetido.

**Ejercicio 041**

Escriba la funci√≥n `es_divisible(n, d)` que indique si `n` es divisible por `d`:

```
>>> es_divisible(15, 5)
True
>>> es_divisible(15, 6)
False
```

```{pyodide-python}
def es_divisible(n, d):
    return n % d == 0
```

```{pyodide-python}
# Ejemplos
print(es_divisible(15, 5))  # True
print(es_divisible(15, 6))  # False
```

**Ejercicio 042**

Usando la funci√≥n es_divisible, escriba una funci√≥n `es_primo(n)` que determine si un n√∫mero es primo o no:

```
>>> es_primo(17)
True
>>> es_primo(221)
False
```

```{pyodide-python}
def es_primo(n):
    if n <= 1:
        return False  # Los n√∫meros menores o iguales a 1 no son primos
    elif n <= 3:
        return True  # 2 y 3 son primos
    elif n % 2 == 0:
        return False  # Los n√∫meros pares mayores que 2 no son primos
    else:
        # Verificar divisibilidad hasta la ra√≠z cuadrada de n
        for i in range(3, int(n**0.5) + 1, 2):
            if es_divisible(n, i):
                return False
        return True
```

```{pyodide-python}
# Ejemplos
print(es_primo(17))  # True (17 es un n√∫mero primo)
print(es_primo(221))  # False (221 no es un n√∫mero primo)
```

**Ejercicio 043**

Usando la funci√≥n `es_primo`, escriba la funci√≥n `i_esimo_primo(i)` que entregue el i-√©simo n√∫mero primo.

```
>>> i_esimo_primo(1)
2
>>> i_esimo_primo(20)
71
```

```{pyodide-python}
def i_esimo_primo(i):
    if i <= 0:
        return None  # N√∫meros negativos o cero no tienen un i-√©simo n√∫mero primo
    count = 0
    num = 2
    while count < i:
        if es_primo(num):
            count += 1
        if count < i:
            num += 1
    return num
```

```{pyodide-python}
# Ejemplos
print(i_esimo_primo(1))  # 2 (primer n√∫mero primo)
print(i_esimo_primo(20))  # 71 (vig√©simo n√∫mero primo)
```

**Ejercicio 044**

Usando las funciones anteriores, escriba la funci√≥n `primeros_primos(m)` que entregue una lista de los primeros m n√∫meros primos:

```
>>> primeros_primos(10)
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
```

```{pyodide-python}
def primeros_primos(m):
    if m <= 0:
        return []  # Si m es cero o negativo, no hay primos que encontrar
    primes = []
    num = 2
    while len(primes) < m:
        if es_primo(num):
            primes.append(num)
        num += 1
    return primes
```

```{pyodide-python}
# Ejemplo
print(primeros_primos(10))  # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
```

**Ejercicio 045**

Usando las funciones anteriores, escriba la funci√≥n `primos_hasta(m)` que entregue una lista de los primos menores o iguales que `m`:

```
>>> primos_hasta(19)
[2, 3, 5, 7, 11, 13, 17, 19]
```

```{pyodide-python}
def primos_hasta(m):
    if m < 2:
        return []  # No hay primos menores o iguales a 1
    primes = []
    for num in range(2, m + 1):
        if es_primo(num):
            primes.append(num)
    return primes
```

```{pyodide-python}
# Ejemplo
print(primos_hasta(19))  # [2, 3, 5, 7, 11, 13, 17, 19]
```

**Ejercicio 046**

Un [primo de Mersenne](https://es.wikipedia.org/wiki/N%C3%BAmero_primo_de_Mersenne) es un n√∫mero primo de la forma $2p‚àí1$. 
Una propiedad conocida de los primos de Mersenne es que $p$ debe ser tambi√©n un n√∫mero primo.

Escriba la funci√≥n `mersenne` que pregunte al usuario un n√∫mero $n$, y muestre como salida los primeros `n` primos de Mersenne:

```
>>> mersenne(5)
3
7
31
127
8191
```

```{pyodide-python}
def mersenne(n):
    count = 0
    candidate = 2
    while count < n:
        if es_primo(candidate):
            mersenne_prime = 2 ** candidate - 1
            if es_primo(mersenne_prime):
                print(mersenne_prime)
                count += 1
        candidate += 1
```

```{pyodide-python}
# Ejemplo
mersenne(5)
```

**Ejercicio 05**

La suma natural de los primeros **n** n√∫meros naturales esta dado por:
$$\displaystyle S = \sum_{k=1}^{n} k = 1 +2 +3 +...+n = \dfrac{n(n+1)}{2} $$

Escriba una funci√≥n que se llame `suma_numeros_naturales` que reciba como input un n√∫mero entero **n** y devuelva como output la suma de los primeros **n** n√∫meros naturales. 

Para esto:

* a) Programe la funci√≥n ocupando la f√≥rmula manual: $S = 1+2+3+..+n$
* b) Programe la funci√≥n ocupando la f√≥rmula cerrada: $S =\dfrac{n(n+1)}{2} $

**Ejemplo**: 
   * *suma_numeros_naturales(1)* = 1
   * *suma_numeros_naturales(10)* = 55
   * *suma_numeros_naturales(100)* = 5050



```{pyodide-python}
# Usando la f√≥rmula manual:
def suma_numeros_naturales_manual(n):
    suma = 0
    for i in range(1, n + 1):
        suma += i
    return suma
```

```{pyodide-python}
# Usando la f√≥rmula cerrada:
def suma_numeros_naturales_cerrada(n):
    suma = (n * (n + 1)) // 2
    return suma
```

```{pyodide-python}
print("Usando la f√≥rmula manual:")
print(suma_numeros_naturales_manual(1))   # Salida: 1
print(suma_numeros_naturales_manual(10))  # Salida: 55
print(suma_numeros_naturales_manual(100)) # Salida: 5050
print()
print("Usando la f√≥rmula cerrada:")
print(suma_numeros_naturales_cerrada(1))   # Salida: 1
print(suma_numeros_naturales_cerrada(10))  # Salida: 55
print(suma_numeros_naturales_cerrada(100)) # Salida: 5050
```

**Ejercicio 06**

En los siglos XVII y XVIII, James Gregory y Gottfried Leibniz descubrieron una serie infinita que sirve para calcular $\pi$:

$$\displaystyle \pi = 4 \sum_{k=1}^{\infty}\dfrac{(-1)^{k+1}}{2k-1} = 4(1-\dfrac{1}{3}+\dfrac{1}{5}-\dfrac{1}{7} + ...) $$

Desarolle un programa para estimar el valor de $\pi$ ocupando el m√©todo de Leibniz, donde la entrada del programa debe ser un n√∫mero entero $n$ que indique cu√°ntos t√©rminos de la suma se utilizar√°.


* **Ejemplo**: 
    * *calcular_pi(3)* = 3.466666666666667
    * *calcular_pi(1000)* = 3.140592653839794

```{pyodide-python}
def calcular_pi(n):
    suma = 0
    for k in range(1, n + 1):
        termino = (-1) ** (k + 1) / (2 * k - 1)
        suma += termino
    pi_estimado = 4 * suma
    return pi_estimado
```

```{pyodide-python}
# Ejemplos de uso
n1 = 3
pi1 = calcular_pi(n1)
print(f"Con {n1} t√©rminos, el valor estimado de œÄ es {pi1}")
```

```{pyodide-python}
n2 = 1000
pi2 = calcular_pi(n2)
print(f"Con {n2} t√©rminos, el valor estimado de œÄ es {pi2}")
```

**Ejercicio 07**

Euler realiz√≥ varios aportes en relaci√≥n a $e$, pero no fue hasta 1748 cuando public√≥ su **Introductio in analysin infinitorum** que dio un tratamiento definitivo a las ideas sobre $e$. All√≠ mostr√≥ que:


En los siglos XVII y XVIII, James Gregory y Gottfried Leibniz descubrieron una serie infinita que sirve para calcular œÄ:

$$\displaystyle e = \sum_{k=0}^{\infty}\dfrac{1}{k!} = 1+\dfrac{1}{2!}+\dfrac{1}{3!}+\dfrac{1}{4!} + ... $$

Desarolle un programa para estimar el valor de $e$ ocupando el m√©todo de Euler, donde la entrada del programa debe ser un n√∫mero entero $n$ que indique cu√°ntos t√©rminos de la suma se utilizar√°. 

Para esto:

* a) Defina la funci√≥n `factorial`, donde la entrada sea un n√∫mero natural  $n$ y la salida sea el factorial de dicho n√∫mero.
    * **Ejemplo**: *factorial(3)* =3, *factorial(5)* = 120
    
    
* b) Ocupe la funci√≥n `factorial` dentro de la funci√≥n `calcular_e`.     
    * **Ejemplo**: *calcular_e(3)* = 2.6666666666666665, *calcular_e(1000)* = 2.7182818284590455

```{pyodide-python}
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def calcular_e(n):
    suma = 0
    for k in range(n):
        termino = 1 / factorial(k)
        suma += termino
    return suma
```

```{pyodide-python}
# Ejemplos de uso
n1 = 3
e1 = calcular_e(n1)
print(f"Con {n1} t√©rminos, el valor estimado de e es {e1}")
```

```{pyodide-python}
n2 = 1000
e2 = calcular_e(n2)
print(f"Con {n2} t√©rminos, el valor estimado de e es {e2}")
```

**Ejercicio 08**

Sea $\sigma(n)$ definido como la suma de los divisores propios de $n$ (n√∫meros menores que n que se dividen en $n$).

Los [n√∫meros amigos](https://en.wikipedia.org/wiki/Amicable_numbers) son  enteros positivos $n_1$ y $n_2$ tales que la suma de los divisores propios de uno es igual al otro n√∫mero y viceversa, es decir, $\sigma(n_1)=\sigma(n_2)$ y $\sigma(n_2)=\sigma(n_1)$.


Por ejemplo, los n√∫meros 220 y 284 son n√∫meros amigos.
* los divisores propios de 220 son 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 y 110; por lo tanto $\sigma(220) = 284$. 
* los divisores propios de 284 son 1, 2, 4, 71 y 142; entonces $\sigma(284) = 220$.


Implemente una funci√≥n llamada `amigos` cuyo input sean dos n√∫meros naturales $n_1$ y $n_2$, cuyo output sea verifique si los n√∫meros son amigos o no. 

Para esto:

* a) Defina la funci√≥n `divisores_propios`, donde la entrada sea un n√∫mero natural $n$ y la salida sea una lista con los divisores propios de dicho n√∫mero.
    * **Ejemplo**: *divisores_propios(220)* = [1, 2, 4, 5, 10, 11, 20, 22, 44, 55 y 110], *divisores_propios(284)* = [1, 2, 4, 71 y 142]
    
    
* b) Ocupe la funci√≥n `divisores_propios` dentro de la funci√≥n `amigos`.

    * **Ejemplo**: *amigos(220,284)* = True, *amigos(6,5)* = False

```{pyodide-python}
def divisores_propios(n):
    divisores = []
    for i in range(1, n):
        if n % i == 0:
            divisores.append(i)
    return divisores
```

```{pyodide-python}
# Ejemplos de uso
divisores_220 = divisores_propios(220)
divisores_284 = divisores_propios(284)
print(f"Divisores propios de 220: {divisores_220}")
print(f"Divisores propios de 284: {divisores_284}")
```

```{pyodide-python}
def amigos(n1, n2):
    suma_divisores_n1 = sum(divisores_propios(n1))
    suma_divisores_n2 = sum(divisores_propios(n2))
    
    return suma_divisores_n1 == n2 and suma_divisores_n2 == n1
```

```{pyodide-python}
# Ejemplos de uso
n1 = 220
n2 = 284
resultado1 = amigos(n1, n2)
print(f"¬ø{n1} y {n2} son amigos? {resultado1}")

n3 = 6
n4 = 5
resultado2 = amigos(n3, n4)
print(f"¬ø{n3} y {n4} son amigos? {resultado2}")
```

**Ejercicio 09**

La [conjetura de Collatz](https://en.wikipedia.org/wiki/Collatz_conjecture), conocida tambi√©n como conjetura $3n+1$ o conjetura de Ulam (entre otros nombres), fue enunciada por el matem√°tico Lothar Collatz en 1937, y a la fecha no se ha resuelto.

Sea la siguiente operaci√≥n, aplicable a cualquier n√∫mero entero positivo:
* Si el n√∫mero es par, se divide entre 2.
* Si el n√∫mero es impar, se multiplica por 3 y se suma 1.

La conjetura dice que siempre alcanzaremos el 1 (y por tanto el ciclo 4, 2, 1) para cualquier n√∫mero con el que comencemos. 

Implemente una funci√≥n llamada `collatz` cuyo input sea un n√∫mero natural positivo $N$ y como output devulva la secuencia de n√∫meros hasta llegar a 1.

* **Ejemplo**: *collatz(9)* = [9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]

```{pyodide-python}
def collatz(n):
    secuencia = [n]
    while n != 1:
        if n % 2 == 0:
            n //= 2
        else:
            n = 3 * n + 1
        secuencia.append(n)
    return secuencia
```

```{pyodide-python}
# Ejemplo de uso
numero = 9
secuencia_collatz = collatz(numero)
print(secuencia_collatz)
```

**Ejercicio 10**

La [conjetura de Goldbach](https://en.wikipedia.org/wiki/Goldbach%27s_conjecture) es uno de los problemas abiertos m√°s antiguos en matem√°ticas. Concretamente, G.H. Hardy, en 1921, en su famoso discurso pronunciado en la Sociedad Matem√°tica de Copenhague, coment√≥ que probablemente la conjetura de Goldbach no es solo uno de los problemas no resueltos m√°s dif√≠ciles de la teor√≠a de n√∫meros, sino de todas las matem√°ticas. Su enunciado es el siguiente:

> Todo n√∫mero par mayor que 2 puede escribirse como suma de dos n√∫meros primos - Christian Goldbach (1742)

Implemente una funci√≥n llamada `goldbach` cuyo input sea un n√∫mero natural positivo $n$ y como output devuelva la suma de dos primos ($n_1$ y $n_2$) tal que: $n_1+n_2=n$. 

Para esto:

* a) Defina la funci√≥n `es_primo`, donde la entrada sea un n√∫mero natural $n$ y la salida sea **True** si el n√∫mero es primo y **False** en otro caso.
    * **Ejemplo**: *es_primo(3)* = True, *es_primo(4)* = False
    
    
* b)  Defina la funci√≥n `lista_de_primos`, donde la entrada sea un n√∫mero natural par $n$ mayor que dos y la salida sea una lista con todos los n√∫mero primos entre 2 y $n$.
    * **Ejemplo**: *lista_de_primos(4)* = [2,3], *lista_de_primos(6)* = [2,3,5], *lista_de_primos(8)* = [2,3,5,7]


* c) Ocupe la funci√≥n `lista_de_primos` dentro de la funci√≥n `goldbash`.
 * **Ejemplo**: goldbash(4) = (2,2), goldbash(6) = (3,3) , goldbash(8) = (3,5)

```{pyodide-python}
# a) Funci√≥n es_primo
def es_primo(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
```

```{pyodide-python}
# Ejemplos de uso
print(es_primo(3))  # True
print(es_primo(4))  # False
```

```{pyodide-python}
# b) Funci√≥n lista_de_primos
def lista_de_primos(n):
    primos = []
    for num in range(2, n + 1):
        if es_primo(num):
            primos.append(num)
    return primos
```

```{pyodide-python}
# Ejemplos de uso
print(lista_de_primos(4))  # [2, 3]
print(lista_de_primos(6))  # [2, 3, 5]
print(lista_de_primos(8))  # [2, 3, 5, 7]
```

```{pyodide-python}
# c) Funci√≥n goldbach
def goldbach(n):
    primos = lista_de_primos(n)
    for primo in primos:
        if n - primo in primos:
            return (primo, n - primo)
```

```{pyodide-python}
# Ejemplos de uso
print(goldbach(4))  # (2, 2)
print(goldbach(6))  # (3, 3)
print(goldbach(8))  # (3, 5)
```

**Ejercicio 11**

El [producto interno](https://es.wikipedia.org/wiki/Producto_escalar) de dos listas de n√∫meros es la suma de los productos de los t√©rminos correspondientes de ambas.

Por ejemplo, si:
```
a = [5, 1, 6]
b = [1, -2, 8]
```

entonces el producto interno entre $a$ y $b$ es:

```
(5 * 1) + (1 * -2) + (6 * 8)
```

1. Escriba la funci√≥n `producto_interno(a, b)` que entregue el producto interno de `a` y `b`:

    ```
    >>> a = [7, 1, 4, 9, 8]
    >>> b = range(5)
    >>> producto_interno(a, b)
    68
    ```

2. Dos listas de n√∫meros son [ortogonales](https://es.wikipedia.org/wiki/Producto_escalar#Vectores_ortogonales) si su producto interno es cero. Escriba la funci√≥n `son_ortogonales(a, b)` que indique si `a` y `b` son ortogonales:

    ```
    >>> son_ortogonales([2, 1], [-3, 6])
    True
    ```  


```{pyodide-python}
# 1. Funci√≥n producto_interno

def producto_interno(a, b):
    if len(a) != len(b):
        return None  # Las listas deben tener la misma longitud
    return sum(a_i * b_i for a_i, b_i in zip(a, b))
```

```{pyodide-python}
# Ejemplo de uso
a = [7, 1, 4, 9, 8]
b = list(range(5))
resultado = producto_interno(a, b)
print(resultado)  # Salida: 68
```

```{pyodide-python}
# 2. Funci√≥n son_ortogonales
def son_ortogonales(a, b):
    producto = producto_interno(a, b)
    return producto == 0
```

```{pyodide-python}
# Ejemplo de uso
resultado = son_ortogonales([2, 1], [-3, 6])
print(resultado)  # Salida: True
```

**Ejercicio 12**


Una fecha puede ser representada como una tupla `(anno, mes, dia)`.

1. Escriba la funci√≥n `dia_siguiente(f)` que reciba como par√°metro una fecha `f` y entegue cu√°l es la fecha siguiente:

    ```
    >>> dia_siguiente((2011, 4, 11))
    (2011, 4, 12)
    >>> dia_siguiente((2011, 4, 30))
    (2011, 5, 1)
    >>> dia_siguiente((2011, 12, 31))
    (2012, 1, 1)
    ```
    
    Como recomendaci√≥n, dentro de su funci√≥n use una lista con la cantidad de d√≠as que tiene cada mes:
    
    ```
    dias_mes = [31, 28, 31, 30,
            31, 30, 31, 31,
            30, 31, 30, 31]
    ```
    

2. Escriba la funci√≥n `dias_entre(f1, f2)` que retorne la cantidad de d√≠as que han transcurrido entre las fechas `f1` y `f2`:

    ```
    >>> hoy = (2011, 4, 11)
    >>> navidad = (2011, 12, 25)
    >>> dias_entre(hoy, navidad)
    258
    >>> dias_entre(hoy, hoy)
    0
    ```

```{pyodide-python}
# 1. Funci√≥n dia_siguiente
def dia_siguiente(fecha):
    anno, mes, dia = fecha
    dias_mes = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    # Comprobamos si es un a√±o bisiesto
    if (anno % 4 == 0 and anno % 100 != 0) or (anno % 400 == 0):
        dias_mes[1] = 29

    if dia < dias_mes[mes - 1]:
        return (anno, mes, dia + 1)
    elif mes < 12:
        return (anno, mes + 1, 1)
    else:
        return (anno + 1, 1, 1)
```

```{pyodide-python}
# Ejemplos de uso
print(dia_siguiente((2011, 4, 11)))  # Salida: (2011, 4, 12)
print(dia_siguiente((2011, 4, 30)))  # Salida: (2011, 5, 1)
print(dia_siguiente((2011, 12, 31)))  # Salida: (2012, 1, 1)
```

```{pyodide-python}
# 2. Funci√≥n dias_entre
def dias_entre(fecha1, fecha2):
    from datetime import date

    date1 = date(fecha1[0], fecha1[1], fecha1[2])
    date2 = date(fecha2[0], fecha2[1], fecha2[2])
    
    delta = date2 - date1
    return delta.days
```

```{pyodide-python}
# Ejemplos de uso
hoy = (2011, 4, 11)
navidad = (2011, 12, 25)
print(dias_entre(hoy, navidad))  # Salida: 258
print(dias_entre(hoy, hoy))  # Salida: 0
```

**Ejercicio 13**


El [conjunto potencia](https://es.wikipedia.org/wiki/Conjunto_potencia) de un conjunto $S$ es el conjunto de todos los subconjuntos de $S$.

Por ejemplo, el conjunto potencia de $\{1,2,3\}$
 es:

$$\{\emptyset,\{1\},\{2\},\{3\},\{1,2\},\{1,3\},\{2,3\},\{1,2,3\}\}$$

En Python, un conjunto no puede contener a otros conjuntos, ya que no puede tener elementos mutables, y los conjuntos lo son:


```{pyodide-python}
>>> a = set()
>>> a.add({1, 2})        # :(
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: unhashable type: 'set'
```

Lo que s√≠ podemos crear es una lista de conjuntos:

```{pyodide-python}
>>> l = list()
>>> l.append({1, 2})     # :)
>>> l
[set([1, 2])]
```

Escriba la `funci√≥n conjunto_potencia(s)` que reciba como par√°metro un conjunto cualquiera `s` y retorne su ¬´lista potencia¬ª (la lista de todos sus subconjuntos):

```{pyodide-python}
>>> conjunto_potencia({6, 1, 4})
[set(), set([6]), set([1]), set([4]), set([6, 1]), set([6, 4]), set([1, 4]), set([6, 1, 4])]
```

```{pyodide-python}
def conjunto_potencia(s):
    # Convierte el conjunto en una lista para poder iterar sobre sus elementos
    elementos = list(s)
    n = len(elementos)
    potencia = []

    for i in range(2**n):
        subconjunto = set()
        for j in range(n):
            # Verifica si el j-√©simo bit de i est√° encendido
            if (i >> j) & 1:
                subconjunto.add(elementos[j])
        potencia.append(subconjunto)

    return potencia
```

```{pyodide-python}
# Ejemplo de uso
conjunto = {6, 1, 4}
resultado = conjunto_potencia(conjunto)
print(resultado)
```

**Ejercicio 14**

Para este ejercicio considere lo siguiente:

Para obtener la lista de palabras de la oraci√≥n, puede usar el m√©todo `split` de los strings:

```{pyodide-python}
>>> s = 'el gato y el pato'
>>> s.split()
['el', 'gato', 'y', 'el', 'pato']
```

Para obtener un string en min√∫sculas, puede usar el m√©todo lower:

```{pyodide-python}
>>> s = 'Venezuela'
>>> s.lower()
'venezuela'
```

1. Escriba la funci√≥n `contar_letras(oracion)` que retorne un diccionario asociando a cada letra la cantidad de veces que aparece en la oracion:

    ```
    >>> contar_letras('El elefante avanza hacia Asia')
    {'a': 8, 'c': 1, 'e': 4, 'f': 1, 'h': 1, 'i': 2, 'l': 2, 'n': 2, 's': 1, 't': 1, 'v': 1, 'z': 1}
    ```

    Cada valor del diccionario debe considerar tanto las apariciones en may√∫scula como en min√∫scula de la letra correspondiente. Los espacios deben ser ignorados.

2. Escriba la funci√≥n `contar_vocales(oracion)` que retorne un diccionario asociando a cada vocal la cantidad de veces que aparece en la oracion. Si una vocal no aparece en la oraci√≥n, de todos modos debe estar en el diccionario asociada al valor 0:

    ```
    >>> contar_vocales('El elefante avanza hacia Asia')
    {'a': 8, 'e': 4, 'i': 2, 'o': 0, 'u': 0}
    ```


3. Escriba la funci√≥n `contar_iniciales(oracion)` que retorne un diccionario asociando a cada letra la cantidad de veces que aparece al principio de una palabra:

    ```
    >>> contar_iniciales('El elefante avanza hacia Asia')
    {'e': 2, 'h': 1, 'a': 2}
    >>> contar_iniciales('Varias vacas vuelan sobre Venezuela')
    {'s': 1', 'v': 4}
    ```


4. Escriba la funci√≥n `obtener_largo_palabras(oracion)` que retorne un diccionario asociando a cada palabra su cantidad de letras:

    ```
    >>> obtener_largo_palabras('el gato y el pato son amigos')
    {'el': 2, 'son': 3, 'gato': 4, 'y': 1, 'amigos': 6, 'pato': 4}
    ```


5. Escriba la funci√≥n `contar_palabras(oracion)` que retorne un diccionario asociando a cada palabra la cantidad de veces que aparece en la oraci√≥n:

    ```
    >>> contar_palabras('El sobre esta sobre el pupitre')
    {'sobre': 2, 'pupitre': 1, 'el': 2, 'esta': 1}
    ```

6. Escriba la funci√≥n `palabras_repetidas(oracion)` que retorne una lista con las palabras que est√°n repetidas:

    ```
    >>> palabras_repetidas('El partido termino cero a cero')
    ['cero']
    >>> palabras_repetidas('El sobre esta sobre el mueble')
    ['el', 'sobre']
    >>> palabras_repetidas('Ay, ahi no hay pan')
    []
    ```

```{pyodide-python}
# Funci√≥n contar_letras:

def contar_letras(oracion):
    oracion = oracion.lower()
    letras = [letra for letra in oracion if letra.isalpha()]
    contador = {}
    for letra in letras:
        if letra in contador:
            contador[letra] += 1
        else:
            contador[letra] = 1
    return contador
```

```{pyodide-python}
# Ejemplo de uso
oracion = 'El elefante avanza hacia Asia'
resultado = contar_letras(oracion)
print(resultado)
```

```{pyodide-python}
# Funci√≥n contar_vocales:
def contar_vocales(oracion):
    oracion = oracion.lower()
    vocales = 'aeiou'
    contador = {vocal: 0 for vocal in vocales}
    for letra in oracion:
        if letra in contador:
            contador[letra] += 1
    return contador
```

```{pyodide-python}
# Ejemplo de uso
oracion = 'El elefante avanza hacia Asia'
resultado = contar_vocales(oracion)
print(resultado)
```

```{pyodide-python}
# Funci√≥n contar_iniciales:
def contar_iniciales(oracion):
    oracion = oracion.lower()
    palabras = oracion.split()
    contador = {}
    for palabra in palabras:
        if palabra:
            inicial = palabra[0]
            if inicial in contador:
                contador[inicial] += 1
            else:
                contador[inicial] = 1
    return contador
```

```{pyodide-python}
# Ejemplo de uso
oracion = 'El elefante avanza hacia Asia'
resultado = contar_iniciales(oracion)
print(resultado)
```

```{pyodide-python}
# Funci√≥n obtener_largo_palabras:
def obtener_largo_palabras(oracion):
    palabras = oracion.split()
    contador = {}
    for palabra in palabras:
        contador[palabra] = len(palabra)
    return contador
```

```{pyodide-python}
# Ejemplo de uso
oracion = 'el gato y el pato son amigos'
resultado = obtener_largo_palabras(oracion)
print(resultado)
```

```{pyodide-python}
# Funci√≥n contar_palabras:
def contar_palabras(oracion):
    oracion = oracion.lower()
    palabras = oracion.split()
    contador = {}
    for palabra in palabras:
        if palabra in contador:
            contador[palabra] += 1
        else:
            contador[palabra] = 1
    return contador
```

```{pyodide-python}
# Ejemplo de uso
oracion = 'El sobre esta sobre el pupitre'
resultado = contar_palabras(oracion)
print(resultado)
```

```{pyodide-python}
# Funci√≥n palabras_repetidas:
def palabras_repetidas(oracion):
    oracion = oracion.lower()
    palabras = oracion.split()
    contador = {}
    repetidas = []
    for palabra in palabras:
        if palabra in contador:
            contador[palabra] += 1
        else:
            contador[palabra] = 1
    for palabra, cantidad in contador.items():
        if cantidad > 1:
            repetidas.append(palabra)
    return repetidas
```

```{pyodide-python}
# Ejemplo de uso
oracion = 'El sobre esta sobre el mueble'
resultado = palabras_repetidas(oracion)
print(resultado)
```