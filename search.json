[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üêç Python Intro",
    "section": "",
    "text": "1 üè† Home",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>üè† Home</span>"
    ]
  },
  {
    "objectID": "index.html#bienvenidos-al-curso",
    "href": "index.html#bienvenidos-al-curso",
    "title": "üêç Python Intro",
    "section": "1.1 üéâ ¬°Bienvenidos al Curso!",
    "text": "1.1 üéâ ¬°Bienvenidos al Curso!\nEstamos emocionados de comenzar este viaje de aprendizaje juntos. En este curso, no solo aprender√°s los fundamentos de Python, sino que tambi√©n desarrollar√°s habilidades pr√°cticas para resolver problemas y crear programas robustos y eficientes.\nüéØ Objetivos del Curso:\n\nDominar los conceptos b√°sicos de programaci√≥n usando Python.\nFamiliarizarse con las estructuras de datos y c√≥mo manipularlas eficazmente.\nAprender a escribir c√≥digo claro y eficiente utilizando buenas pr√°cticas.\nExplorar la programaci√≥n funcional y c√≥mo puede mejorar la calidad del c√≥digo.\nEstablecer una base s√≥lida para seguir aprendiendo y creciendo en el mundo de la programaci√≥n.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>üè† Home</span>"
    ]
  },
  {
    "objectID": "prefacio/intro.html",
    "href": "prefacio/intro.html",
    "title": "Prefacio",
    "section": "",
    "text": "üíª Sobre Programaci√≥n\nLa programaci√≥n es la base sobre la cual se construyen todas las aplicaciones y sistemas que usamos en nuestra vida diaria. Es el proceso de dise√±ar y construir un conjunto de instrucciones que una computadora puede seguir para realizar una tarea espec√≠fica. A trav√©s de la programaci√≥n, podemos resolver problemas, automatizar procesos y crear soluciones innovadoras que mejoran nuestra eficiencia y productividad. En este apartado, introduciremos los conceptos b√°sicos de la programaci√≥n, sus principios fundamentales y las mejores pr√°cticas para escribir c√≥digo limpio y efectivo.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "prefacio/intro.html#sobre-python",
    "href": "prefacio/intro.html#sobre-python",
    "title": "Prefacio",
    "section": "üêç Sobre Python",
    "text": "üêç Sobre Python\nPython es uno de los lenguajes de programaci√≥n m√°s populares y vers√°tiles en la actualidad. Con una sintaxis sencilla y clara, es ideal tanto para principiantes como para programadores experimentados. Python se utiliza en una amplia variedad de aplicaciones, desde desarrollo web y an√°lisis de datos hasta inteligencia artificial y automatizaci√≥n de tareas. En esta secci√≥n, nos adentraremos en las caracter√≠sticas que hacen de Python una herramienta poderosa y accesible, proporcionando ejemplos pr√°cticos y ejercicios para que puedas empezar a escribir tus propios programas.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "prefacio/01_intro_progra.html",
    "href": "prefacio/01_intro_progra.html",
    "title": "2¬† üíª Sobre Programaci√≥n",
    "section": "",
    "text": "2.1 Introducci√≥n\nSi tuvi√©ramos que resumir el prop√≥sito de la programaci√≥n en una frase, ser√≠a:\nLas computadoras son expertas en llevar a cabo tareas rutinarias. Idealmente, cualquier labor tediosa y repetitiva deber√≠a ser delegada a una computadora, permitiendo as√≠ que los humanos se enfoquen en los problemas verdaderamente interesantes: aquellos que demandan creatividad, pensamiento cr√≠tico y subjetividad.\nLa programaci√≥n es el proceso de traducir un enfoque para resolver problemas en t√©rminos comprensibles para la computadora.\nAdem√°s, la programaci√≥n abarca una amplia gama de lenguajes y paradigmas, cada uno con sus propias caracter√≠sticas y aplicaciones. Desde los cl√°sicos como C y Java hasta los modernos como Python y JavaScript, cada lenguaje tiene sus fortalezas y debilidades, y la elecci√≥n del lenguaje adecuado depende del contexto y los requisitos del proyecto.\nLa programaci√≥n no se limita solo a escribir c√≥digo. Tambi√©n implica planificaci√≥n, dise√±o y depuraci√≥n de software. Los programadores deben comprender los requisitos del usuario, dise√±ar soluciones eficientes y depurar errores para garantizar que el software funcione correctamente.",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üíª Sobre Programaci√≥n</span>"
    ]
  },
  {
    "objectID": "prefacio/01_intro_progra.html#introducci√≥n",
    "href": "prefacio/01_intro_progra.html#introducci√≥n",
    "title": "2¬† üíª Sobre Programaci√≥n",
    "section": "",
    "text": "‚ÄúSe dice que uno no comprende verdaderamente algo hasta que puede explic√°rselo a otro. En realidad, uno no lo entiende completamente hasta que puede explic√°rselo a una computadora.‚Äù ‚Äì Donald Knuth\n\n\n\n‚ÄúAutomatizar tareas para que la computadora las realice por nosotros.",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üíª Sobre Programaci√≥n</span>"
    ]
  },
  {
    "objectID": "prefacio/01_intro_progra.html#algoritmos",
    "href": "prefacio/01_intro_progra.html#algoritmos",
    "title": "2¬† üíª Sobre Programaci√≥n",
    "section": "2.2 Algoritmos",
    "text": "2.2 Algoritmos\n\n\n\n\n‚ÄúLa inform√°tica se trata de computadores tanto como la astronom√≠a se trata de telescopios.‚Äù ‚Äì Edsger Dijkstra\n\nAl dise√±ar un programa, el desaf√≠o principal es crear y describir un procedimiento que est√© completamente bien definido, sin ambig√ºedades, y que efectivamente resuelva el problema.\nPor tanto, la programaci√≥n no se centra tanto en los computadores como en resolver problemas de manera estructurada. Su objeto de estudio principal son los algoritmos.\nUn algoritmo es un procedimiento bien definido para resolver un problema. Todos utilizamos algoritmos a diario, incluso sin darnos cuenta:\na) Receta de cocina\nUna receta de cocina es un ejemplo de algoritmo; aunque algunos pasos puedan parecer ambiguos (¬øcu√°nto es ¬´una pizca de sal¬ª? ¬øqu√© significa ¬´agregar a gusto¬ª?), en general las instrucciones est√°n lo suficientemente bien definidas para seguirlas sin problemas.\nLa entrada de una receta son los ingredientes y ciertos datos como: ¬øpara cu√°ntas personas se est√° cocinando? El proceso es la serie de pasos para manipular los ingredientes. La salida es el plato terminado.\nEn principio, si una receta est√° suficientemente bien explicada, cualquiera podr√≠a preparar el plato incluso sin conocimientos previos de cocina.\nb) M√©todo de multiplicaci√≥n\nEl m√©todo para multiplicar n√∫meros a mano que aprendemos en la escuela es otro ejemplo de algoritmo. Siguiendo paso a paso el procedimiento, siempre obtendremos el producto.\nLa entrada del algoritmo de multiplicaci√≥n son los dos factores. El proceso consiste en una secuencia de pasos donde los d√≠gitos se multiplican, las reservas se suman, y los productos intermedios se suman finalmente. La salida del algoritmo es el producto obtenido.\n\n2.2.1 Componentes de un algoritmo\nConceptualmente, un algoritmo consta de tres elementos principales:\n\nEntrada: Representa los datos iniciales o inputs que el algoritmo utilizar√° para llevar a cabo su tarea.\nProceso: Consiste en la serie de pasos l√≥gicos y operaciones que el algoritmo realiza utilizando la entrada para producir un resultado.\nSalida: Es el resultado final o output que proporciona el algoritmo despu√©s de ejecutar el proceso.\n\nEl proceso se describe mediante una secuencia ordenada de instrucciones. Adem√°s, puede incluir estructuras como ciclos, que repiten un conjunto de instrucciones un n√∫mero determinado de veces, y condicionales, que determinan qu√© conjunto de instrucciones se ejecutar√°n seg√∫n ciertas condiciones.\n\n\n2.2.2 C√≥mo describir un algoritmo\nConsideremos un ejemplo sencillo: un algoritmo para resolver ecuaciones cuadr√°ticas.\nUna ecuaci√≥n cuadr√°tica es una ecuaci√≥n de la forma \\(ax^2+bx+c=0\\), donde \\(a, b\\) y \\(c\\) son datos dados, con \\(a\\neq0\\), y \\(x\\) es la inc√≥gnita cuyo valor que se desea determinar.\nPor ejemplo, \\(2x^2‚àí5x+2=0\\) es una ecuaci√≥n cuadr√°tica con \\(a=2\\), \\(b=‚àí5\\) y \\(c=2\\). Sus soluciones son \\(x_1=1/2\\) y \\(x_2=2\\), como se puede comprobar f√°cilmente al reemplazar estos valores en la ecuaci√≥n. El problema es c√≥mo obtener estos valores en primer lugar.\nEl problema computacional de resolver una ecuaci√≥n cuadr√°tica puede ser planteado as√≠:\n\nDados \\(a, b\\) y \\(c\\), entontrar los valores reales de \\(x\\) que satisfacen \\(ax^2+bx+c=0\\).\n\nLa entrada del algoritmo, pues, son los valores \\(a, b\\) y \\(c\\), y la salida son las ra√≠ces reales \\(x\\) (que pueden ser cero, una o dos) de la ecuaci√≥n. En un programa computacional, los valores de \\(a, b\\) y \\(c\\) deber√≠an ser ingresados usando el teclado, y las soluciones \\(x\\) deber√≠an ser mostradas a continuaci√≥n en la pantalla.\nAl estudiar √°lgebra aprendemos un algoritmo para resolver este problema. Es lo suficientemente detallado para que pueda usarlo cualquier persona, incluso sin saber qu√© es una ecuaci√≥n cuadr√°tica, o para que lo pueda hacer un computador. A continuaci√≥n veremos algunas maneras de describir el procedimiento.\nLenguaje natural\nDurante el proceso mental de dise√±ar un algoritmo, es com√∫n pensar y describir los pasos en la misma manera en que hablamos a diario. Por ejemplo:\n\nTeniendo los valores de \\(a, b\\) y \\(c\\), calcular el discriminante \\(D=b^2‚àí4ac\\). Si es discriminante es negativo, entonces la ecuaci√≥n no tiene soluciones reales. Si es discriminante es igual a cero, entonces la ecuaci√≥n tiene una √∫nica soluci√≥n real, que es \\(x=‚àíb/2a\\). Si el discriminante es positivo, entonces la ecuaci√≥n tiene dos soluciones reales, que son \\(x_1=(‚àíb‚àí\\sqrt{D})/2a\\) y \\(x_2=(‚àíb+\\sqrt{D})/2a\\).\n\nEsta manera de expresar un algoritmo no es ideal, ya que el lenguaje natural es:\n\nimpreciso: puede tener ambig√ºedades;\nno universal: personas distintas describir√°n el proceso de maneras distintas; y\nno estructurado: la descripci√≥n no est√° expresada en funci√≥n de componentes simples.\n\nA√∫n as√≠, es posible identificar los pasos del algoritmo. Por ejemplo, hay que evaluar la expresi√≥n \\(b^2‚àí4ac\\), y ponerle el nombre \\(D\\) a su resultado. Esto se llama asignaci√≥n, y es un tipo de instrucci√≥n que aparece en casi todos los algoritmos. Despu√©s de eso, el algoritmo puede usar el nombre \\(D\\) para referirse al valor calculado.\nDiagrama de flujo Un diagrama de flujo es una representaci√≥n gr√°fica de un algoritmo. Los pasos son representados por varios tipos de bloques, y el flujo de ejecuci√≥n es indicado por flechas que conectan los bloques:\n\n\n\nEl inicio y el final del algoritmo son representados con bloques circulares. El algoritmo siempre debe ser capaz llegar desde uno hasta el otro, sin importar por qu√© camino lo hace. Un algoritmo no puede ¬´quedarse pegado¬ª en la mitad.\nLa entrada y la salida de datos son representadas con romboides, que en la figura de arriba est√°n pintados de verde.\nLos diamantes representan condiciones en las que el algoritmo sigue uno de dos caminos. que est√°n etiquetados con s√≠ o no, dependiendo si la condici√≥n es verdadera o falsa.\nTambi√©n puede haber ciclos, representados por flechas que regresan a bloques anteriores. En este ejemplo, no hay ciclos.\nOtras sentencias van dentro de rect√°ngulos, que en la figura est√°n pintados de azul. En este ejemplo, las sentencias son asignaciones, representadas en la forma nombre = valor.\nLos diagramas de flujo no son usados en la pr√°ctica para programar, pero son √∫tiles para ilustrar c√≥mo funcionan algoritmos sencillos.\nPseudoc√≥digo\nEl pseudoc√≥digo es una descripci√≥n estructurada de un algoritmo basada en ciertas convenciones notacionales. Si bien es muy parecido al c√≥digo que finalmente se escribir√° en el computador, el pseudoc√≥digo est√° pensado para ser le√≠do por humanos.\nUna manera de escribir el algoritmo para la ecuaci√≥n cuadr√°tica en pseudoc√≥digo es la siguiente:\nleer a\nleer b\nleer c\n\ndiscriminante = b¬≤ - 4ac\n\nsi discriminante &lt; 0:\n    escribir 'La ecuaci√≥n no tiene soluciones reales'\n\no si no, si discriminante = 0:\n    x = -b / 2a\n    escribir 'La soluci√≥n √∫nica es', x\n\no si no:\n    x1 = (-b - ‚àödiscriminante) / 2a\n    x2 = (-b + ‚àödiscriminante) / 2a\n    escribir 'Las dos soluciones reales son:'\n    escribir x1\n    escribir x2\nLas l√≠neas que comienzan con leer y escribir denotan, respectivamente, la entrada y la salida del programa. Los diferentes casos son representados usando sentencias si y o si no. Las asignaciones siguen la misma notaci√≥n que en el caso de los diagramas de flujo.\nLa notaci√≥n de pseudoc√≥digo es bien liberal. Uno puede mezclar notaci√≥n de matem√°ticas con frases en espa√±ol, siempre que quede absolutamente claro para el lector qu√© representa cada una de las l√≠neas del algoritmo.\nC√≥digo\nEl producto final de la programaci√≥n siempre debe ser c√≥digo que pueda ser ejecutado en el computador. Esto requiere describir los algoritmos en un lenguaje de programaci√≥n. Los lenguajes de programaci√≥n definen un conjunto limitado de conceptos b√°sicos, en funci√≥n de los cuales uno puede expresar cualquier algoritmo.\nEn esta asignatura, usaremos el lenguaje de programaci√≥n Python para escribir nuestros programas.\nEl c√≥digo en Python para resolver la ecuaci√≥n cuadr√°tica es el siguiente:\na = float(raw_input('Ingrese a: '))\nb = float(raw_input('Ingrese b: '))\nc = float(raw_input('Ingrese c: '))\n\ndiscriminante = b ** 2 - 4 * a * c\nif discriminante &lt; 0:\n    print 'La ecuacion no tiene soluciones reales'\nelif discriminante == 0:\n    x = -b / (2 * a)\n    print 'La solucion unica es x =', x\nelse:\n    x1 = (-b - (discriminante ** 0.5)) / (2 * a)\n    x2 = (-b + (discriminante ** 0.5)) / (2 * a)\n    print 'Las dos soluciones reales son:'\n    print 'x1 =', x1\n    print 'x2 =', x2\n\nraw_input()\nA partir de ahora, usted aprender√° a entender, escribir y ejecutar c√≥digos como √©ste.",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üíª Sobre Programaci√≥n</span>"
    ]
  },
  {
    "objectID": "prefacio/01_intro_progra.html#referencias",
    "href": "prefacio/01_intro_progra.html#referencias",
    "title": "2¬† üíª Sobre Programaci√≥n",
    "section": "2.3 Referencias",
    "text": "2.3 Referencias\n\nProgramaci√≥n - USM",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üíª Sobre Programaci√≥n</span>"
    ]
  },
  {
    "objectID": "prefacio/02_intro_python.html",
    "href": "prefacio/02_intro_python.html",
    "title": "3¬† üêç Sobre Python",
    "section": "",
    "text": "3.1 Popularidad\nPython es uno de los lenguajes de programaci√≥n m√°s populares y ampliamente utilizados en la actualidad. Seg√∫n los √≠ndices de popularidad de lenguajes de programaci√≥n, Python ha estado en constante aumento en popularidad en los √∫ltimos a√±os.\nEl √≠ndice TIOBE, que mide la popularidad de los lenguajes de programaci√≥n seg√∫n la frecuencia con la que se buscan en los motores de b√∫squeda, ha situado a Python entre los tres lenguajes de programaci√≥n m√°s populares en los √∫ltimos a√±os, despu√©s de Java y C.\nAdem√°s, seg√∫n la encuesta anual Stack Overflow Developer Survey 2023, Python se ubic√≥ entre los cinco lenguajes de programaci√≥n m√°s populares. Este lenguaje tambi√©n ha ganado una notable popularidad en campos como la ciencia de datos y el aprendizaje autom√°tico, consolid√°ndose como una herramienta indispensable para profesionales y entusiastas de estas √°reas.",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>üêç Sobre Python</span>"
    ]
  },
  {
    "objectID": "prefacio/02_intro_python.html#popularidad",
    "href": "prefacio/02_intro_python.html#popularidad",
    "title": "3¬† üêç Sobre Python",
    "section": "",
    "text": "3.1.1 ¬øEs buena la popularidad de Python?\nS√≠, la popularidad de Python es una se√±al de su relevancia en el mundo de la programaci√≥n y puede tener varias ventajas para los usuarios y la comunidad en general.\nEn primer lugar, una mayor popularidad significa que hay una amplia comunidad de desarrolladores y usuarios de Python en todo el mundo, lo que hace que sea m√°s f√°cil encontrar recursos, soporte y ayuda en l√≠nea. Adem√°s, una gran comunidad de usuarios tambi√©n implica que hay una gran cantidad de bibliotecas y m√≥dulos disponibles, lo que permite a los usuarios aprovechar el c√≥digo existente y acelerar el desarrollo.\nEn segundo lugar, la popularidad de Python lo convierte en una habilidad valiosa en el mercado laboral, con una amplia gama de oportunidades de carrera en diferentes sectores, incluyendo la ciencia de datos, la inteligencia artificial, el desarrollo web, la automatizaci√≥n y la programaci√≥n de sistemas.\nPor √∫ltimo, la popularidad de Python tambi√©n puede significar que hay una gran inversi√≥n en su desarrollo y mejora continua, lo que resulta en una mayor calidad y eficiencia del lenguaje de programaci√≥n.\nEn general, la popularidad de Python es una buena se√±al y es una de las razones por las que se ha convertido en un lenguaje de programaci√≥n tan popular y utilizado en todo el mundo.",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>üêç Sobre Python</span>"
    ]
  },
  {
    "objectID": "prefacio/02_intro_python.html#librer√≠as-y-frameworks",
    "href": "prefacio/02_intro_python.html#librer√≠as-y-frameworks",
    "title": "3¬† üêç Sobre Python",
    "section": "3.2 Librer√≠as y frameworks",
    "text": "3.2 Librer√≠as y frameworks\n\n\n\nUna gran ventaja de Python es la amplia selecci√≥n de librer√≠as y frameworks que ofrece.\nHay librer√≠as para distintos t√≥picos:\n\nManipulaci√≥n de datos\nVisualizaci√≥n de datos\nAprendizaje autom√°tico\nCiencia de los datos\nProcesamiento natural del lenguaje\nBig Data\n\nLo mismo es cierto para los frameworks, que ayudan a despegar su proyecto y le ahorran tiempo y esfuerzo. Hay una variedad de marcos para elegir, dependiendo de sus necesidades, por ejemplo, para el desarrollo web tenemos:\n\nDjango: Es un framework de Python que se utiliza para el desarrollo de aplicaciones web. Ofrece una arquitectura de modelo-vista-controlador (MVC) y herramientas para la administraci√≥n de bases de datos, la autenticaci√≥n y la seguridad.\nFlask: Es un framework de Python que se utiliza para el desarrollo de aplicaciones web de menor escala y m√°s simples. Ofrece una amplia gama de herramientas y extensiones para la creaci√≥n de aplicaciones web.",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>üêç Sobre Python</span>"
    ]
  },
  {
    "objectID": "prefacio/02_intro_python.html#performance",
    "href": "prefacio/02_intro_python.html#performance",
    "title": "3¬† üêç Sobre Python",
    "section": "3.3 Performance",
    "text": "3.3 Performance\nPython es un lenguaje de programaci√≥n interpretado de alto nivel, lo que significa que su rendimiento puede ser m√°s lento que otros lenguajes de programaci√≥n de menor nivel, como C o C++. Sin embargo, Python ofrece varias t√©cnicas y herramientas para mejorar el rendimiento y la eficiencia de sus programas. Aqu√≠ hay algunas de ellas:\n\nCompilaci√≥n JIT: Python ofrece la opci√≥n de utilizar un compilador Just-In-Time (JIT), como PyPy, que puede mejorar significativamente el rendimiento de los programas al compilar el c√≥digo en tiempo de ejecuci√≥n.\nCPython: Python tambi√©n se puede ejecutar en una implementaci√≥n de C llamada CPython, lo que puede mejorar el rendimiento de algunos programas.\nUso de bibliotecas nativas: Python ofrece la capacidad de usar bibliotecas nativas, como NumPy, que est√°n escritas en lenguajes de bajo nivel como C y Fortran para realizar operaciones num√©ricas de manera m√°s eficiente.\nUso de estructuras de datos eficientes: Python ofrece varias estructuras de datos, como las listas y los diccionarios, que se pueden usar de manera eficiente para mejorar el rendimiento de los programas.\nUso de algoritmos eficientes: El uso de algoritmos eficientes tambi√©n puede mejorar significativamente el rendimiento de los programas en Python.\n\nEn general, Python puede ofrecer un buen rendimiento en comparaci√≥n con otros lenguajes de programaci√≥n interpretados, y hay varias t√©cnicas y herramientas disponibles para mejorar a√∫n m√°s su rendimiento y eficiencia. Sin embargo, es importante recordar que el rendimiento depender√° en gran medida del uso que se le d√© al lenguaje y de c√≥mo se escriban los programas.",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>üêç Sobre Python</span>"
    ]
  },
  {
    "objectID": "prefacio/02_intro_python.html#referencia",
    "href": "prefacio/02_intro_python.html#referencia",
    "title": "3¬† üêç Sobre Python",
    "section": "3.4 Referencia",
    "text": "3.4 Referencia\n\nTutorial de Python 3.8 documentation",
    "crumbs": [
      "Prefacio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>üêç Sobre Python</span>"
    ]
  },
  {
    "objectID": "contenidos/intro.html",
    "href": "contenidos/intro.html",
    "title": "Contenidos",
    "section": "",
    "text": "Nomenclatura: Aprende las reglas para nombrar variables, funciones y m√°s en Python.\nControl de Flujo: Dirige el flujo de programas con decisiones y bucles.\nEstructura de Datos: Organiza y manipula datos con listas, tuplas, conjuntos y diccionarios.\nFunciones y M√≥dulos: Encapsula l√≥gica y organiza c√≥digo con funciones y m√≥dulos.\nProgramaci√≥n Funcional: Explora un c√≥digo m√°s elegante con programaci√≥n funcional.\nExcepciones: Maneja errores para robustecer tus programas.\nBuenas Pr√°cticas: Escribe c√≥digo limpio y sigue las mejores pr√°cticas de desarrollo.",
    "crumbs": [
      "Contenidos"
    ]
  },
  {
    "objectID": "contenidos/03_nomenclatura.html",
    "href": "contenidos/03_nomenclatura.html",
    "title": "4¬† üìö Nomenclatura",
    "section": "",
    "text": "4.1 Sintaxis",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>üìö Nomenclatura</span>"
    ]
  },
  {
    "objectID": "contenidos/03_nomenclatura.html#sintaxis",
    "href": "contenidos/03_nomenclatura.html#sintaxis",
    "title": "4¬† üìö Nomenclatura",
    "section": "",
    "text": "4.1.1 Hola mundo!\nEscribamos nuestro primer programa de Python, ‚Äú¬°Hola, mundo!‚Äù. Es un programa simple que imprime Hello World! en el dispositivo de salida est√°ndar (pantalla). Para eso se ocupa el comando print().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.1.2 Variables\nUna variable es una ubicaci√≥n con nombre utilizada para almacenar datos en la memoria. Una asignaci√≥n es una sentencia que asocia un nombre al resultado de una expresi√≥n.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.1.3 Imprimir mensajes y variables\nLa formula para imprimir mensajes y variables es:\nprint(\"mensaje_01\",variable_01,\"mensaje_02\",variable_02,...)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExisten varias formas de imprimir variables y strings, sin embargo, la que m√°s se destaca es la forma Literal String Interpolation (o tambi√©n conocido como f-string). La formula es la siguiente:\nprint(f\"mensaje_01 {variable_01} mensaje_02 {variable_02} ...\")\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObservaci√≥n: Se tratara de trabajar siempre con la forma f-string para ser consistente.\n\n\n\n4.1.4 Inputs por el usuario\nEn Python, puede usar la funci√≥n input() para tomar la entrada del usuario. Por ejemplo:\n# inputs por el usuario\ninputString = input('Escriba una oracion:')\nprint(f'Su oracion es: {inputString}')",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>üìö Nomenclatura</span>"
    ]
  },
  {
    "objectID": "contenidos/03_nomenclatura.html#tipos-de-datos",
    "href": "contenidos/03_nomenclatura.html#tipos-de-datos",
    "title": "4¬† üìö Nomenclatura",
    "section": "4.2 Tipos de datos",
    "text": "4.2 Tipos de datos\n\n4.2.1 Enteros, flotantes y n√∫meros complejos\nPython admite enteros, n√∫meros de coma flotante y n√∫meros complejos. Se definen como int, float y complex en Python.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.2.2 Valores l√≥gicos\nLos valores l√≥gicos True y False (verdadero y falso) son de tipo bool, que representa valores l√≥gicos.\nEl nombre bool viene del matem√°tico George Boole, quien cre√≥ un sistema algebraico para la l√≥gica binaria. Por lo mismo, a True y False tambi√©n se les llama valores booleanos. El nombre no es muy intuitivo, pero es el que se usa en inform√°tica, as√≠ que hay que conocerlo.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.2.3 Texto\nA los valores que representan texto se les llama strings, y tienen el tipo str.\nLos strings literales pueden ser representados con texto entre comillas simples o comillas dobles:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.2.4 Nulo\nExiste un valor llamado None (en ingl√©s, ¬´ninguno¬ª) que es utilizado para representar casos en que ning√∫n valor es v√°lido, o para indicar que una variable todav√≠a no tiene un valor que tenga sentido.\nEl valor None tiene su propio tipo, llamado NoneType, que es diferente al de todos los dem√°s valores.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.2.5 Conversi√≥n de tipo\nEl proceso de convertir el valor de un tipo de datos (entero, cadena, flotante, etc.) en otro se llama conversi√≥n de tipo. Python tiene dos tipos de conversi√≥n de tipos.\na) Impl√≠cita\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nb) Expl√≠cito\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nObservaci√≥n: el proceso de transformar string a numeric es correcto cuando lo que est√° escrito en el string es un n√∫mero, en caso contrario, nos dar√° error.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>üìö Nomenclatura</span>"
    ]
  },
  {
    "objectID": "contenidos/03_nomenclatura.html#operaciones",
    "href": "contenidos/03_nomenclatura.html#operaciones",
    "title": "4¬† üìö Nomenclatura",
    "section": "4.3 Operaciones",
    "text": "4.3 Operaciones\n\n4.3.1 Operadores aritm√©ticos\nLos operadores son s√≠mbolos especiales que realizan operaciones en operandos (variables y valores). Hablemos de operadores aritm√©ticos y de asignaci√≥n en esta parte.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.2 Otros operadores ar√≠tmeticos\nPotencia\nLa funci√≥n potencia de un n√∫mero entero corresponde a multiplicar \\(n\\) veces el mismo n√∫mero. Por ejemplo\n\\[4^3 = 4*4*4 = 64\\]\nCuando el exponente es fracionario, hablamos de ra√≠ces. Por ejemplo:\n\\[4^{1/2} = \\sqrt{4} = 2\\]\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nM√≥dulo\nCuando dividimos dos enteros, tenemos una ecuaci√≥n que se ve como lo siguiente: \\[\\dfrac{A}{B} = Q \\text{ residuo } R,\\] donde: * \\(A\\) es el dividendo * \\(B\\) es el divisor * \\(Q\\) es el cociente * \\(R\\) es el residuo\nA veces, solo estamos interesados en cu√°nto es el residuo cuando dividimos \\(A\\) entre \\(B\\). Para estos casos hay un operador llamado el operador m√≥dulo (abreviado como mod).\nAl usar los mismos \\(A\\), \\(B\\), \\(Q\\) y \\(R\\) que arriba, tendr√≠amos: \\(A \\text{ mod } B = R\\) (notaci√≥n). Por ejemplo:\n\\[\\dfrac{13}{4} = 3 \\text{ residuo } 1 \\textrm{, es equivalente a: } 13 \\textrm{ mod } 4 = 1 \\]\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRedondear\nLa funci√≥n incorporada round() toma como argumento un n√∫mero de coma flotante y retorna un n√∫mero entero seg√∫n las reglas del redondeo.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.3 Operadores de asignaci√≥n\nLos operadores de asignaci√≥n se utilizan para asignar valores a las variables. Probemos algunos operadores de asignaci√≥n m√°s comunes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.4 Operadores relacionales\nLos operadores relacionales sirven para comparar valores. Sus operandos son cualquier cosa que pueda ser comparada, y sus resultados siempre son valores l√≥gicos.\nOperadores relacionales (num√©ricos)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperadores relacionales ( string )\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.5 Operaciones Binarias\nUna tabla de verdad, o tabla de valores de verdades, es una tabla que muestra el valor de verdad de una proposici√≥n compuesta, para cada combinaci√≥n de verdad que se pueda asignar.\n\n\n\np\nq\np ‚àß q\np v q\n¬¨p\n¬¨q\n\n\n\n\nT\nT\nT\nT\nF\nF\n\n\nT\nF\nF\nT\nF\nT\n\n\nF\nT\nF\nT\nT\nF\n\n\nF\nF\nF\nF\nT\nT\n\n\n\nEn Python, hay tres operaciones l√≥gicas:\n\nla conjunci√≥n l√≥gica and (en espa√±ol: y)\nla disyunci√≥n l√≥gica or (en espa√±ol: o)\nla negaci√≥n l√≥gica not (en espa√±ol: no)\n\n\n\n\np\nq\np and q\np or q\nnot p\nnot q\n\n\n\n\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\n\n\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\n\n\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.6 Operadores de String\nLos operadores de string sirven para poder operar variables tipo str.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.7 M√°s operadores de String\nExiste algunas m√©todos aplicable a los strings:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIndexaciones\nCada uno de los caracteres de un string (incluidos los espacios) tiene asignado un √≠ndice. Este indice nos permite seleccionar su car√°cter asociado haciendo referencia a √©l entre corchetes ([]) en el nombre de la variable que almacena la cadena.\n \n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOtra operaci√≥n que podemos realizar a una cadena es seleccionar solamente una parte de ella. Para ello se usa la notaci√≥n [inicio:fin:paso] tambi√©n en el nombre de la variable que almacena la cadena, donde:\n\nInicio: es el √≠ndice del primer car√°cter de la porci√≥n de la cadena que queremos seleccionar.\nFin: es el √≠ndice del √∫ltimo car√°cter no incluido de la porci√≥n de la cadena que queremos seleccionar.\nPaso: indica cada cuantos caracteres seleccionamos entre las posiciones de inicio y fin.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nObservaci√≥n: Para imprimir el largo de un texto, puede usar el comando len.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>üìö Nomenclatura</span>"
    ]
  },
  {
    "objectID": "contenidos/03_nomenclatura.html#ejercicios",
    "href": "contenidos/03_nomenclatura.html#ejercicios",
    "title": "4¬† üìö Nomenclatura",
    "section": "4.4 Ejercicios",
    "text": "4.4 Ejercicios\nEjercicio 01\nEscriba un programa que pida al usuario que escriba su nombre, y lo salude llam√°ndolo por su nombre.\nIngrese su nombre: Perico\nHola, Perico\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nEscriba un programa que reciba como entrada el radio de un c√≠rculo y entregue como salida su per√≠metro y su √°rea:\nIngrese el radio: 5\nPerimetro: 31.4\n√Årea: 78.5\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nEscriba un programa que calcule el promedio de 4 notas ingresadas por el usuario:\nPrimera nota: 55\nSegunda nota: 71\nTercera nota: 46\nCuarta nota: 87\nEl promedio es: 64.75\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nEscriba un programa que convierta de cent√≠metros a pulgadas. Una pulgada es igual a 2.54 cent√≠metros.\nIngrese longitud: 45\n45 cm = 17.7165 in\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 05\nEscriba un programa que reciba como entrada las longitudes de los dos catetos \\(a\\) y \\(b\\) de un tri√°ngulo rect√°ngulo, y que entregue como salida el largo de la hipotenusa \\(c\\) del triangulo, dado por el teorema de Pit√°goras: \\(c^2=a^2+b^2\\).\nIngrese cateto a: 7\nIngrese cateto b: 5\nLa hipotenusa es 8.6023252670426267\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 06\nEscriba un programa que pregunte al usuario la hora actual \\(t\\) del reloj y un n√∫mero entero de horas \\(h\\), que indique qu√© hora marcar√° el reloj dentro de \\(h\\) horas:\nHora actual: 3\nCantidad de horas: 5\nEn 5 horas, el reloj marcara las 8\nHora actual: 21\nCantidad de horas: 8\nEn 5 horas, el reloj marcara las 5\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 07\nUn alumno desea saber que nota necesita en el tercer certamen para aprobar un ramo.\nEl promedio del ramo se calcula con la siguiente formula.\n\\[N_C=(C_1+C_2+C_3)/3 \\\\ N_F=N_C‚ãÖ0.7+N_L‚ãÖ0.3\\]\nDonde \\(N_C\\) es el promedio de cert√°menes, \\(N_L\\) el promedio de laboratorio y \\(N_F\\) la nota final.\nEscriba un programa que pregunte al usuario las notas de los dos primeros certamen y la nota de laboratorio, y muestre la nota que necesita el alumno para aprobar el ramo con nota final 60.\nIngrese nota certamen 1: 45\nIngrese nota certamen 2: 55\nIngrese nota laboratorio: 65\nNecesita nota 74 en el certamen 3\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 08\nRealice un programa que calcule el √°rea de un tri√°ngulo a partir de las longitudes de sus lados.\nPara calcularlo puede utilizar la f√≥rmula de Her√≥n:\n\\[\n    A = \\sqrt{s\\,(s-a)(s-b)(s-c)},\n\\] donde \\(a\\), \\(b\\) y \\(c\\) son las longitudes de cada lado y \\(s=\\dfrac{a+b+c}{2}\\) es el semiper√≠metro.\nIngrese longitud de lado 1: 3\nIngrese longitud de lado 2: 4\nIngrese longitud de lado 3: 5\nEl √°rea del tri√°ngulo es 6.0\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>üìö Nomenclatura</span>"
    ]
  },
  {
    "objectID": "contenidos/04_control_flujo.html",
    "href": "contenidos/04_control_flujo.html",
    "title": "5¬† üîÑ Control de Flujo",
    "section": "",
    "text": "5.1 Condicional if-elif-else",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>üîÑ Control de Flujo</span>"
    ]
  },
  {
    "objectID": "contenidos/04_control_flujo.html#condicional-if-elif-else",
    "href": "contenidos/04_control_flujo.html#condicional-if-elif-else",
    "title": "5¬† üîÑ Control de Flujo",
    "section": "",
    "text": "5.1.1 Condicional if\nLa sentencia if (¬´si¬ª) ejecuta las instrucciones s√≥lo si se cumple una condici√≥n. Si la condici√≥n es falsa, no se hace nada:\nLa sintaxis es la siguiente:\n\nif condici√≥n:\n    sentencias\nEjemplos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.1.2 Condicional if-else\nLa sentencia if-else (¬´si-o-si-no¬ª) decide qu√© instrucciones ejecutar dependiendo si una condici√≥n es verdadera o falsa:\n\nif condici√≥n:\n    qu√© hacer cuando la condici√≥n es verdadera\nelse\n    qu√© hacer cuando la condici√≥n es falsa\nejemplo 01\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nejemplo 02\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.1.3 Condicional if-elif-else\nLa sentencia if-elif-else depende de dos o m√°s condiciones, que son evaluadas en orden. La primera que es verdadera determina qu√© instrucciones ser√°n ejecutadas:\n\nLa sintaxis es la siguiente:\nif condici√≥n1:\n    qu√© hacer si condici√≥n1 es verdadera\nelif condici√≥n2:\n    qu√© hacer si condici√≥n2 es verdadera\n...\nelse:\n    qu√© hacer cuando ninguna de las\n    condiciones anteriores es verdadera\nExisten tres formas de ocupar esta condicional.\n\nEstructura if: La estructura if se utiliza para tomar decisiones en funci√≥n de una condici√≥n. Si la condici√≥n es verdadera, el bloque de c√≥digo dentro del if se ejecutar√°.\nEstructura if-else: La estructura if-else se utiliza para tomar decisiones y ejecutar un bloque de c√≥digo si la condici√≥n es verdadera y otro bloque de c√≥digo si la condici√≥n es falsa.\nEstructura if-elif-else: La estructura if-elif-else se utiliza para tomar decisiones y ejecutar diferentes bloques de c√≥digo seg√∫n diferentes condiciones. Se eval√∫an las condiciones en orden, y si alguna es verdadera, se ejecutar√° el bloque de c√≥digo correspondiente. Si ninguna de las condiciones es verdadera, se ejecutar√° el bloque de c√≥digo en la cl√°usula else.\n\nEs decir, puede no existir o pueden existir varios elif. Por otro lado, el else es opcional dependiendo del caso.\nejemplo 01\nEscriba un programa que califique el rendimiento del alumno en una asignatura seg√∫n la nota obtenida.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nejemplo 02\nConsiderar la siguiente tabla que muestra la tasa de impuesto a pagar por una persona seg√∫n su sueldo.\n\n\n\nSueldo\nTasa de impuesto\n\n\n\n\nmenos de 1000\n0%\n\n\n1000 ‚â§ sueldo &lt; 2000\n5%\n\n\n2000 ‚â§ sueldo &lt; 4000\n10%\n\n\n4000 o m√°s\n12%\n\n\n\nUn ejemplo de como se calcula el impuesto ser√≠a el siguiente:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOtra forma de calcular el impuesto es la siguiente:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¬øEn qu√© se diferencian los dos programas anteriores?\nSoluci√≥n:\n\nDiferencia en la forma de expresar las condiciones: En el primer programa, se utilizan operadores de desigualdad (&lt;) para expresar las condiciones, mientras que en el segundo programa, se utilizan operadores de igualdad (&gt;=) y (&lt;=) para expresar las mismas condiciones.\nDiferencia en el resultado impreso: En el primer programa, se imprime el caso correspondiente (por ejemplo, ‚Äúcaso 1‚Äù, ‚Äúcaso 2‚Äù, etc.) antes de calcular la tasa de impuesto, mientras que en el segundo programa, se calcula la tasa de impuesto sin imprimir el caso correspondiente.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>üîÑ Control de Flujo</span>"
    ]
  },
  {
    "objectID": "contenidos/04_control_flujo.html#while-loop",
    "href": "contenidos/04_control_flujo.html#while-loop",
    "title": "5¬† üîÑ Control de Flujo",
    "section": "5.2 While Loop",
    "text": "5.2 While Loop\nEl ciclo while (¬´mientras¬ª) ejecuta una secuencia de instrucciones mientras una condici√≥n sea verdadera:\nCada una de las veces que el cuerpo del ciclo es ejecutado se llama iteraci√≥n.\nLa condici√≥n es evaluada antes de cada iteraci√≥n. Si la condici√≥n es inicialmente falsa, el ciclo no se ejecutar√° ninguna vez.\n\nLa sintaxis es la siguiente:\nwhile condici√≥n:\n    sentencias\nNotas adicionales:\n\nA una ejecuci√≥n de las instrucciones que componen el ciclo se le llama iteraci√≥n.\nLa condici√≥n de un while es evaluada antes de cada iteraci√≥n.\nPor lo anterior, es posible que un while no ejecute ninguna iteraci√≥n, si la condici√≥n es False al inicio.\n\nPor ejemplo, el siguiente programa multiplica dos n√∫meros enteros sin usar el operador *:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara ver c√≥mo funciona este programa, hagamos un ruteo con la entrada \\(m = 4\\) y \\(n = 7\\):\n\n\n\np\nm\nn\n\n\n\n\n\n4\n\n\n\n\n\n7\n\n\n0\n\n\n\n\n\n3\n\n\n\n7\n\n\n\n\n\n2\n\n\n\n14\n\n\n\n\n\n1\n\n\n\n21\n\n\n\n\n\n0\n\n\n\n28\n\n\n\n\n\nEl proceso funciona de la siguiente manera:\n\nSe inician las variables m con el valor 4, n con el valor 7 y p con el valor 0.\nSe entra en un bucle while con la condici√≥n m &gt; 0, lo que significa que el bucle se ejecutar√° mientras m sea mayor que 0.\nEn cada iteraci√≥n del bucle, el valor de m se reduce en 1 (usando m = m - 1) y el valor de n se suma al valor actual de p (usando p = p + n).\nEl bucle contin√∫a ejecut√°ndose hasta que m sea igual a 0. Cuando m alcanza 0, la condici√≥n m &gt; 0 se vuelve falsa, y el bucle se detiene.\nDespu√©s de que el bucle se detiene, se imprime el resultado, que es el producto acumulado de m y n en la variable p.\n\nLa raz√≥n por la que estamos seguros de que el ciclo terminar√° en alg√∫n momento es que la condici√≥n del bucle while se verifica en cada iteraci√≥n, y m se reduce en 1 en cada iteraci√≥n. Dado que m se inicializa con el valor 4, y en cada iteraci√≥n se reduce en 1, eventualmente alcanzar√° el valor 0 despu√©s de 4 iteraciones, lo que har√° que la condici√≥n m &gt; 0 sea falsa y el ciclo se detendr√°. Por lo tanto, podemos estar seguros de que el ciclo terminar√°.\n\n5.2.1 Ejemplo: acumulaci√≥n con suma\nEscriba un programa que reciba como entrada un n√∫mero entero. El programa debe mostrar el resultado de la suma de los n√∫meros al cuadrado desde el \\(1\\) hasta el valor ingresado. \\[\n1^2+2^2+\\ldots+(n-1)^2+n^2\n\\]\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.2.2 Ejemplo: acumulaci√≥n con multiplicaci√≥n\nEscriba una programa que calcule el factorial de un n√∫mero \\(n\\) ingresada como entrada: \\(10! = 1\\cdot 2 \\cdot 3 ... \\cdot 10\\)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.2.3 Ejemplo: conteo\nEscriba un programa que solicite un n√∫mero entero y calcule cuantos n√∫meros son divisibles por 3 o 5.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>üîÑ Control de Flujo</span>"
    ]
  },
  {
    "objectID": "contenidos/04_control_flujo.html#ciclo-for-con-rango",
    "href": "contenidos/04_control_flujo.html#ciclo-for-con-rango",
    "title": "5¬† üîÑ Control de Flujo",
    "section": "5.3 Ciclo for con rango",
    "text": "5.3 Ciclo for con rango\nEl ciclo for con rango ejecuta una secuencia de sentencias una cantidad fija de veces.\nPara llevar la cuenta, utiliza una variable de control que toma valores distintos en cada iteraci√≥n.\nUna de las sintaxis para usar un for con rango es la siguiente:\nfor variable in range(fin):\n    qu√© hacer para cada valor de la variable de control\nEn la primera iteraci√≥n, la variable de control toma el valor 0. Al final de cada iteraci√≥n, el valor de la variable aumenta autom√°ticamente. El ciclo termina justo antes que la variable tome el valor fin.\nPor ejemplo, el siguiente programa muestra los cubos de los n√∫meros del 0 al 20:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUn rango es una sucesi√≥n de n√∫meros enteros equiespaciados. Incluyendo la presentada m√°s arriba, hay tres maneras de definir un rango:\nrange(final)\nrange(inicial, final)\nrange(inicial, final, incremento)\nEl valor inicial siempre es parte del rango. El valor final nunca es parte del rango. El incremento indica la diferencia entre dos valores consecutivos del rango.\nSi el valor inicial es omitido, se supone que es 0. Si el incremento es omitido, se supone que es 1.\nCon algunos ejemplos quedar√° m√°s claro:\n\n\n\nsentencia\nresultado\n\n\n\n\nrange(9)\n0, 1, 2, 3, 4, 5, 6, 7, 8\n\n\nrange(3, 13)\n3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\n\nrange(3, 13, 2)\n3, 5, 7, 9, 11\n\n\nrange(11, 4)\nning√∫n valor\n\n\nrange(11, 4, -1)\n11, 10, 9, 8, 7, 6, 5\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUsando un incremento negativo, es posible hacer ciclos que van hacia atr√°s:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>üîÑ Control de Flujo</span>"
    ]
  },
  {
    "objectID": "contenidos/04_control_flujo.html#salir-o-continuar-un-ciclo",
    "href": "contenidos/04_control_flujo.html#salir-o-continuar-un-ciclo",
    "title": "5¬† üîÑ Control de Flujo",
    "section": "5.4 Salir o continuar un ciclo",
    "text": "5.4 Salir o continuar un ciclo\n\n5.4.1 Break\nAdem√°s de las condiciones de t√©rmino propias de los ciclos while y for, siempre es posible salir de un ciclo en medio de una iteraci√≥n usando la sentencia break. Lo l√≥gico es que sea usada dentro de un if, para evitar que el ciclo termine prematuramente en la primera iteraci√≥n:\n\nVeamos el siguiente ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEste c√≥digo es un bucle for en Python que itera a trav√©s de los n√∫meros del 1 al 20. El objetivo del bucle es imprimir los n√∫meros en cada iteraci√≥n hasta que se encuentre un n√∫mero divisible por 7. Aqu√≠ est√° lo que hace paso a paso:\n\nInicia un bucle for que utiliza la variable n para recorrer los n√∫meros del 1 al 20 (inclusive) con la funci√≥n range(1, 21).\nEn cada iteraci√≥n del bucle, se verifica si el n√∫mero n es divisible por 7 utilizando la expresi√≥n n % 7 == 0. Esto se hace con el operador de m√≥dulo (%) para comprobar si el residuo de la divisi√≥n de n por 7 es igual a 0. Si esta condici√≥n es verdadera, significa que n es divisible por 7.\nSi se encuentra un n√∫mero que es divisible por 7, se utiliza la instrucci√≥n break para salir inmediatamente del bucle for, lo que significa que el bucle se interrumpe en esa iteraci√≥n.\nSi el bucle no se rompe con break, se imprime el n√∫mero n en esa iteraci√≥n.\nDespu√©s de que se complete el bucle for, se imprime ‚Äú‚ÄìFin‚Äì‚Äù una vez para marcar el final del programa.\n\n\n\n5.4.2 Continue\nLa sentencia continue se usa para saltar a la iteraci√≥n siguiente sin llegar al final de la que est√° en curso.\n\nVeamos el siguiente ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEl c√≥digo que proporcionaste es un bucle for en Python que itera a trav√©s de los n√∫meros del 1 al 20 utilizando la funci√≥n range(1, 21). El bucle imprime todos los n√∫meros excepto aquellos que son divisibles por 7. A continuaci√≥n, se explica paso a paso lo que hace el c√≥digo:\n\nEl bucle for se inicia y la variable n toma valores del 1 al 20 en cada iteraci√≥n.\nEn cada iteraci√≥n del bucle, se verifica si el n√∫mero n es divisible por 7 utilizando la expresi√≥n n % 7 == 0. El operador de m√≥dulo (%) se utiliza para calcular el residuo de la divisi√≥n de n por 7. Si el residuo es igual a 0, significa que n es divisible por 7.\nSi la condici√≥n n % 7 == 0 es verdadera, se ejecuta la instrucci√≥n continue, que salta el resto del c√≥digo en esa iteraci√≥n y pasa a la siguiente iteraci√≥n del bucle. Esto significa que cuando se encuentra un n√∫mero divisible por 7, no se imprime y el bucle contin√∫a con el siguiente n√∫mero.\nSi la condici√≥n n % 7 == 0 no es verdadera (es decir, si n no es divisible por 7), se ejecuta la instrucci√≥n print(n), que imprime el valor de n en la consola.\nDespu√©s de que se complete el bucle for, se imprime ‚Äú‚ÄìFin‚Äì‚Äù una vez para marcar el final del programa.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>üîÑ Control de Flujo</span>"
    ]
  },
  {
    "objectID": "contenidos/04_control_flujo.html#ejercicios",
    "href": "contenidos/04_control_flujo.html#ejercicios",
    "title": "5¬† üîÑ Control de Flujo",
    "section": "5.5 Ejercicios",
    "text": "5.5 Ejercicios\n\n5.5.1 if-elif-else\nEjercicio 01\nEscriba un programa que determine si el n√∫mero entero ingresado por el usuario es par o no.\nIngrese un n√∫mero: 4\nSu n√∫mero es par\nIngrese un n√∫mero: 3\nSu n√∫mero es impar\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nEscriba un programa que pida dos n√∫meros enteros y que calcule la divisi√≥n, indicando si la divisi√≥n es exacta o no.\nDividendo: 14\nDivisor: 5\n\nLa divisi√≥n no es exacta.\nCociente: 2\nResto: 4\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nEscriba un programa que pida al usuario dos palabras, y que indique cu√°l de ellas es la m√°s larga y por cu√°ntas letras lo es.\nPalabra 1: edificio\nPalabra 2: tren\nLa palabra edificio tiene 4 letras mas que tren.\nPalabra 1: sol\nPalabra 2: paralelepipedo\nLa palabra paralelepipedo tiene 11 letras mas que sol\nPalabra 1: plancha\nPalabra 2: lapices\nLas dos palabras tienen el mismo largo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nUn a√±o es bisiesto si es divisible por \\(4\\), excepto si es divisible por \\(100\\) y no por \\(400\\). Escriba un programa que reciba un a√±o como entrada e indique True si un a√±o es bisiesto o False si no lo es.\nIngrese un anno: 1988\n1988 es bisiesto\nIngrese un anno: 2011\n2011 no es bisiesto\nIngrese un anno: 1700\n1700 no es bisiesto\nIngrese un anno: 2400\n2400 es bisiesto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 05\nLos tres lados \\(a, b\\) y \\(c\\) de un tri√°ngulo deben satisfacer la desigualdad triangular: cada uno de los lados no puede ser m√°s largo que la suma de los otros dos.\nEscriba un programa que reciba como entrada los tres lados de un tri√°ngulo, e indique:\n\nsi acaso el tri√°ngulo es inv√°lido\nsi el tri√°ngulo es v√°lido, qu√© tipo de tri√°ngulo es.\n\nIngrese a: 3.9\nIngrese b: 6.0\nIngrese c: 1.2\nNo es un triangulo valido.\nIngrese a: 1.9\nIngrese b: 2\nIngrese c: 2\nEl triangulo es isoceles.\nIngrese a: 3.0\nIngrese b: 5.0\nIngrese c: 4.0\nEl triangulo es escaleno.\nIngrese a: 2\nIngrese b: 2\nIngrese c: 2\nEl triangulo es equilatero.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 06\nEl riesgo de que una persona sufra enfermedades coronarias depende de su edad y su √≠ndice de masa corporal:\n\n\n\n\nedad &lt; 45\nedad ‚â• 45\n\n\n\n\nIMC &lt; 22.0\nbajo\nmedio\n\n\nIMC ‚â• 22.0\nmedio\nalto\n\n\n\nEl √≠ndice de masa corporal es el cuociente entre el peso del individuo en kilos y el cuadrado de su estatura en metros ($IMC = $).\nEscriba un programa que reciba como entrada la estatura, el peso y la edad de una persona, y le entregue su condici√≥n de riesgo.\nejemplos\n\nSi el usuario ingresa una estatura de 1.75 metros, un peso de 70 kilogramos y una edad de 30 a√±os, el programa mostrar√°: ‚ÄúLa condici√≥n de riesgo es: medio‚Äù.\nSi el usuario ingresa una estatura de 1.65 metros, un peso de 90 kilogramos y una edad de 50 a√±os, el programa mostrar√°: ‚ÄúLa condici√≥n de riesgo es: alto‚Äù.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 07\nUn n√∫mero natural es un pal√≠ndromo si se lee igual de izquierda a derecha y de derecha a izquierda.\nPor ejemplo, \\(14941\\) es un pal√≠ndromo, mientras que \\(81924\\) no lo es.\nEscriba un programa que indique si el n√∫mero ingresado es o no pal√≠ndromo:\nIngrese un numero: 14941\n14941 es palindromo\nIngrese un numero: 81924\n81924 no es palindromo\n\n\nHint: Para encontrar el inverso de un string en Python, puedes utilizar la t√©cnica de texto[::-1].\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.5.2 While\nEjercicio 01\nSolicita al usuario un n√∫mero y muestra un contador regresivo desde ese n√∫mero hasta 1. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 5\nContador regresivo desde 5 hasta 1:\n5\n4\n3\n2\n1\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nSolicita al usuario un n√∫mero y calcula la suma de todos los n√∫meros pares desde 2 hasta ese n√∫mero. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 10\nLa suma de n√∫meros pares desde 2 hasta 10 es 30\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nSolicita al usuario un n√∫mero entero y suma todos sus d√≠gitos. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero entero: 12345\nLa suma de los d√≠gitos es 15\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nPide al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 123456\nEl n√∫mero tiene 3 d√≠gitos pares.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 05\nSolicita al usuario un n√∫mero y cuenta cu√°ntos n√∫meros en el rango de 1 a ese n√∫mero son divisibles por 7. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 20\nHay 2 n√∫meros divisibles por 7 en el rango de 1 a 20.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 06\nSolicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son impares. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 7654321\nEl n√∫mero tiene 4 d√≠gitos impares.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.5.3 Range\nEjercicio 01\nCalcula la suma de todos los n√∫meros pares desde 1 hasta un n√∫mero dado (\\(n\\)). Utiliza la declaraci√≥n range para resolver este problema.\nIngrese un n√∫mero: 10\nLa suma de n√∫meros pares desde 1 hasta 10 es 30\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nMuestra un contador regresivo desde un n√∫mero (\\(n\\)) dado hasta 1. Utiliza la declaraci√≥n range para resolver este problema.\nIngrese un n√∫mero: 5\nContador regresivo desde 5 hasta 1:\n5\n4\n3\n2\n1\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nMuestra la tabla de multiplicar de un n√∫mero dado. Utiliza la declaraci√≥n range para resolver este problema.\nIngrese un n√∫mero: 7\nTabla de multiplicar del 7:\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nEscribe un programa que solicite al usuario un n√∫mero entero positivo y luego calcule la suma de los cuadrados de todos los n√∫meros desde 1 hasta el n√∫mero ingresado. Utiliza la declaraci√≥n range para generar los n√∫meros en el rango y luego suma los cuadrados de esos n√∫meros.\nEjemplos\n\nSi el usuario ingresa el n√∫mero 4, el programa calcular√° la suma de los cuadrados de los n√∫meros desde 1 hasta 4 de la siguiente manera:\nSuma = 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30\nEl programa mostrar√°: ‚ÄúLa suma de los cuadrados de los n√∫meros en el rango de 1 a 4 es 30.‚Äù\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.5.4 Break & Continue\nEjercicio 01\nSolicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n continue para omitir los d√≠gitos impares.\nIngrese un n√∫mero: 123456\nEl n√∫mero tiene 3 d√≠gitos pares.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nCalcula la suma de los n√∫meros en un rango dado (por ejemplo, de 1 a 10), pero omite los m√∫ltiplos de 3 utilizando la declaraci√≥n continue.\nIngrese un n√∫mero: 10\nLa suma de los n√∫meros no divisibles por 3 en el rango de 1 a 10 es 37\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nDada una lista de n√∫meros enteros, solicita al usuario un n√∫mero objetivo y busca si el n√∫mero est√° en la lista. Utiliza un bucle con break para detener la b√∫squeda una vez que encuentres el n√∫mero o determines que no est√° en la lista.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nSimula un juego en el que la computadora ‚Äúpiensa‚Äù en un n√∫mero y el jugador intenta adivinarlo. Crea un bucle que permita al jugador hacer intentos para adivinar el n√∫mero, y utiliza break para salir del bucle si el jugador adivina el n√∫mero o excede un n√∫mero m√°ximo de intentos.\n\nHint: Considera la siguiente rutina para partir tu c√≥digo:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>üîÑ Control de Flujo</span>"
    ]
  },
  {
    "objectID": "contenidos/05_estructura_datos.html",
    "href": "contenidos/05_estructura_datos.html",
    "title": "6¬† üìä Estructura de datos",
    "section": "",
    "text": "6.1 Listas\nUna lista es una colecci√≥n ordenada de valores. Una lista puede contener cualquier cosa.\nEn Python, el tipo de datos que representa a las listas se llama list.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>üìä Estructura de datos</span>"
    ]
  },
  {
    "objectID": "contenidos/05_estructura_datos.html#listas",
    "href": "contenidos/05_estructura_datos.html#listas",
    "title": "6¬† üìä Estructura de datos",
    "section": "",
    "text": "6.1.1 Creando listas en python\nExisten varias formas de crear listas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.1.2 Operaciones sobre listas\nOperador len\nlen(lista) entrega el largo de la lista; es decir, cu√°ntos elementos tiene:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAcceder al √≠ndice\nl[i] entrega el i-√©simo valor de la lista. El valor \\(i\\) se llama √≠ndice del valor. Al igual que para los strings, los √≠ndices parten de cero:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n√çndice negativo\nSi el √≠ndice es negativo, los elementos se cuentan desde el final hacia atr√°s:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAgregar un elemento\nl.append(x) agrega el elemento x al final de la lista:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nConcatenar dos listas\nl1 + l2 concatena las listas l1 y l2:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRepetir lista\nl * n repite \\(n\\) veces la lista l:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nElemento en una lista\nPara saber si un elemento x est√° en la lista l, se usa x in l. La versi√≥n negativa de in es not in:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperador rebanado\nl[i:j] es el operador de rebanado, que entrega una nueva lista que tiene desde el i-√©simo hasta justo antes del j-√©simo elemento de la lista l:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperador √≠ndice\nl.index(x) entrega cu√°l es el √≠ndice del valor x:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperador remover\nl.remove(x) elimina el elemento x de la lista:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperador borrar\ndel l[i] elimina el i-√©simo elemento de la lista:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperador reversa\nl.reverse() invierte la lista:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperador ordenar\nl.sort() ordena la lista:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.1.3 Iterar sobre una lista\nEn Python, una lista es un tipo de objeto iterable, lo que significa que puedes recorrer sus elementos utilizando un ciclo for.\nA continuaci√≥n, te mostraremos un ejemplo de c√≥mo hacerlo paso a paso:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreamos una lista llamada valores que contiene los n√∫meros [1, 2, 3, 4, 5]. Esta ser√° la lista que recorreremos.\nUtilizamos un ciclo for para iterar a trav√©s de cada elemento de la lista. En cada iteraci√≥n, la variable i toma el valor del siguiente elemento de la lista.\nDentro del ciclo for, calculamos el cuadrado de i usando el operador ** y almacenamos el resultado en la variable cuadrado.\nFinalmente, imprimimos en la consola un mensaje que muestra el n√∫mero original (i) y su cuadrado (cuadrado) utilizando una f-string.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>üìä Estructura de datos</span>"
    ]
  },
  {
    "objectID": "contenidos/05_estructura_datos.html#tuplas",
    "href": "contenidos/05_estructura_datos.html#tuplas",
    "title": "6¬† üìä Estructura de datos",
    "section": "6.2 Tuplas",
    "text": "6.2 Tuplas\nUna tupla es una secuencia de valores agrupados. Una tupla sirve para agrupar, como si fueran un √∫nico valor, varios valores que, por su naturaleza, deben ir juntos.\nEl tipo de datos que representa a las tuplas se llama tuple. El tipo tuple es inmutable: una tupla no puede ser modificada una vez que ha sido creada.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n6.2.1 Desempaquetado de tuplas\nLos valores individuales de una tupla pueden ser recuperados asignando la tupla a las variables respectivas. Esto se llama desempaquetar la tupla (en ingl√©s: unpack):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSi se intenta desempaquetar una cantidad incorrecta de valores, ocurre un error de valor:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.2.2 Comparaci√≥n de tuplas\nDos tuplas son iguales cuando tienen el mismo tama√±o y cada uno de sus elementos correspondientes tienen el mismo valor:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara determinar si una tupla es menor que otra, se utiliza lo que se denomina orden lexicogr√°fico. Si los elementos en la primera posici√≥n de ambas tuplas son distintos, ellos determinan el ordenamiento de las tuplas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.2.3 Acceder a valores de una tupla\nAl igual que las listas, se pueden acceder a distintos elemntos de las tuplas de la siguiente forma:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.2.4 Iteraci√≥n sobre tuplas\nLas tuplas en Python tambi√©n son objetos iterables, lo que significa que puedes recorrer sus elementos usando un ciclo for.\nA continuaci√≥n, te mostraremos un ejemplo de c√≥mo hacerlo paso a paso:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nConvertir Entre Listas y Tuplas\nEn Python, puedes convertir una tupla en una lista utilizando la funci√≥n list() y una lista en una tupla utilizando la funci√≥n tuple(). Esto es √∫til cuando necesitas cambiar el tipo de contenedor de datos. A continuaci√≥n, te proporciono ejemplos para ilustrar ambos casos:\nConvertir una Tupla en una Lista:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nConvertir una Lista en una Tupla:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>üìä Estructura de datos</span>"
    ]
  },
  {
    "objectID": "contenidos/05_estructura_datos.html#conjuntos",
    "href": "contenidos/05_estructura_datos.html#conjuntos",
    "title": "6¬† üìä Estructura de datos",
    "section": "6.3 Conjuntos",
    "text": "6.3 Conjuntos\nUn conjunto es una colecci√≥n desordenada de valores no repetidos.\nLos conjuntos de Python son an√°logos a los conjuntos matem√°ticos. El tipo de datos que representa a los conjuntos se llama set.\n\n6.3.1 C√≥mo crear conjuntos\nLas dos maneras principales de crear un conjunto son:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLos elementos de un conjunto deben ser inmutables. Por ejemplo, no es posible crear un conjunto de listas, pero s√≠ un conjunto de tuplas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComo un conjunto no es ordenado, no tiene sentido intentar obtener un elemento usando un √≠ndice:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin embargo, s√≠ es posible iterar sobre un conjunto usando un ciclo for:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.3.2 Operaciones sobre conjuntos\nLargo del conjunto len(s) entrega el n√∫mero de elementos del conjunto s:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nElementos en el conjunto\nx in s permite saber si el elemento x est√° en el conjunto s:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nx not in s permite saber si x no est√° en s:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAgregar elementos al conjunto\ns.add(x) agrega el elemento x al conjunto s:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRemover elementos al conjunto\ns.remove(x) elimina el elemento x del conjunto s:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSi el elemento x no est√° en el conjunto, ocurre un error de llave:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOperaciones sobre conjuntos\n\n& y | son los operadores de intersecci√≥n y uni√≥n repectivamente:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ns - t entrega la diferencia entre s y t; es decir, los elementos de s que no est√°n en t:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ns ^ t entrega la diferencia sim√©trica entre s y t; es decir, los elementos que est√°n en s o en t, pero no en ambos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEl operador &lt; aplicado sobre conjuntos significa ¬´es subconjunto de¬ª:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ns &lt;= t tambi√©n indica si s es subconjunto de t. La distinci√≥n ocurre cuando los conjuntos son iguales:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>üìä Estructura de datos</span>"
    ]
  },
  {
    "objectID": "contenidos/05_estructura_datos.html#diccionarios",
    "href": "contenidos/05_estructura_datos.html#diccionarios",
    "title": "6¬† üìä Estructura de datos",
    "section": "6.4 Diccionarios",
    "text": "6.4 Diccionarios\nUn diccionario es un tipo de datos que sirve para asociar pares de objetos.\nUn diccionario puede ser visto como una colecci√≥n de llaves, cada una de las cuales tiene asociada un valor. Las llaves no est√°n ordenadas y no hay llaves repetidas. La √∫nica manera de acceder a un valor es a trav√©s de su llave.\n\n6.4.1 C√≥mo crear diccionarios\nLos diccionarios literales se crean usando llaves ({ y }). La llave y el valor van separados por dos puntos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.4.2 C√≥mo usar un diccionario\nEl valor asociado a la llave \\(k\\) en el diccionario \\(dct\\) se puede obtener mediante \\(dct[k]\\):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSi se asigna un valor a una llave que ya estaba en el diccionario, el valor anterior se sobreescribe. Recuerde que un diccionario no puede tener llaves repetidas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambi√©n se pueden adherir llaves al diccionario\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPor otro lado, si se quiere borrar una llave o el mismo diccionario, se ocupa el comando del\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.4.3 Iterar un diccionario\nLos diccionarios son iterables. Al iterar sobre un diccionario en un ciclo for, se obtiene las llaves:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara iterar sobre las llaves, se usa values():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara iterar sobre las llaves y los valores simult√°neamente, se usa el m√©todo items():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.4.4 Restricciones sobre las llaves\nNo se puede usar cualquier objeto como llave de un diccionario. Las llaves deben ser de un tipo de datos inmutable. Por ejemplo, no se puede usar listas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nT√≠picamente, se usa n√∫meros, tuplas y strings como llaves de los diccionarios.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>üìä Estructura de datos</span>"
    ]
  },
  {
    "objectID": "contenidos/05_estructura_datos.html#ejercicios",
    "href": "contenidos/05_estructura_datos.html#ejercicios",
    "title": "6¬† üìä Estructura de datos",
    "section": "6.5 Ejercicios",
    "text": "6.5 Ejercicios\n\n6.5.1 Listas\nEjercicio 01\nConsidere las siguientes listas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.5.2 Tuplas\nEjercicio 01\nConsidere las siguientes asignaciones:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.5.3 Conjuntos\nEjercicio 01\nConsidere las siguientes asignaciones:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.5.4 Diccionarios\nEjercicio 01\nConsidere las siguientes asignaciones:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>üìä Estructura de datos</span>"
    ]
  },
  {
    "objectID": "contenidos/06_funciones.html",
    "href": "contenidos/06_funciones.html",
    "title": "7¬† üõ†Ô∏è Funciones",
    "section": "",
    "text": "7.1 Introducci√≥n\nLas funciones en Python son bloques de c√≥digo que pueden ser llamados en cualquier momento del programa. Estos bloques de c√≥digo reciben uno o varios argumentos y pueden devolver un valor. Las funciones son muy √∫tiles porque te permiten escribir c√≥digo una vez y reutilizarlo en distintas partes del programa, lo que puede ahorrar mucho tiempo y esfuerzo.\nFormalmente, una funci√≥n tiene tres componentes importantes:\nEn esencia, una funci√≥n es un mini programa. Sus tres componentes son an√°logos a la entrada, el proceso y la salida de un programa.\nDefinici√≥n de funciones\nLas funciones en Python lucen de la siguiente forma:\nSe utiliza la palabra clave def seguida del nombre de la funci√≥n, los par√°metros que recibe entre par√©ntesis y dos puntos :. El cuerpo de la funci√≥n va indentado y puede contener cualquier c√≥digo que se quiera ejecutar. Para devolver un valor se utiliza la palabra clave return.\nEn este ejemplo se define una funci√≥n llamada suma que recibe dos par√°metros a y b y devuelve la suma de ambos. Se llama a la funci√≥n con los valores 3 y 5 y se almacena el resultado en una variable llamada resultado. Finalmente, se imprime el valor de resultado.\nPor otro lado, dado que no se especifica el tipo de datos, podemos sumar dos strings\nPor lo que se debe tener cuidado tanto con el nombre de la funci√≥n (se espera que pueda resumir la funcion en una o dos palabras) y el tipo de argumentos que queremos que reciba.\nLas funciones tambi√©n pueden tener argumentos opcionales que tienen un valor por defecto. Para definir un argumento opcional se utiliza el operador = para asignarle un valor por defecto. El valor por defecto se utiliza si el argumento no es especificado al llamar a la funci√≥n.\nEn este ejemplo se define una funci√≥n llamada saludo que recibe dos argumentos, nombre y saludo. El argumento saludo tiene un valor por defecto de \"Hola\". La funci√≥n imprime el mensaje de saludo utilizando los valores de saludo y nombre. Se llama a la funci√≥n con diferentes valores de argumentos.\nA continuaci√≥n, se crear√° la funci√≥n factorial, la cual entregar√° el factorial de un n√∫mero entero no negativo.\nEn este ejemplo, el resultado que entrega una llamada a la funci√≥n es el valor que tiene la variable f al llegar a la √∫ltima l√≠nea de la funci√≥n.\nUna vez creada, la funci√≥n puede ser usada como cualquier otra, todas las veces que sea necesario:\nLas variables que son creadas dentro de la funci√≥n (incluyendo los par√°metros y el resultado) se llaman variables locales, y s√≥lo son visibles dentro de la funci√≥n, no desde el resto del programa.\nPor otra parte, las variables creadas fuera de alguna funci√≥n se llaman variables globales, y son visibles desde cualquier parte del programa. Sin embargo, su valor no puede ser modificado, ya que una asignaci√≥n crear√≠a una variable local del mismo nombre.\nPor otro lado, existen funciones que no necesariamente reciben argumentos.\nTambi√©n, existen funciones que no retornan valores:",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>üõ†Ô∏è Funciones</span>"
    ]
  },
  {
    "objectID": "contenidos/06_funciones.html#introducci√≥n",
    "href": "contenidos/06_funciones.html#introducci√≥n",
    "title": "7¬† üõ†Ô∏è Funciones",
    "section": "",
    "text": "los par√°metros, que son los valores que recibe la funci√≥n como entrada;\nel c√≥digo de la funci√≥n, que son las operaciones que hace la funci√≥n; y\nel resultado (o valor de retorno), que es el valor final que entrega la funci√≥n.\n\n\n\n\ndef nombre(parametro_1,...,parametro_n):\n    \"\"\"\n    Descripcion de la funcion (opcional)\n    \"\"\"\n    # c√≥digo de la funci√≥n\n    resultado = operacion(parametro_1,...,parametro_n)\n    return resultado # output de la funcion\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNota: Dependiendo del uso que le d√© a su c√≥digo es que ocupar√° variables globales o no, sin embargo, es preferible definir su funci√≥n solo con variables locales, puesto que esto deja expl√≠cita la dependencia de dicha variable dentro de su funci√≥n objetivo.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>üõ†Ô∏è Funciones</span>"
    ]
  },
  {
    "objectID": "contenidos/06_funciones.html#formas-de-escribir-una-funci√≥n",
    "href": "contenidos/06_funciones.html#formas-de-escribir-una-funci√≥n",
    "title": "7¬† üõ†Ô∏è Funciones",
    "section": "7.2 Formas de escribir una funci√≥n",
    "text": "7.2 Formas de escribir una funci√≥n\n\n7.2.1 Recursion\nUna funci√≥n que se llama a s√≠ misma se conoce como funci√≥n recursiva y este proceso se llama recursividad. Cada funci√≥n recursiva debe tener una condici√≥n base que detenga la recursividad o, de lo contrario, la funci√≥n se llama a s√≠ misma infinitamente.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnalicemos recursivamente el factorial del n√∫mero \\(3\\).\n \n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n7.2.2 Lambda\nEn Python, puedes definir funciones sin nombre utilizando funciones lambda o, como tambi√©n se les conoce, funciones an√≥nimas. Estas funciones son √∫tiles para realizar operaciones simples en una sola l√≠nea de c√≥digo. Para crear una funci√≥n lambda, se utiliza la palabra clave lambda. A continuaci√≥n, te presento una comparaci√≥n entre una funci√≥n definida de manera convencional y una funci√≥n lambda:\nFunci√≥n Definida de Manera Convencional:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFunci√≥n Lambda:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplicaci√≥n:\n\nEn el primer ejemplo, se define una funci√≥n convencional llamada cuadrado_normal que toma un argumento x y devuelve el cuadrado de x utilizando la declaraci√≥n return.\nEn el segundo ejemplo, se crea una funci√≥n lambda que realiza la misma operaci√≥n. La funci√≥n lambda se define como lambda x: x ** 2, donde x es el argumento de entrada y x ** 2 es la expresi√≥n que se eval√∫a y devuelve.\nLuego, llamamos tanto a la funci√≥n convencional como a la funci√≥n lambda con un valor de 5 como argumento, y guardamos los resultados en las variables resultado_normal y resultado_lambda, respectivamente.\nFinalmente, imprimimos los resultados, que ser√°n 25 tanto para la funci√≥n convencional como para la funci√≥n lambda, ya que ambas calculan el cuadrado de 5.\n\n\n\n7.2.3 Utilizando *args y **kwargs\nEn Python, puedes utilizar *args y **kwargs para manejar un n√∫mero variable de argumentos en una funci√≥n. Estos nombres, args y kwargs, son convenciones comunes, pero en realidad puedes nombrarlos como desees. Ahora, profundicemos en estos conceptos:\n\n*args: Es una convenci√≥n para indicar que se acepta un n√∫mero variable de argumentos no nombrados (posicionales). Los argumentos se almacenan en una tupla.\n**kwargs: Es una convenci√≥n para indicar que se acepta un n√∫mero variable de argumentos con nombre. Los argumentos se almacenan en un diccionario, donde las claves se convierten en los nombres de los par√°metros y los valores son los argumentos asociados.\n\nUsando *args:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn el primer ejemplo, se define la funci√≥n sumar_numeros, que toma un n√∫mero variable de argumentos no nombrados. La funci√≥n suma todos los argumentos recibidos y devuelve el resultado. En este caso, llamamos a la funci√≥n con los n√∫meros 1, 2, 3, 4, y la suma se almacena en resultado.\nUsando **kwargs:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn el segundo ejemplo, se define la funci√≥n imprimir_datos, que toma un n√∫mero variable de argumentos con nombre. La funci√≥n itera a trav√©s del diccionario datos y muestra las claves y sus valores asociados. Llamamos a la funci√≥n con argumentos con nombre, como ‚Äúnombre‚Äù, ‚Äúedad‚Äù y ‚Äúciudad‚Äù, y se imprime la informaci√≥n correspondiente.\n\nNota: Es importante recordar que aunque *args y **kwargs son √∫tiles, se recomienda ser expl√≠cito en la definici√≥n de tus funciones siempre que sea posible para hacer el c√≥digo m√°s legible y mantenible.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>üõ†Ô∏è Funciones</span>"
    ]
  },
  {
    "objectID": "contenidos/06_funciones.html#ejercicios",
    "href": "contenidos/06_funciones.html#ejercicios",
    "title": "7¬† üõ†Ô∏è Funciones",
    "section": "7.3 Ejercicios",
    "text": "7.3 Ejercicios\nEjercicio 01\nEscriba una funci√≥n que se llame saludar que reciba como input un string s y devuelva como output ‚ÄúHola + valor de s‚Äù. * Ejemplo: saludar(‚Äúmundo‚Äù) = ‚ÄúHola mundo‚Äù\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nEscriba una funci√≥n que se llame es_par que reciba como input un n√∫mero entero n y devuelva como output True si el n√∫mero es par, y False en otro caso.\n\nEjemplo:\n\nes_par(4) = True\nes_par(3) = False\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nEscriba la funci√≥n invertir_digitos(n) que reciba un n√∫mero entero n y entregue como resultado el n√∫mero n con los d√≠gitos en el orden inverso:\n &gt;&gt;&gt; invertir_digitos(142)\n241\nA continuaci√≥n, escriba un programa que indique si el n√∫mero ingresado es pal√≠ndromo o no, usando la funci√≥n invertir_digitos:\nIngrese n: 81418\nEs pal√≠ndromo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nMuchos de estos programas s√≥lo ten√≠an peque√±as diferencias entre ellos, por lo que hab√≠a que repetir mucho c√≥digo al escribirlos. En este ejercicio, usted deber√° implementar algunos de esos programas como funciones, reutilizando componentes para evitar escribir c√≥digo repetido.\nEjercicio 041\nEscriba la funci√≥n es_divisible(n, d) que indique si n es divisible por d:\n&gt;&gt;&gt; es_divisible(15, 5)\nTrue\n&gt;&gt;&gt; es_divisible(15, 6)\nFalse\nEjercicio 042\nUsando la funci√≥n es_divisible, escriba una funci√≥n es_primo(n) que determine si un n√∫mero es primo o no:\n&gt;&gt;&gt; es_primo(17)\nTrue\n&gt;&gt;&gt; es_primo(221)\nFalse\nEjercicio 043\nUsando la funci√≥n es_primo, escriba la funci√≥n i_esimo_primo(i) que entregue el i-√©simo n√∫mero primo.\n&gt;&gt;&gt; i_esimo_primo(1)\n2\n&gt;&gt;&gt; i_esimo_primo(20)\n71\nEjercicio 044\nUsando las funciones anteriores, escriba la funci√≥n primeros_primos(m) que entregue una lista de los primeros m n√∫meros primos:\n&gt;&gt;&gt; primeros_primos(10)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nEjercicio 045\nUsando las funciones anteriores, escriba la funci√≥n primos_hasta(m) que entregue una lista de los primos menores o iguales que m:\n&gt;&gt;&gt; primos_hasta(19)\n[2, 3, 5, 7, 11, 13, 17, 19]\nEjercicio 046\nUn primo de Mersenne es un n√∫mero primo de la forma \\(2p‚àí1\\). Una propiedad conocida de los primos de Mersenne es que \\(p\\) debe ser tambi√©n un n√∫mero primo.\nEscriba la funci√≥n mersenne que pregunte al usuario un n√∫mero \\(n\\), y muestre como salida los primeros n primos de Mersenne:\n&gt;&gt;&gt; mersenne(5)\n3\n7\n31\n127\n8191\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 05\nLa suma natural de los primeros n n√∫meros naturales esta dado por: \\[\\displaystyle S = \\sum_{k=1}^{n} k = 1 +2 +3 +...+n = \\dfrac{n(n+1)}{2} \\]\nEscriba una funci√≥n que se llame suma_numeros_naturales que reciba como input un n√∫mero entero n y devuelva como output la suma de los primeros n n√∫meros naturales.\nPara esto:\n\n\nPrograme la funci√≥n ocupando la f√≥rmula manual: \\(S = 1+2+3+..+n\\)\n\n\nPrograme la funci√≥n ocupando la f√≥rmula cerrada: $S = $\n\n\nEjemplo: * suma_numeros_naturales(1) = 1 * suma_numeros_naturales(10) = 55 * suma_numeros_naturales(100) = 5050\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 06\nEn los siglos XVII y XVIII, James Gregory y Gottfried Leibniz descubrieron una serie infinita que sirve para calcular \\(\\pi\\):\n\\[\\displaystyle \\pi = 4 \\sum_{k=1}^{\\infty}\\dfrac{(-1)^{k+1}}{2k-1} = 4(1-\\dfrac{1}{3}+\\dfrac{1}{5}-\\dfrac{1}{7} + ...) \\]\nDesarolle un programa para estimar el valor de \\(\\pi\\) ocupando el m√©todo de Leibniz, donde la entrada del programa debe ser un n√∫mero entero \\(n\\) que indique cu√°ntos t√©rminos de la suma se utilizar√°.\n\nEjemplo:\n\ncalcular_pi(3) = 3.466666666666667\ncalcular_pi(1000) = 3.140592653839794\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 07\nEuler realiz√≥ varios aportes en relaci√≥n a \\(e\\), pero no fue hasta 1748 cuando public√≥ su Introductio in analysin infinitorum que dio un tratamiento definitivo a las ideas sobre \\(e\\). All√≠ mostr√≥ que:\nEn los siglos XVII y XVIII, James Gregory y Gottfried Leibniz descubrieron una serie infinita que sirve para calcular œÄ:\n\\[\\displaystyle e = \\sum_{k=0}^{\\infty}\\dfrac{1}{k!} = 1+\\dfrac{1}{2!}+\\dfrac{1}{3!}+\\dfrac{1}{4!} + ... \\]\nDesarolle un programa para estimar el valor de \\(e\\) ocupando el m√©todo de Euler, donde la entrada del programa debe ser un n√∫mero entero \\(n\\) que indique cu√°ntos t√©rminos de la suma se utilizar√°.\nPara esto:\n\n\nDefina la funci√≥n factorial, donde la entrada sea un n√∫mero natural \\(n\\) y la salida sea el factorial de dicho n√∫mero.\n\n\nEjemplo: factorial(3) =3, factorial(5) = 120\n\n\nOcupe la funci√≥n factorial dentro de la funci√≥n calcular_e.\n\n\n\nEjemplo: calcular_e(3) = 2.6666666666666665, calcular_e(1000) = 2.7182818284590455\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 08\nSea \\(\\sigma(n)\\) definido como la suma de los divisores propios de \\(n\\) (n√∫meros menores que n que se dividen en \\(n\\)).\nLos n√∫meros amigos son enteros positivos \\(n_1\\) y \\(n_2\\) tales que la suma de los divisores propios de uno es igual al otro n√∫mero y viceversa, es decir, \\(\\sigma(n_1)=\\sigma(n_2)\\) y \\(\\sigma(n_2)=\\sigma(n_1)\\).\nPor ejemplo, los n√∫meros 220 y 284 son n√∫meros amigos. * los divisores propios de 220 son 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 y 110; por lo tanto \\(\\sigma(220) = 284\\). * los divisores propios de 284 son 1, 2, 4, 71 y 142; entonces \\(\\sigma(284) = 220\\).\nImplemente una funci√≥n llamada amigos cuyo input sean dos n√∫meros naturales \\(n_1\\) y \\(n_2\\), cuyo output sea verifique si los n√∫meros son amigos o no.\nPara esto:\n\n\nDefina la funci√≥n divisores_propios, donde la entrada sea un n√∫mero natural \\(n\\) y la salida sea una lista con los divisores propios de dicho n√∫mero.\n\n\nEjemplo: divisores_propios(220) = [1, 2, 4, 5, 10, 11, 20, 22, 44, 55 y 110], divisores_propios(284) = [1, 2, 4, 71 y 142]\n\n\nOcupe la funci√≥n divisores_propios dentro de la funci√≥n amigos.\n\n\nEjemplo: amigos(220,284) = True, amigos(6,5) = False\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 09\nLa conjetura de Collatz, conocida tambi√©n como conjetura \\(3n+1\\) o conjetura de Ulam (entre otros nombres), fue enunciada por el matem√°tico Lothar Collatz en 1937, y a la fecha no se ha resuelto.\nSea la siguiente operaci√≥n, aplicable a cualquier n√∫mero entero positivo: * Si el n√∫mero es par, se divide entre 2. * Si el n√∫mero es impar, se multiplica por 3 y se suma 1.\nLa conjetura dice que siempre alcanzaremos el 1 (y por tanto el ciclo 4, 2, 1) para cualquier n√∫mero con el que comencemos.\nImplemente una funci√≥n llamada collatz cuyo input sea un n√∫mero natural positivo \\(N\\) y como output devulva la secuencia de n√∫meros hasta llegar a 1.\n\nEjemplo: collatz(9) = [9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 10\nLa conjetura de Goldbach es uno de los problemas abiertos m√°s antiguos en matem√°ticas. Concretamente, G.H. Hardy, en 1921, en su famoso discurso pronunciado en la Sociedad Matem√°tica de Copenhague, coment√≥ que probablemente la conjetura de Goldbach no es solo uno de los problemas no resueltos m√°s dif√≠ciles de la teor√≠a de n√∫meros, sino de todas las matem√°ticas. Su enunciado es el siguiente:\n\nTodo n√∫mero par mayor que 2 puede escribirse como suma de dos n√∫meros primos - Christian Goldbach (1742)\n\nImplemente una funci√≥n llamada goldbach cuyo input sea un n√∫mero natural positivo \\(n\\) y como output devuelva la suma de dos primos (\\(n_1\\) y \\(n_2\\)) tal que: \\(n_1+n_2=n\\).\nPara esto:\n\n\nDefina la funci√≥n es_primo, donde la entrada sea un n√∫mero natural \\(n\\) y la salida sea True si el n√∫mero es primo y False en otro caso.\n\n\nEjemplo: es_primo(3) = True, es_primo(4) = False\n\n\nDefina la funci√≥n lista_de_primos, donde la entrada sea un n√∫mero natural par \\(n\\) mayor que dos y la salida sea una lista con todos los n√∫mero primos entre 2 y \\(n\\).\n\n\nEjemplo: lista_de_primos(4) = [2,3], lista_de_primos(6) = [2,3,5], lista_de_primos(8) = [2,3,5,7]\n\n\nOcupe la funci√≥n lista_de_primos dentro de la funci√≥n goldbash.\n\nEjemplo: goldbash(4) = (2,2), goldbash(6) = (3,3) , goldbash(8) = (3,5)\n\nEjercicio 11\nEl producto interno de dos listas de n√∫meros es la suma de los productos de los t√©rminos correspondientes de ambas.\nPor ejemplo, si:\na = [5, 1, 6]\nb = [1, -2, 8]\nentonces el producto interno entre \\(a\\) y \\(b\\) es:\n(5 * 1) + (1 * -2) + (6 * 8)\n\nEscriba la funci√≥n producto_interno(a, b) que entregue el producto interno de a y b:\n&gt;&gt;&gt; a = [7, 1, 4, 9, 8]\n&gt;&gt;&gt; b = range(5)\n&gt;&gt;&gt; producto_interno(a, b)\n68\nDos listas de n√∫meros son ortogonales si su producto interno es cero. Escriba la funci√≥n son_ortogonales(a, b) que indique si a y b son ortogonales:\n&gt;&gt;&gt; son_ortogonales([2, 1], [-3, 6])\nTrue\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 12\nUna fecha puede ser representada como una tupla (anno, mes, dia).\n\nEscriba la funci√≥n dia_siguiente(f) que reciba como par√°metro una fecha f y entegue cu√°l es la fecha siguiente:\n&gt;&gt;&gt; dia_siguiente((2011, 4, 11))\n(2011, 4, 12)\n&gt;&gt;&gt; dia_siguiente((2011, 4, 30))\n(2011, 5, 1)\n&gt;&gt;&gt; dia_siguiente((2011, 12, 31))\n(2012, 1, 1)\nComo recomendaci√≥n, dentro de su funci√≥n use una lista con la cantidad de d√≠as que tiene cada mes:\ndias_mes = [31, 28, 31, 30,\n        31, 30, 31, 31,\n        30, 31, 30, 31]\nEscriba la funci√≥n dias_entre(f1, f2) que retorne la cantidad de d√≠as que han transcurrido entre las fechas f1 y f2:\n&gt;&gt;&gt; hoy = (2011, 4, 11)\n&gt;&gt;&gt; navidad = (2011, 12, 25)\n&gt;&gt;&gt; dias_entre(hoy, navidad)\n258\n&gt;&gt;&gt; dias_entre(hoy, hoy)\n0\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 13\nEl conjunto potencia de un conjunto \\(S\\) es el conjunto de todos los subconjuntos de \\(S\\).\nPor ejemplo, el conjunto potencia de \\(\\{1,2,3\\}\\) es:\n\\[\\{\\emptyset,\\{1\\},\\{2\\},\\{3\\},\\{1,2\\},\\{1,3\\},\\{2,3\\},\\{1,2,3\\}\\}\\]\nEn Python, un conjunto no puede contener a otros conjuntos, ya que no puede tener elementos mutables, y los conjuntos lo son:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLo que s√≠ podemos crear es una lista de conjuntos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEscriba la funci√≥n conjunto_potencia(s) que reciba como par√°metro un conjunto cualquiera s y retorne su ¬´lista potencia¬ª (la lista de todos sus subconjuntos):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 14\nPara este ejercicio considere lo siguiente:\nPara obtener la lista de palabras de la oraci√≥n, puede usar el m√©todo split de los strings:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara obtener un string en min√∫sculas, puede usar el m√©todo lower:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEscriba la funci√≥n contar_letras(oracion) que retorne un diccionario asociando a cada letra la cantidad de veces que aparece en la oracion:\n&gt;&gt;&gt; contar_letras('El elefante avanza hacia Asia')\n{'a': 8, 'c': 1, 'e': 4, 'f': 1, 'h': 1, 'i': 2, 'l': 2, 'n': 2, 's': 1, 't': 1, 'v': 1, 'z': 1}\nCada valor del diccionario debe considerar tanto las apariciones en may√∫scula como en min√∫scula de la letra correspondiente. Los espacios deben ser ignorados.\nEscriba la funci√≥n contar_vocales(oracion) que retorne un diccionario asociando a cada vocal la cantidad de veces que aparece en la oracion. Si una vocal no aparece en la oraci√≥n, de todos modos debe estar en el diccionario asociada al valor 0:\n&gt;&gt;&gt; contar_vocales('El elefante avanza hacia Asia')\n{'a': 8, 'e': 4, 'i': 2, 'o': 0, 'u': 0}\nEscriba la funci√≥n contar_iniciales(oracion) que retorne un diccionario asociando a cada letra la cantidad de veces que aparece al principio de una palabra:\n&gt;&gt;&gt; contar_iniciales('El elefante avanza hacia Asia')\n{'e': 2, 'h': 1, 'a': 2}\n&gt;&gt;&gt; contar_iniciales('Varias vacas vuelan sobre Venezuela')\n{'s': 1', 'v': 4}\nEscriba la funci√≥n obtener_largo_palabras(oracion) que retorne un diccionario asociando a cada palabra su cantidad de letras:\n&gt;&gt;&gt; obtener_largo_palabras('el gato y el pato son amigos')\n{'el': 2, 'son': 3, 'gato': 4, 'y': 1, 'amigos': 6, 'pato': 4}\nEscriba la funci√≥n contar_palabras(oracion) que retorne un diccionario asociando a cada palabra la cantidad de veces que aparece en la oraci√≥n:\n&gt;&gt;&gt; contar_palabras('El sobre esta sobre el pupitre')\n{'sobre': 2, 'pupitre': 1, 'el': 2, 'esta': 1}\nEscriba la funci√≥n palabras_repetidas(oracion) que retorne una lista con las palabras que est√°n repetidas:\n&gt;&gt;&gt; palabras_repetidas('El partido termino cero a cero')\n['cero']\n&gt;&gt;&gt; palabras_repetidas('El sobre esta sobre el mueble')\n['el', 'sobre']\n&gt;&gt;&gt; palabras_repetidas('Ay, ahi no hay pan')\n[]\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>üõ†Ô∏è Funciones</span>"
    ]
  },
  {
    "objectID": "contenidos/07_excepciones.html",
    "href": "contenidos/07_excepciones.html",
    "title": "8¬† ‚ö†Ô∏è Excepciones",
    "section": "",
    "text": "8.1 Introducci√≥n\nExisten muchos tipos de errores que pueden estar presentes en un programa. No todos los errores pueden ser detectados por el computador. Veamos el siguiente ejemplo:\nEl computador no se dar√° cuenta del error, pues todas las instrucciones del programa son correctas. El programa simplemente entregar√° siempre la respuesta equivocada.\nExisten otros errores que s√≠ pueden ser detectados: las excepciones. Las excepciones son errores que se producen durante la ejecuci√≥n de un programa, como por ejemplo un error de sintaxis, un archivo que no se puede abrir o un valor que no se puede dividir por cero.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>‚ö†Ô∏è Excepciones</span>"
    ]
  },
  {
    "objectID": "contenidos/07_excepciones.html#introducci√≥n",
    "href": "contenidos/07_excepciones.html#introducci√≥n",
    "title": "8¬† ‚ö†Ô∏è Excepciones",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nSi no se manejan las excepciones, se imprime un mensaje de error y nuestro programa se detiene repentinamente e inesperadamente.\nExisten varios tipos de excepciones, sin embargo, en esta secci√≥n se presentan algunas de ellas.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>‚ö†Ô∏è Excepciones</span>"
    ]
  },
  {
    "objectID": "contenidos/07_excepciones.html#tipos-de-errores",
    "href": "contenidos/07_excepciones.html#tipos-de-errores",
    "title": "8¬† ‚ö†Ô∏è Excepciones",
    "section": "8.2 Tipos de Errores",
    "text": "8.2 Tipos de Errores\n\n8.2.1 Error de sintaxis\nUn error de sintaxis ocurre cuando el programa no cumple las reglas del lenguaje. Cuando ocurre este error, significa que el programa est√° mal escrito. El nombre del error es SyntaxError.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n8.2.2 Error de nombre\nUn error de nombre ocurre al usar una variable que no ha sido creada con anterioridad. El nombre de la excepci√≥n es NameError.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n8.2.3 Error de tipo\nEn general, todas las operaciones en un programa pueden ser aplicadas sobre valores de tipos bien espec√≠ficos. Un error de tipo ocurre al aplicar una operaci√≥n sobre operandos de tipo incorrecto.\nEl nombre de la excepci√≥n es TypeError.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n8.2.4 Error de valor\nEl error de valor ocurre cuando los operandos son del tipo correcto, pero la operaci√≥n no tiene sentido para ese valor. El nombre de la excepci√≥n es ValueError.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n8.2.5 Error de divisi√≥n por cero\nEl error de division por cero ocurre al intentar dividir por cero. El nombre de la excepci√≥n es ZeroDivisionError:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n8.2.6 Error de desborde\nEl error de desborde ocurre cuando el resultado de una operaci√≥n es tan grande que el computador no puede representarlo internamente.\nEl nombre de la excepci√≥n es OverflowError.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>‚ö†Ô∏è Excepciones</span>"
    ]
  },
  {
    "objectID": "contenidos/07_excepciones.html#raise",
    "href": "contenidos/07_excepciones.html#raise",
    "title": "8¬† ‚ö†Ô∏è Excepciones",
    "section": "8.3 Raise",
    "text": "8.3 Raise\nEn Python, el comando raise se emplea para generar excepciones de forma deliberada en un programa. En otras palabras, permite al programador desencadenar una excepci√≥n en un momento espec√≠fico del programa en lugar de esperar a que ocurra de manera autom√°tica.\nLa sintaxis del comando raise es la siguiente:\nraise ExceptionType(\"Mensaje de error\")\nEn esta sintaxis, ExceptionType se refiere al tipo de excepci√≥n que se desea desencadenar, y \"Mensaje de error\" es un mensaje opcional que proporciona informaci√≥n adicional sobre la excepci√≥n.\nPor ejemplo, supongamos que deseas generar una excepci√≥n de tipo ValueError cuando te encuentres con un valor num√©rico negativo. Puedes lograrlo de la siguiente manera:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, si el valor de num es negativo, se genera una excepci√≥n de tipo ValueError con el mensaje ‚ÄúEl valor no puede ser negativo‚Äù. De lo contrario, la funci√≥n devuelve el valor de num.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nConclusi√≥n\nExisten dos maneras para lanzar una excepci√≥n:\n\nHacer una operaci√≥n que no puede ser realizada (como dividir por cero). En este caso Python se encarga de lanzar autom√°ticamente la excepci√≥n.\nLanzar nosotros una excepci√≥n manualmente, usando raise.\n\n\nNota: El comando raise es √∫til cuando se desea interrumpir el flujo normal de un programa y provocar una excepci√≥n en un punto espec√≠fico. Sin embargo, se debe utilizar con precauci√≥n, ya que puede dificultar la depuraci√≥n del programa si se utiliza en exceso o de manera incorrecta.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>‚ö†Ô∏è Excepciones</span>"
    ]
  },
  {
    "objectID": "contenidos/07_excepciones.html#menajando-excepciones-tryexcept",
    "href": "contenidos/07_excepciones.html#menajando-excepciones-tryexcept",
    "title": "8¬† ‚ö†Ô∏è Excepciones",
    "section": "8.4 Menajando excepciones: Try/Except",
    "text": "8.4 Menajando excepciones: Try/Except\nEn Python, las excepciones se pueden manejar usando la declaraci√≥n try. Cuando se detectan excepciones, depende de usted qu√© operador realizar.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, se intenta dividir el n√∫mero 1 entre 0. Como no se puede realizar la divisi√≥n, se produce una excepci√≥n de tipo ZeroDivisionError.\nPor otro lado, tambi√©n se puede especificar en el except el tipo de error.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUso de else\nAl ya explicado try y except le podemos a√±adir un bloque m√°s, el else. Dicho bloque se ejecutar√° si no ha ocurrido ninguna excepci√≥n. F√≠jate en la diferencia entre los siguientes c√≥digos.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin embargo en el siguiente c√≥digo la divisi√≥n se puede realizar sin problema, por lo que el bloque except no se ejecuta pero el else si es ejecutado.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>‚ö†Ô∏è Excepciones</span>"
    ]
  },
  {
    "objectID": "contenidos/07_excepciones.html#aserciones-en-python",
    "href": "contenidos/07_excepciones.html#aserciones-en-python",
    "title": "8¬† ‚ö†Ô∏è Excepciones",
    "section": "8.5 Aserciones en python",
    "text": "8.5 Aserciones en python\nLas aserciones son expresiones booleanas que comprueban si las condiciones devuelven verdaderas o no. Si es cierto, el programa no hace nada y pasa a la siguiente l√≠nea de c√≥digo. Sin embargo, si es falso, el programa se detiene y arroja un error.\nLas aserciones son importantes al momento de realizar tests unitarios o asegurar que un resultado siempre sea el mismo.\n\n\n8.5.1 assert en funciones\nPuede resultar √∫til usar assert() cuando queremos realizar alguna comprobaci√≥n, como podr√≠a ser dentro de una funci√≥n. En el siguiente ejemplo tenemos una funci√≥n suma() que s√≥lo suma las variables si son n√∫meros enteros.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n8.5.2 assert en testing\nLa funci√≥n assert() puede ser tambi√©n muy √∫til para escribir tests unitarios o units tests. Veamos un ejemplo.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>‚ö†Ô∏è Excepciones</span>"
    ]
  },
  {
    "objectID": "contenidos/07_excepciones.html#warnings",
    "href": "contenidos/07_excepciones.html#warnings",
    "title": "8¬† ‚ö†Ô∏è Excepciones",
    "section": "8.6 Warnings",
    "text": "8.6 Warnings\nEn Python, un warnings es un mensaje que se muestra en la consola o en el registro de errores durante la ejecuci√≥n del c√≥digo para alertar al programador sobre un posible problema o una situaci√≥n inusual que podr√≠a resultar en un error o un comportamiento no deseado en el programa.\nA diferencia de los errores (que interrumpen la ejecuci√≥n del programa), los warnings son mensajes informativos que no impiden la ejecuci√≥n del c√≥digo, pero deben ser revisados y atendidos por el programador para garantizar la calidad del software.\nPor ejemplo, Python puede mostrar una advertencia si est√°s utilizando una funci√≥n que se ha quedado obsoleta o que ser√° eliminada en futuras versiones de Python, o si est√°s realizando una operaci√≥n que puede tener efectos secundarios no deseados.\nEs importante prestar atenci√≥n a las advertencias y abordarlas en consecuencia para asegurarse de que el c√≥digo funcione de manera correcta y eficiente.\nVeamos un ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, la funci√≥n warn() se utiliza para mostrar el mensajede advertencia: ‚ÄúAtencion, esto es un warning!‚Äù.\n\n8.6.1 Tipos de Warnings\nDeprecationWarning\nEs un tipo de advertencia que se utiliza para indicar que una caracter√≠stica o funci√≥n del lenguaje o biblioteca que se est√° utilizando est√° obsoleta y se eliminar√° en futuras versiones. Esta advertencia se emite para permitir que los desarrolladores sepan que deben dejar de utilizar la funci√≥n o caracter√≠stica en cuesti√≥n para evitar errores y fallos en futuras versiones de Python.\nEl objetivo principal es ayudar a los desarrolladores a actualizar su c√≥digo para usar las nuevas funciones y caracter√≠sticas que reemplazan las obsoletas. Si no se actualiza el c√≥digo, es posible que no funcione correctamente en futuras versiones de Python.\nVeamos un ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, la funci√≥n multiplicar_por_dos se ha quedado obsoleta y se emitir√° una advertencia de tipo DeprecationWarning cuando se llame. La advertencia indicar√° que la funci√≥n est√° obsoleta y que los desarrolladores deber√≠an usar la funci√≥n multiplicar_por_n en su lugar.\nFutureWarning\nEs un tipo de advertencia que se utiliza para indicar que una caracter√≠stica o comportamiento del lenguaje o biblioteca puede cambiar en futuras versiones de Python. A diferencia de DeprecationWarning, FutureWarning no indica que una caracter√≠stica est√° obsoleta y se eliminar√° en futuras versiones, sino que simplemente indica que la forma en que se comporta actualmente podr√≠a cambiar en el futuro.\nVeamos un ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, la funci√≥n sumar puede cambiar en futuras versiones, y se emite una advertencia de tipo FutureWarning al llamarla. La advertencia indica que la funci√≥n podr√≠a cambiar en el futuro, lo que significa que el resultado podr√≠a ser diferente en una versi√≥n posterior de Python.\nRuntimeWarning\nEs un tipo de advertencia que se utiliza para indicar que se ha producido un comportamiento inesperado durante la ejecuci√≥n del programa. A diferencia de las excepciones, que son errores que interrumpen la ejecuci√≥n del programa, las advertencias RuntimeWarning no interrumpen la ejecuci√≥n, sino que simplemente indican que se ha producido un comportamiento inesperado.\nVeamos un ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, NumPy realiza el c√°lculo (el resultado es 0,0) pero a√∫n imprime RuntimeWarning. Esta advertencia se imprime porque el valor np.exp(1140) representa \\(e^{1140}\\), que es un n√∫mero muy grande.\nUserWarning\nEs un tipo de advertencia que se utiliza para indicar que se ha detectado una situaci√≥n que puede no ser un error grave, pero que podr√≠a ser importante para el usuario final del programa.\nA diferencia de otras advertencias, como DeprecationWarning o RuntimeWarning, que se refieren a problemas t√©cnicos en el c√≥digo, UserWarning se utiliza para indicar al usuario que se ha producido una situaci√≥n que puede requerir su atenci√≥n o acci√≥n.\nVeamos un ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, la funci√≥n promedio_notas calcula el promedio de un conjunto de notas. Si la lista de notas est√° vac√≠a, en lugar de devolver un error, se emite una advertencia utilizando el m√≥dulo warnings de Python con el mensaje ‚ÄúLa lista de notas est√° vac√≠a‚Äù y el tipo de advertencia UserWarning. Luego, la funci√≥n devuelve None.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>‚ö†Ô∏è Excepciones</span>"
    ]
  },
  {
    "objectID": "contenidos/08_buenas_practicas.html",
    "href": "contenidos/08_buenas_practicas.html",
    "title": "9¬† ‚úÖ Buenas pr√°cticas",
    "section": "",
    "text": "9.1 Estilo de codificaci√≥n\nAdem√°s de una correcta y ordenada estructura general que deben tener los programa, es conveniente mantener ciertas buenas pr√°cticas de codificaci√≥n y el estilo de codificaci√≥n recomendado. Estas normas no son obligatorias, como lo es la propia sintaxis del lenguaje, pero conviene seguir las recomendaciones de los desarrolladores de Python para facilitar la lectura del programa y ayudar a encontrar posibles errores.\nA continuaci√≥n, se presentan algunas buenas pr√°cticas relacionadas con es estilo de codificaci√≥n:",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>‚úÖ Buenas pr√°cticas</span>"
    ]
  },
  {
    "objectID": "contenidos/08_buenas_practicas.html#estilo-de-codificaci√≥n",
    "href": "contenidos/08_buenas_practicas.html#estilo-de-codificaci√≥n",
    "title": "9¬† ‚úÖ Buenas pr√°cticas",
    "section": "",
    "text": "9.1.1 Variables\nCuando sea posible, define variables con nombres que tengan alg√∫n sentido o que puedas identificar f√°cilmente, no importa que sean m√°s largas. Por ejemplo, en un programa podr√≠amos escribir:\na = 10.  \nb = 3.5 \nprint(\"El volumen es %.1f\" % (a*b))\npero, ¬øqu√© significan a y b? lo sabemos por el comentario (bien hecho), pero si m√°s adelante nos encontramos con esas variables, tendremos que recordar cual es cual. Es mejor usar nombres con significado:\naltura = 10.\nbase = 3.5\nprint(\"El volumen es %.1f\" % (altura*base))\n\n\n9.1.2 Lineas de c√≥digos\nLas l√≠neas de codigo no deben ser muy largas, como mucho 72 caracteres. Si se tiene una l√≠nea larga, se puede cortar con una barra invertida (\\) y continuar en la siguiente l√≠nea:\nprint(\"Esta es una frase muy larga, se puede cortar con una \\\n       y seguir en la l√≠nea inferior.\")\n\n\n9.1.3 Comentarios\nLos comentarios son muy importantes al escribir un programa. Describen lo que est√° sucediendo dentro de un programa, para que una persona que mira el c√≥digo fuente no tenga dificultades para descifrarlo.\n# esto es un comentario\nprint('Hola')\nTambi√©n podemos tener comentarios multil√≠neas:\n# Este es un comentario largo\n# y se extiende\n# a varias l√≠neas\n\n\n9.1.4 Identaci√≥n\nDentro de par√©ntesis, corchetes o llaves, no dejar espacios inmediatamente dentro de ellos:\n# no:  \nlista_01 = [1, 2, 3,4, 5, 6,7, 8, 9,]\n# si \nlista_01 = [\n    1, 2, 3,\n    4, 5, 6,\n    7, 8, 9, \n]\nAunque en Python se pueden hacer varias declaraciones en una l√≠nea, se recomienda hacer s√≥lo una en cada l√≠nea:\n# no\na = 10; b = 20\n# si\na = 10\nb = 20    \nCuando se trabaja con lista, conjuntos y/o tuplas se recomienda poner en cada l√≠nea sus argumentos.\n# no\nlista = [(1, 'hola'),(2, 'mundo'),]  \n# si\nlista = [\n    (1, 'hola'),\n    (2, 'mundo'),\n]\nLo anterior se puede extender para funciones con muchos argumentos\n# no\ndef funcion_01(x1,x2,x3,x4):\n    print(x1,x2,x3,x4)\n    \ndef funcion_02(\n    x1,x2,x3,x4):\n    print(x1,x2,x3,x4)\n# si\ndef funcion_01(x1,x2,\n               x3,x4):\n    \n    print(x1,x2,x3,x4)\n    \ndef funcion_02(\n        x1,x2,\n        x3,x4):\n    \n    print(x1,x2,x3,x4)\n\n\n9.1.5 Manipulaci√≥n de listas\nAunque combinar iterables con elementos de control de flujo para manipular listas es muy sencillo con Python, hay m√©todos espec√≠ficos m√°s eficientes para hacer lo mismo. Pensemos el fitrado de datos de una lista:\n# Seleccionar los n√∫meros positivos\nnumeros = [-3, 2, 1, -8, -2, 7]\npositivos = []\nfor i in numeros:\n    if i &gt; 0:\n        positivos.append(i)\n        \nprint(f\"positivos: {positivos}\")\nAunque t√©cnicamente es correcto, es m√°s eficiente hacer List Comprehension:\n# comprension de lista\nnumeros = [-3, 2, 1, -8, -2, 7]\npositivos = [i for i in numeros if i &gt; 0] # List Comprehension\nprint(f\"positivos: {positivos}\")\n\n\n9.1.6 Especificar tipo de error\nCuando se ocupa try/except, es necesario especificar el tipo de error que se est√° cometiendo.\n# importar librerias\nimport sys\n# no\ntry:\n    r = 1/0\nexcept:\n    print(\"Oops! ocurrio un\",sys.exc_info()[0])\n# si\ntry:\n    r = 1/0\nexcept ZeroDivisionError:\n    print(\"Oops! ocurrio un\",sys.exc_info()[0])\n\n\n9.1.7 Explicitar dependencias de una funci√≥n\nSiempre es mejor definir las variables dentro de una funci√≥n y no dejar variables globales.\n# no\nvalor = 5\n\ndef funcion_01(variable):\n    return 2*variable + valor\nfuncion_01(2)\n# si\ndef funcion_01(variable,valor):\n    return 2*variable + valor\nfuncion_01(2,5)\n\n\n9.1.8 Escritura din√°mica y est√°tica\nCon Python 3 se puede especificar el tipo de par√°metro y el tipo de retorno de una funci√≥n. Se definen dos conceptos claves:\n\nEscritura din√°mica: no se especifican los atributos de los inputs ni de los ouputs\nEscritura est√°tica: se especifican los atributos de los inputs y los ouputs\n\n# escritura din√°mica\ndef suma(x,y):\n    return x+y\nprint(suma(1,2))\n# escritura estatica\ndef suma(x:float,\n         y:float)-&gt;float:\n    return x+y\nprint(suma(1,2))\nPara la escritura est√°tica, si bien se especifica el tipo de atributo (tanto de los inputs o outputs), la funci√≥n puede recibir otros tipos de atributos.\nprint(suma(\"hola\",\" mundo\"))\nPara validar los tipos de datos son los correctos, se deben ocupar librer√≠as especializadas en la validaci√≥n de datos (por ejemplo pydantic).\n\n\n9.1.9 Documentaci√≥n de c√≥digo\nCasi tan importante como la escritura de c√≥digo, es su correcta documentaci√≥n, una parte fundamental de cualquier programa que a menudo se infravalora o simplemente se ignora. Aparte de los comentarios entre el c√≥digo explicando c√≥mo funciona, el elemento b√°sico de documentaci√≥n de Python es el Docstring o cadena de documentaci√≥n, que ya hemos visto. Simplemente es una cadena de texto con triple comillas que se coloca justo despu√©s de la definici√≥n de funci√≥n o clase que sirve de documentaci√≥n a ese elemento.\ndef potencia(x, y):\n    \"\"\"\n    Calcula la potencia arbitraria de un numero\n    \"\"\"\n    return x**y\n# Acceso a la documentaci√≥n\npotencia.__doc__\n# Acceso a la documentaci√≥n\nhelp(potencia)\nLo correcto es detallar lo mejor posible en el Docstring qu√© hace y c√≥mo se usa la funci√≥n o clase y los par√°metros que necesita. Se recomienda usar el estilo de documentaci√≥n del software de documentaci√≥n sphinx, que emplea reStructuredText como lenguaje de marcado.\nVeamos un ejemplo de una funci√≥n bien documentada:\ndef potencia(x, y):\n    \"\"\"\n    Calcula la potencia arbitraria de un numero\n\n    :param x: base\n    :param y: exponente\n    :return:  potencia de un numero\n    :ejemplos:\n    \n    &gt;&gt;&gt; potencia(2, 1)\n    2\n    &gt;&gt;&gt; potencia(3, 2)\n    9\n    \"\"\"\n\n    return x**y\n# Acceso a la documentaci√≥n\npotencia.__doc__\n# Acceso a la documentaci√≥n\nhelp(potencia)\nTipos de Docstring\nExisten varias formas de documentar tus funciones, las principales encontradas en la literatura son: * Google docstrings:Google‚Äôs recommended form of documentation. * reStructured Text:Official Python documentation standard; Not beginner friendly but feature rich. * NumPy/SciPy docstrings:NumPy‚Äôs combination of reStructured and Google Docstrings. * EpytextA Python adaptation of Epydoc; Great for Java developer.‚Äù",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>‚úÖ Buenas pr√°cticas</span>"
    ]
  },
  {
    "objectID": "contenidos/08_buenas_practicas.html#zen-de-python",
    "href": "contenidos/08_buenas_practicas.html#zen-de-python",
    "title": "9¬† ‚úÖ Buenas pr√°cticas",
    "section": "9.2 Zen de python",
    "text": "9.2 Zen de python\n\n\n\n\nEl Zen de Python es un conjunto de principios y directrices que gu√≠an la escritura de c√≥digo en el lenguaje de programaci√≥n Python. Estas recomendaciones son presentadas de manera humor√≠stica y filos√≥fica en el documento PEP 20 (Python Enhancement Proposal 20), que se puede obtener al ejecutar import this en un int√©rprete de Python. Aqu√≠ tienes algunas de las principales recomendaciones del Zen de Python:\n\nLegibilidad cuenta: El c√≥digo debe ser legible por los seres humanos y debe ser claro, conciso y f√°cil de entender.\nExpl√≠cito es mejor que impl√≠cito: Es preferible que el c√≥digo sea expl√≠cito en lugar de depender de comportamientos impl√≠citos que pueden ser confusos.\nSimple es mejor que complejo: Debes tratar de escribir c√≥digo sencillo en lugar de complejo. La simplicidad facilita la depuraci√≥n y el mantenimiento.\nPlano es mejor que anidado: Evita anidar demasiados bloques de c√≥digo. Niveles excesivos de anidaci√≥n pueden hacer que el c√≥digo sea dif√≠cil de seguir.\nLa legibilidad cuenta: Se repite la idea de que la legibilidad del c√≥digo es crucial. Si el c√≥digo es claro y legible, es m√°s f√°cil de mantener y depurar.\nLos errores nunca deben pasar en silencio: Los errores o excepciones no deben ser ignorados. Deben manejarse de manera adecuada y, si es necesario, registrarse para su posterior an√°lisis.\nEn la duda, sigue el Zen de Python: Cuando tengas dudas sobre c√≥mo escribir c√≥digo de Python, consulta el Zen de Python para obtener orientaci√≥n.\nHermoso es mejor que feo: Se fomenta la escritura de c√≥digo limpio y elegante en lugar de c√≥digo confuso o ‚Äúfeo‚Äù.\nNunca te pases de listo: Evita escribir c√≥digo excesivamente complejo o trucos innecesarios. La claridad es m√°s importante que la astucia.\nLa simplicidad vence a la complejidad: Enfrenta los problemas de manera sencilla y evita soluciones innecesariamente complicadas.\n\nEstas son solo algunas de las recomendaciones del Zen de Python. Estas pautas ayudan a los programadores a escribir c√≥digo Python de manera consistente y a seguir buenas pr√°cticas de programaci√≥n.\nTambi√©n, podemos ver el mensaje original del zen de python, ejecutando la siguiente linea de comando.\nimport this",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>‚úÖ Buenas pr√°cticas</span>"
    ]
  },
  {
    "objectID": "contenidos/08_buenas_practicas.html#m√°s-consejos",
    "href": "contenidos/08_buenas_practicas.html#m√°s-consejos",
    "title": "9¬† ‚úÖ Buenas pr√°cticas",
    "section": "9.3 M√°s consejos",
    "text": "9.3 M√°s consejos\nLos consejos que se presentan son de mucha utilidad si usted quiere llevar sus conociminetos de programaci√≥n al siguiente nivel, sin embargo, el contenido de cada uno amerita un curso por si solo. Se deja recomienda al lector seguir profundizando en estos temas.\n\n9.3.1 Entender programaci√≥n multiparadigma\nPython al ser multiparadigma, nos da una amplia gama de posibilidades de dise√±ar nuestros c√≥digos. Dentro de estos se destacan:\n\nProgramaci√≥n orientada a objetos (OOP)\nProgramaci√≥n funcional\n\nCu√°ndo ocupar uno o la otra, va a depender de c√≥mo queremos abordar una determinada problem√°tica, puesto que en la mayor√≠a de los casos, se puede pasar de un paradigma a o otro (incluso mezclarlos de ser necesario).\n\n\n9.3.2 Principio S.O.L.I.D\nEn ingenier√≠a de software, SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) es un acr√≥nimo mnem√≥nico introducido por Robert C. Martin a comienzos de la d√©cada del 2000 que representa cinco principios b√°sicos de la programaci√≥n orientada a objetos y el dise√±o. Cuando estos principios se aplican en conjunto es m√°s probable que un desarrollador cree un sistema que sea f√°cil de mantener y ampliar con el tiempo.\nEn el siguiente link se deja una gu√≠a para poder entender estos conceptos en python.\n\n\n9.3.3 Patrones de dise√±o\nLos patrones de dise√±o son la base para la b√∫squeda de soluciones a problemas comunes en el desarrollo de software y otros √°mbitos referentes al dise√±o de interacci√≥n o interfaces.\n\nUn patr√≥n de dise√±o es una soluci√≥n a un problema de dise√±o.\n\nSe destacan tres tipos de patrones de dise√±os:\n\nComportamiento\nCreacionales\nEstructurales\n\nEn el siguiente link se deja una gu√≠a para poder entender estos conceptos en python.\n\n\n9.3.4 Lecturas recomendadas\n\nClean Code: A Handbook of Agile Software - Robert C. Martin (2009): Habla sobre las buenas pr√°cticas que debe seguir todo buen programador al momento de escribir su c√≥digo. Si bien el lenguaje de programaci√≥n emepleado es Java, la l√≥gica se extiende a cualquier lenguaje de programaci√≥n.\nThe Clean Coder: A Code Of Conduct For Professional Programmers Robert C. Martin (2011): Habla sobre las conductas que debe seguir todo programador. Adem√°s de hablar aspectos t√©cnicos como estimaci√≥n, dise√±o de c√≥digo, refactorizaci√≥n y testeos, tambi√©n nos habla sobre la actitud que un programador debe tener en distintas situaciones laborales.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>‚úÖ Buenas pr√°cticas</span>"
    ]
  },
  {
    "objectID": "contenidos/08_buenas_practicas.html#referencias",
    "href": "contenidos/08_buenas_practicas.html#referencias",
    "title": "9¬† ‚úÖ Buenas pr√°cticas",
    "section": "9.4 Referencias",
    "text": "9.4 Referencias\n\nclean-code-python\nDocumenting Python Code: A Complete Guide",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>‚úÖ Buenas pr√°cticas</span>"
    ]
  },
  {
    "objectID": "contenidos/09_solucion.html",
    "href": "contenidos/09_solucion.html",
    "title": "10¬† üí° Soluci√≥n Ejercicios",
    "section": "",
    "text": "10.1 Nomenclatura\nEjercicio 01\nEscriba un programa que pida al usuario que escriba su nombre, y lo salude llam√°ndolo por su nombre.\nEjercicio 02\nEscriba un programa que reciba como entrada el radio de un c√≠rculo y entregue como salida su per√≠metro y su √°rea:\nEjercicio 03\nEscriba un programa que calcule el promedio de 4 notas ingresadas por el usuario:\nEjercicio 04\nEscriba un programa que convierta de cent√≠metros a pulgadas. Una pulgada es igual a 2.54 cent√≠metros.\nEjercicio 05\nEscriba un programa que reciba como entrada las longitudes de los dos catetos \\(a\\) y \\(b\\) de un tri√°ngulo rect√°ngulo, y que entregue como salida el largo de la hipotenusa \\(c\\) del triangulo, dado por el teorema de Pit√°goras: \\(c^2=a^2+b^2\\).\nEjercicio 06\nEscriba un programa que pregunte al usuario la hora actual \\(t\\) del reloj y un n√∫mero entero de horas \\(h\\), que indique qu√© hora marcar√° el reloj dentro de \\(h\\) horas:\nEjercicio 07\nUn alumno desea saber que nota necesita en el tercer certamen para aprobar un ramo.\nEl promedio del ramo se calcula con la siguiente formula.\n\\[N_C=(C_1+C_2+C_3)/3\\] \\[ N_F=N_C‚ãÖ0.7+N_L‚ãÖ0.3\\]\nDonde \\(N_C\\) es el promedio de cert√°menes, \\(N_L\\) el promedio de laboratorio y \\(N_F\\) la nota final.\nEscriba un programa que pregunte al usuario las notas de los dos primeros certamen y la nota de laboratorio, y muestre la nota que necesita el alumno para aprobar el ramo con nota final 60.\nEjercicio 08\nRealice un programa que calcule el √°rea de un tri√°ngulo a partir de las longitudes de sus lados.\nPara calcularlo puede utilizar la f√≥rmula de Her√≥n:\n\\[\n    A = \\sqrt{s\\,(s-a)(s-b)(s-c)},\n\\] donde \\(a\\), \\(b\\) y \\(c\\) son las longitudes de cada lado y \\(s=\\dfrac{a+b+c}{2}\\) es el semiper√≠metro.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>üí° Soluci√≥n Ejercicios</span>"
    ]
  },
  {
    "objectID": "contenidos/09_solucion.html#nomenclatura",
    "href": "contenidos/09_solucion.html#nomenclatura",
    "title": "10¬† üí° Soluci√≥n Ejercicios",
    "section": "",
    "text": "Ingrese su nombre: Python\nHola, Python\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIngrese el radio: 5\nPerimetro: 31.4\n√Årea: 78.5\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPrimera nota: 55\nSegunda nota: 71\nTercera nota: 46\nCuarta nota: 87\nEl promedio es: 64.75\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIngrese longitud: 45\n45 cm = 17.7165 in\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIngrese cateto a: 7\nIngrese cateto b: 5\nLa hipotenusa es 8.6023252670426267\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHora actual: 23\nCantidad de horas: 5\nEn 5 horas, el reloj marcara las 4\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nIngrese nota certamen 1: 45\nIngrese nota certamen 2: 55\nIngrese nota laboratorio: 65\nNecesita nota 74 en el certamen 3\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nIngrese longitud de lado 1: 3\nIngrese longitud de lado 2: 4\nIngrese longitud de lado 3: 5\nEl √°rea del tri√°ngulo es 6.0\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>üí° Soluci√≥n Ejercicios</span>"
    ]
  },
  {
    "objectID": "contenidos/09_solucion.html#control-de-flujo",
    "href": "contenidos/09_solucion.html#control-de-flujo",
    "title": "10¬† üí° Soluci√≥n Ejercicios",
    "section": "10.2 Control de Flujo",
    "text": "10.2 Control de Flujo\n\n10.2.1 if-elif-else\nEjercicio 01\nEscriba un programa que determine si el n√∫mero entero ingresado por el usuario es par o no.\nIngrese un n√∫mero: 4\nSu n√∫mero es par\nIngrese un n√∫mero: 3\nSu n√∫mero es impar\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nEscriba un programa que pida dos n√∫meros enteros y que calcule la divisi√≥n, indicando si la divisi√≥n es exacta o no.\nDividendo: 14\nDivisor: 5\n\nLa divisi√≥n no es exacta.\nCociente: 2\nResto: 4\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nEscriba un programa que pida al usuario dos palabras, y que indique cu√°l de ellas es la m√°s larga y por cu√°ntas letras lo es.\nPalabra 1: edificio\nPalabra 2: tren\nLa palabra edificio tiene 4 letras mas que tren.\nPalabra 1: sol\nPalabra 2: paralelepipedo\nLa palabra paralelepipedo tiene 11 letras mas que sol\nPalabra 1: plancha\nPalabra 2: lapices\nLas dos palabras tienen el mismo largo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nUn a√±o es bisiesto si es divisible por \\(4\\), excepto si es divisible por \\(100\\) y no por \\(400\\). Escriba un programa que reciba un a√±o como entrada e indique True si un a√±o es bisiesto o False si no lo es.\nIngrese un anno: 1988\n1988 es bisiesto\nIngrese un anno: 2011\n2011 no es bisiesto\nIngrese un anno: 1700\n1700 no es bisiesto\nIngrese un anno: 2400\n2400 es bisiesto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 05\nLos tres lados \\(a, b\\) y \\(c\\) de un tri√°ngulo deben satisfacer la desigualdad triangular: cada uno de los lados no puede ser m√°s largo que la suma de los otros dos.\nEscriba un programa que reciba como entrada los tres lados de un tri√°ngulo, e indique:\n\nsi acaso el tri√°ngulo es inv√°lido\nsi el tri√°ngulo es v√°lido, qu√© tipo de tri√°ngulo es.\n\nIngrese a: 3.9\nIngrese b: 6.0\nIngrese c: 1.2\nNo es un triangulo valido.\nIngrese a: 1.9\nIngrese b: 2\nIngrese c: 2\nEl triangulo es isoceles.\nIngrese a: 3.0\nIngrese b: 5.0\nIngrese c: 4.0\nEl triangulo es escaleno.\nIngrese a: 2\nIngrese b: 2\nIngrese c: 2\nEl triangulo es equilatero.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 06\nEl riesgo de que una persona sufra enfermedades coronarias depende de su edad y su √≠ndice de masa corporal:\n\n\n\n\nedad &lt; 45\nedad ‚â• 45\n\n\n\n\nIMC &lt; 22.0\nbajo\nmedio\n\n\nIMC ‚â• 22.0\nmedio\nalto\n\n\n\nEl √≠ndice de masa corporal es el cuociente entre el peso del individuo en kilos y el cuadrado de su estatura en metros ($IMC = $).\nEscriba un programa que reciba como entrada la estatura, el peso y la edad de una persona, y le entregue su condici√≥n de riesgo.\nejemplos\n\nSi el usuario ingresa una estatura de 1.75 metros, un peso de 70 kilogramos y una edad de 30 a√±os, el programa mostrar√°: ‚ÄúLa condici√≥n de riesgo es: medio‚Äù.\nSi el usuario ingresa una estatura de 1.65 metros, un peso de 90 kilogramos y una edad de 50 a√±os, el programa mostrar√°: ‚ÄúLa condici√≥n de riesgo es: alto‚Äù.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 07\nUn n√∫mero natural es un pal√≠ndromo si se lee igual de izquierda a derecha y de derecha a izquierda.\nPor ejemplo, \\(14941\\) es un pal√≠ndromo, mientras que \\(81924\\) no lo es.\nEscriba un programa que indique si el n√∫mero ingresado es o no pal√≠ndromo:\nIngrese un numero: 14941\n14941 es palindromo\nIngrese un numero: 81924\n81924 no es palindromo\n\nHint: Para encontrar el inverso de un string en Python, puedes utilizar la t√©cnica de texto[::-1].\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.2.2 While\nEjercicio 01\nSolicita al usuario un n√∫mero y muestra un contador regresivo desde ese n√∫mero hasta 1. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 5\nContador regresivo desde 5 hasta 1:\n5\n4\n3\n2\n1\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nSolicita al usuario un n√∫mero y calcula la suma de todos los n√∫meros pares desde 2 hasta ese n√∫mero. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 10\nLa suma de n√∫meros pares desde 2 hasta 10 es 30\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nSolicita al usuario un n√∫mero entero y suma todos sus d√≠gitos. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero entero: 12345\nLa suma de los d√≠gitos es 15\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nPide al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 123456\nEl n√∫mero tiene 3 d√≠gitos pares.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 05\nSolicita al usuario un n√∫mero y cuenta cu√°ntos n√∫meros en el rango de 1 a ese n√∫mero son divisibles por 7. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 20\nHay 2 n√∫meros divisibles por 7 en el rango de 1 a 20.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 06\nSolicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son impares. Utiliza la declaraci√≥n while para resolver este problema.\nIngrese un n√∫mero: 7654321\nEl n√∫mero tiene 4 d√≠gitos impares.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.2.3 Range\nEjercicio 01\nCalcula la suma de todos los n√∫meros pares desde 1 hasta un n√∫mero dado (\\(n\\)). Utiliza la declaraci√≥n range para resolver este problema.\nIngrese un n√∫mero: 10\nLa suma de n√∫meros pares desde 1 hasta 10 es 30\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nMuestra un contador regresivo desde un n√∫mero (\\(n\\)) dado hasta 1. Utiliza la declaraci√≥n range para resolver este problema.\nIngrese un n√∫mero: 5\nContador regresivo desde 5 hasta 1:\n5\n4\n3\n2\n1\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nMuestra la tabla de multiplicar de un n√∫mero dado. Utiliza la declaraci√≥n range para resolver este problema.\nIngrese un n√∫mero: 7\nTabla de multiplicar del 7:\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nEscribe un programa que solicite al usuario un n√∫mero entero positivo y luego calcule la suma de los cuadrados de todos los n√∫meros desde 1 hasta el n√∫mero ingresado. Utiliza la declaraci√≥n range para generar los n√∫meros en el rango y luego suma los cuadrados de esos n√∫meros.\nEjemplos\n\nSi el usuario ingresa el n√∫mero 4, el programa calcular√° la suma de los cuadrados de los n√∫meros desde 1 hasta 4 de la siguiente manera:\nSuma = \\(1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30\\)\nEl programa mostrar√°: ‚ÄúLa suma de los cuadrados de los n√∫meros en el rango de 1 a 4 es 30.‚Äù\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.2.4 Break & Continue\nEjercicio 01\nSolicita al usuario un n√∫mero y cuenta cu√°ntos de sus d√≠gitos son pares. Utiliza la declaraci√≥n continue para omitir los d√≠gitos impares.\nIngrese un n√∫mero: 123456\nEl n√∫mero tiene 3 d√≠gitos pares.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nCalcula la suma de los n√∫meros en un rango dado (por ejemplo, de 1 a 10), pero omite los m√∫ltiplos de 3 utilizando la declaraci√≥n continue.\nIngrese un n√∫mero: 10\nLa suma de los n√∫meros no divisibles por 3 en el rango de 1 a 10 es 37\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nDada una lista de n√∫meros enteros, solicita al usuario un n√∫mero objetivo y busca si el n√∫mero est√° en la lista. Utiliza un bucle con break para detener la b√∫squeda una vez que encuentres el n√∫mero o determines que no est√° en la lista.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nSimula un juego en el que la computadora ‚Äúpiensa‚Äù en un n√∫mero y el jugador intenta adivinarlo. Crea un bucle que permita al jugador hacer intentos para adivinar el n√∫mero, y utiliza break para salir del bucle si el jugador adivina el n√∫mero o excede un n√∫mero m√°ximo de intentos.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>üí° Soluci√≥n Ejercicios</span>"
    ]
  },
  {
    "objectID": "contenidos/09_solucion.html#estructura-de-datos",
    "href": "contenidos/09_solucion.html#estructura-de-datos",
    "title": "10¬† üí° Soluci√≥n Ejercicios",
    "section": "10.3 Estructura de Datos",
    "text": "10.3 Estructura de Datos\n\n10.3.1 Listas\nEjercicio 01\nConsidere las siguientes listas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRespuestas y verificaciones en el computador para las expresiones dadas:\n\na[2]: Resultado: 4, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nb[9]: Resultado: 29, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nc[1][2]: Resultado: 5, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ne[0] == e[1]: Resultado: False, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(c): Resultado: 3, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(c[0]): Resultado: 2, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(e): Resultado: 3, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nc[-1]: Resultado: [6, 7], Tipo: list\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nc[-1][+1]: Resultado: 7, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nc[2:] + d[2:]: Resultado: [[6, 7], 'jirafa', 'elefante'], Tipo: list\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\na[3:10]: Resultado: [9, 0], Tipo: list\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\na[3:10:2]: Resultado: [9], Tipo: list\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nd.index('jirafa'): Resultado: 2, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ne[c[0][1]].count(5): Resultado: 0, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nsorted(a)[2]: Resultado: 4, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ncomplex(b[0], b[1]): Resultado: (3+4j), Tipo: complex\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nEscriba una rutina que cuente cu√°ntos valores en la lista valores son mayores que x:\n&gt;&gt;&gt; numero = 5\n&gt;&gt;&gt; lista = [7, 3, 6, 0, 4, 5, 10]\nExisten 3 numeros mayores que 5 en la lista. \n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nEl producto interno de dos listas de n√∫meros es la suma de los productos de los t√©rminos correspondientes de ambas.\nPor ejemplo, si:\na = [5, 1, 6]\nb = [1, -2, 8]\nentonces el producto interno entre \\(a\\) y \\(b\\) es:\n(5 * 1) + (1 * -2) + (6 * 8)\n\nEscriba una rutina que entregue el producto interno de a y b:\n&gt;&gt;&gt; a = [7, 1, 4, 9, 8]\n&gt;&gt;&gt; b = range(5)\nEl producto interno es 68\nDos listas de n√∫meros son ortogonales si su producto interno es cero. Escriba una rutina que indique si a y b son ortogonales:\n&gt;&gt;&gt; a = [2, 1]\n&gt;&gt;&gt; b =  [-3, 6]\nLos vectores son ortonormales\n\nproducto interno\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nvectores ortonormales\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.3.2 Tuplas\nEjercicio 01\nConsidere las siguientes asignaciones:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRespuestas y verificaciones en el computador para las expresiones dadas:\n\na &lt; b: Resultado: True, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ny + w: Resultado: 12, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nx + a: Esto generar√° un error porque no se pueden sumar una tupla (x) y una tupla (a).\nlen(v): Resultado: 2, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nv[1][1]: Esto generar√° un error porque est√°s tratando de acceder a un √≠ndice en una tupla (a) que est√° dentro de otra tupla (v).\nc[0][0]: Resultado: 'D', Tipo: str\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nz, y: Resultado: (27, 9), Tipo: tuple\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\na + b[1:5]: Resultado: (2, 10, 1991, 12, 1990), Tipo: tuple\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n(a + b)[1:5]: Resultado: (10, 1991, 12, 1990), Tipo: tuple\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nstr(a[2]) + str(b[2]): Resultado: '19911990', Tipo: str\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nstr(a[2] + b[2]): Resultado: '3981', Tipo: str\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nstr((a + b)[2]): Resultado: '1991', Tipo: str\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nstr(a + b)[2]: Resultado: '(', Tipo: str\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.3.3 Conjuntos\nEjercicio 01\nConsidere las siguientes asignaciones:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRespuestas y verificaciones en el computador para las expresiones dadas:\n\nlen(c): Resultado: 5, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(set(d)): Resultado: 6, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\na & (b | c): Resultado: {1, 3, 5}, Tipo: set\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n(a & b) | c: Resultado: {1, 2, 3, 4, 5, 6, 7, 8, 9}, Tipo: set\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nc - a: Resultado: {1, 6, 8, 7}, Tipo: set\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nmax(e): Resultado: (4, 5), Tipo: tuple\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nf[0] &lt; a: Resultado: True, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nset(range(4)) & a: Resultado: {2, 3}, Tipo: set\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n(set(range(4)) & a) in f: Resultado: True, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(set('perro')): Resultado: 4, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen({'perro'}): Resultado: 1, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.3.4 Diccionarios\nEjercicio 01\nConsidere las siguientes asignaciones:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSin usar el computador, indique cu√°l es el resultado y el tipo de las siguientes expresiones. A continuaci√≥n, verifique sus respuestas en el computador.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRespuestas y verificaciones en el computador para las expresiones dadas:\nAqu√≠ tienes las respuestas y verificaciones en el computador para las expresiones dadas:\n\na['c']: Resultado: 88, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\na[23]: Resultado: KeyError, Tipo: Error\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nb[-2] or b[55]: Resultado: False, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n23 in a: Resultado: False, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n'a' in a: Resultado: True, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n5 in d[5]: Resultado: True, Tipo: bool\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nsum(b): Resultado: 65, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(c): Resultado: 0, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(d): Resultado: 3, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(d[1]): Resultado: 3, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(b.values()): Resultado: 3, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlen(e): Resultado: 4, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nsum(a.values()): Resultado: 125, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nmax(list(e)): Resultado: 10, Tipo: int\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nd[1] + d[5] + d[10]: Resultado: [2, 3, 4, 6, 7, 8, 9, 11], Tipo: list\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>üí° Soluci√≥n Ejercicios</span>"
    ]
  },
  {
    "objectID": "contenidos/09_solucion.html#funciones",
    "href": "contenidos/09_solucion.html#funciones",
    "title": "10¬† üí° Soluci√≥n Ejercicios",
    "section": "10.4 Funciones",
    "text": "10.4 Funciones\nEjercicio 01\nEscriba una funci√≥n que se llame saludar que reciba como input un string s y devuelva como output ‚ÄúHola + valor de s‚Äù. * Ejemplo: saludar(‚Äúmundo‚Äù) = ‚ÄúHola mundo‚Äù\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 02\nEscriba una funci√≥n que se llame es_par que reciba como input un n√∫mero entero n y devuelva como output True si el n√∫mero es par, y False en otro caso.\n\nEjemplo:\n\nes_par(4) = True\nes_par(3) = False\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 03\nEscriba la funci√≥n invertir_digitos(n) que reciba un n√∫mero entero n y entregue como resultado el n√∫mero n con los d√≠gitos en el orden inverso:\n &gt;&gt;&gt; invertir_digitos(142)\n241\nA continuaci√≥n, escriba un programa que indique si el n√∫mero ingresado es pal√≠ndromo o no, usando la funci√≥n invertir_digitos:\nIngrese n: 81418\nEs pal√≠ndromo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 04\nMuchos de estos programas s√≥lo ten√≠an peque√±as diferencias entre ellos, por lo que hab√≠a que repetir mucho c√≥digo al escribirlos. En este ejercicio, usted deber√° implementar algunos de esos programas como funciones, reutilizando componentes para evitar escribir c√≥digo repetido.\nEjercicio 041\nEscriba la funci√≥n es_divisible(n, d) que indique si n es divisible por d:\n&gt;&gt;&gt; es_divisible(15, 5)\nTrue\n&gt;&gt;&gt; es_divisible(15, 6)\nFalse\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 042\nUsando la funci√≥n es_divisible, escriba una funci√≥n es_primo(n) que determine si un n√∫mero es primo o no:\n&gt;&gt;&gt; es_primo(17)\nTrue\n&gt;&gt;&gt; es_primo(221)\nFalse\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 043\nUsando la funci√≥n es_primo, escriba la funci√≥n i_esimo_primo(i) que entregue el i-√©simo n√∫mero primo.\n&gt;&gt;&gt; i_esimo_primo(1)\n2\n&gt;&gt;&gt; i_esimo_primo(20)\n71\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 044\nUsando las funciones anteriores, escriba la funci√≥n primeros_primos(m) que entregue una lista de los primeros m n√∫meros primos:\n&gt;&gt;&gt; primeros_primos(10)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 045\nUsando las funciones anteriores, escriba la funci√≥n primos_hasta(m) que entregue una lista de los primos menores o iguales que m:\n&gt;&gt;&gt; primos_hasta(19)\n[2, 3, 5, 7, 11, 13, 17, 19]\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 046\nUn primo de Mersenne es un n√∫mero primo de la forma \\(2p‚àí1\\). Una propiedad conocida de los primos de Mersenne es que \\(p\\) debe ser tambi√©n un n√∫mero primo.\nEscriba la funci√≥n mersenne que pregunte al usuario un n√∫mero \\(n\\), y muestre como salida los primeros n primos de Mersenne:\n&gt;&gt;&gt; mersenne(5)\n3\n7\n31\n127\n8191\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 05\nLa suma natural de los primeros n n√∫meros naturales esta dado por: \\[\\displaystyle S = \\sum_{k=1}^{n} k = 1 +2 +3 +...+n = \\dfrac{n(n+1)}{2} \\]\nEscriba una funci√≥n que se llame suma_numeros_naturales que reciba como input un n√∫mero entero n y devuelva como output la suma de los primeros n n√∫meros naturales.\nPara esto:\n\n\nPrograme la funci√≥n ocupando la f√≥rmula manual: \\(S = 1+2+3+..+n\\)\n\n\nPrograme la funci√≥n ocupando la f√≥rmula cerrada: $S = $\n\n\nEjemplo: * suma_numeros_naturales(1) = 1 * suma_numeros_naturales(10) = 55 * suma_numeros_naturales(100) = 5050\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 06\nEn los siglos XVII y XVIII, James Gregory y Gottfried Leibniz descubrieron una serie infinita que sirve para calcular \\(\\pi\\):\n\\[\\displaystyle \\pi = 4 \\sum_{k=1}^{\\infty}\\dfrac{(-1)^{k+1}}{2k-1} = 4(1-\\dfrac{1}{3}+\\dfrac{1}{5}-\\dfrac{1}{7} + ...) \\]\nDesarolle un programa para estimar el valor de \\(\\pi\\) ocupando el m√©todo de Leibniz, donde la entrada del programa debe ser un n√∫mero entero \\(n\\) que indique cu√°ntos t√©rminos de la suma se utilizar√°.\n\nEjemplo:\n\ncalcular_pi(3) = 3.466666666666667\ncalcular_pi(1000) = 3.140592653839794\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 07\nEuler realiz√≥ varios aportes en relaci√≥n a \\(e\\), pero no fue hasta 1748 cuando public√≥ su Introductio in analysin infinitorum que dio un tratamiento definitivo a las ideas sobre \\(e\\). All√≠ mostr√≥ que:\nEn los siglos XVII y XVIII, James Gregory y Gottfried Leibniz descubrieron una serie infinita que sirve para calcular œÄ:\n\\[\\displaystyle e = \\sum_{k=0}^{\\infty}\\dfrac{1}{k!} = 1+\\dfrac{1}{2!}+\\dfrac{1}{3!}+\\dfrac{1}{4!} + ... \\]\nDesarolle un programa para estimar el valor de \\(e\\) ocupando el m√©todo de Euler, donde la entrada del programa debe ser un n√∫mero entero \\(n\\) que indique cu√°ntos t√©rminos de la suma se utilizar√°.\nPara esto:\n\n\nDefina la funci√≥n factorial, donde la entrada sea un n√∫mero natural \\(n\\) y la salida sea el factorial de dicho n√∫mero.\n\n\nEjemplo: factorial(3) =3, factorial(5) = 120\n\n\nOcupe la funci√≥n factorial dentro de la funci√≥n calcular_e.\n\n\n\nEjemplo: calcular_e(3) = 2.6666666666666665, calcular_e(1000) = 2.7182818284590455\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 08\nSea \\(\\sigma(n)\\) definido como la suma de los divisores propios de \\(n\\) (n√∫meros menores que n que se dividen en \\(n\\)).\nLos n√∫meros amigos son enteros positivos \\(n_1\\) y \\(n_2\\) tales que la suma de los divisores propios de uno es igual al otro n√∫mero y viceversa, es decir, \\(\\sigma(n_1)=\\sigma(n_2)\\) y \\(\\sigma(n_2)=\\sigma(n_1)\\).\nPor ejemplo, los n√∫meros 220 y 284 son n√∫meros amigos. * los divisores propios de 220 son 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 y 110; por lo tanto \\(\\sigma(220) = 284\\). * los divisores propios de 284 son 1, 2, 4, 71 y 142; entonces \\(\\sigma(284) = 220\\).\nImplemente una funci√≥n llamada amigos cuyo input sean dos n√∫meros naturales \\(n_1\\) y \\(n_2\\), cuyo output sea verifique si los n√∫meros son amigos o no.\nPara esto:\n\n\nDefina la funci√≥n divisores_propios, donde la entrada sea un n√∫mero natural \\(n\\) y la salida sea una lista con los divisores propios de dicho n√∫mero.\n\n\nEjemplo: divisores_propios(220) = [1, 2, 4, 5, 10, 11, 20, 22, 44, 55 y 110], divisores_propios(284) = [1, 2, 4, 71 y 142]\n\n\nOcupe la funci√≥n divisores_propios dentro de la funci√≥n amigos.\n\n\nEjemplo: amigos(220,284) = True, amigos(6,5) = False\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 09\nLa conjetura de Collatz, conocida tambi√©n como conjetura \\(3n+1\\) o conjetura de Ulam (entre otros nombres), fue enunciada por el matem√°tico Lothar Collatz en 1937, y a la fecha no se ha resuelto.\nSea la siguiente operaci√≥n, aplicable a cualquier n√∫mero entero positivo: * Si el n√∫mero es par, se divide entre 2. * Si el n√∫mero es impar, se multiplica por 3 y se suma 1.\nLa conjetura dice que siempre alcanzaremos el 1 (y por tanto el ciclo 4, 2, 1) para cualquier n√∫mero con el que comencemos.\nImplemente una funci√≥n llamada collatz cuyo input sea un n√∫mero natural positivo \\(N\\) y como output devulva la secuencia de n√∫meros hasta llegar a 1.\n\nEjemplo: collatz(9) = [9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 10\nLa conjetura de Goldbach es uno de los problemas abiertos m√°s antiguos en matem√°ticas. Concretamente, G.H. Hardy, en 1921, en su famoso discurso pronunciado en la Sociedad Matem√°tica de Copenhague, coment√≥ que probablemente la conjetura de Goldbach no es solo uno de los problemas no resueltos m√°s dif√≠ciles de la teor√≠a de n√∫meros, sino de todas las matem√°ticas. Su enunciado es el siguiente:\n\nTodo n√∫mero par mayor que 2 puede escribirse como suma de dos n√∫meros primos - Christian Goldbach (1742)\n\nImplemente una funci√≥n llamada goldbach cuyo input sea un n√∫mero natural positivo \\(n\\) y como output devuelva la suma de dos primos (\\(n_1\\) y \\(n_2\\)) tal que: \\(n_1+n_2=n\\).\nPara esto:\n\n\nDefina la funci√≥n es_primo, donde la entrada sea un n√∫mero natural \\(n\\) y la salida sea True si el n√∫mero es primo y False en otro caso.\n\n\nEjemplo: es_primo(3) = True, es_primo(4) = False\n\n\nDefina la funci√≥n lista_de_primos, donde la entrada sea un n√∫mero natural par \\(n\\) mayor que dos y la salida sea una lista con todos los n√∫mero primos entre 2 y \\(n\\).\n\n\nEjemplo: lista_de_primos(4) = [2,3], lista_de_primos(6) = [2,3,5], lista_de_primos(8) = [2,3,5,7]\n\n\nOcupe la funci√≥n lista_de_primos dentro de la funci√≥n goldbash.\n\nEjemplo: goldbash(4) = (2,2), goldbash(6) = (3,3) , goldbash(8) = (3,5)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 11\nEl producto interno de dos listas de n√∫meros es la suma de los productos de los t√©rminos correspondientes de ambas.\nPor ejemplo, si:\na = [5, 1, 6]\nb = [1, -2, 8]\nentonces el producto interno entre \\(a\\) y \\(b\\) es:\n(5 * 1) + (1 * -2) + (6 * 8)\n\nEscriba la funci√≥n producto_interno(a, b) que entregue el producto interno de a y b:\n&gt;&gt;&gt; a = [7, 1, 4, 9, 8]\n&gt;&gt;&gt; b = range(5)\n&gt;&gt;&gt; producto_interno(a, b)\n68\nDos listas de n√∫meros son ortogonales si su producto interno es cero. Escriba la funci√≥n son_ortogonales(a, b) que indique si a y b son ortogonales:\n&gt;&gt;&gt; son_ortogonales([2, 1], [-3, 6])\nTrue\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 12\nUna fecha puede ser representada como una tupla (anno, mes, dia).\n\nEscriba la funci√≥n dia_siguiente(f) que reciba como par√°metro una fecha f y entegue cu√°l es la fecha siguiente:\n&gt;&gt;&gt; dia_siguiente((2011, 4, 11))\n(2011, 4, 12)\n&gt;&gt;&gt; dia_siguiente((2011, 4, 30))\n(2011, 5, 1)\n&gt;&gt;&gt; dia_siguiente((2011, 12, 31))\n(2012, 1, 1)\nComo recomendaci√≥n, dentro de su funci√≥n use una lista con la cantidad de d√≠as que tiene cada mes:\ndias_mes = [31, 28, 31, 30,\n        31, 30, 31, 31,\n        30, 31, 30, 31]\nEscriba la funci√≥n dias_entre(f1, f2) que retorne la cantidad de d√≠as que han transcurrido entre las fechas f1 y f2:\n&gt;&gt;&gt; hoy = (2011, 4, 11)\n&gt;&gt;&gt; navidad = (2011, 12, 25)\n&gt;&gt;&gt; dias_entre(hoy, navidad)\n258\n&gt;&gt;&gt; dias_entre(hoy, hoy)\n0\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 13\nEl conjunto potencia de un conjunto \\(S\\) es el conjunto de todos los subconjuntos de \\(S\\).\nPor ejemplo, el conjunto potencia de \\(\\{1,2,3\\}\\) es:\n\\[\\{\\emptyset,\\{1\\},\\{2\\},\\{3\\},\\{1,2\\},\\{1,3\\},\\{2,3\\},\\{1,2,3\\}\\}\\]\nEn Python, un conjunto no puede contener a otros conjuntos, ya que no puede tener elementos mutables, y los conjuntos lo son:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLo que s√≠ podemos crear es una lista de conjuntos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEscriba la funci√≥n conjunto_potencia(s) que reciba como par√°metro un conjunto cualquiera s y retorne su ¬´lista potencia¬ª (la lista de todos sus subconjuntos):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 14\nPara este ejercicio considere lo siguiente:\nPara obtener la lista de palabras de la oraci√≥n, puede usar el m√©todo split de los strings:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara obtener un string en min√∫sculas, puede usar el m√©todo lower:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEscriba la funci√≥n contar_letras(oracion) que retorne un diccionario asociando a cada letra la cantidad de veces que aparece en la oracion:\n&gt;&gt;&gt; contar_letras('El elefante avanza hacia Asia')\n{'a': 8, 'c': 1, 'e': 4, 'f': 1, 'h': 1, 'i': 2, 'l': 2, 'n': 2, 's': 1, 't': 1, 'v': 1, 'z': 1}\nCada valor del diccionario debe considerar tanto las apariciones en may√∫scula como en min√∫scula de la letra correspondiente. Los espacios deben ser ignorados.\nEscriba la funci√≥n contar_vocales(oracion) que retorne un diccionario asociando a cada vocal la cantidad de veces que aparece en la oracion. Si una vocal no aparece en la oraci√≥n, de todos modos debe estar en el diccionario asociada al valor 0:\n&gt;&gt;&gt; contar_vocales('El elefante avanza hacia Asia')\n{'a': 8, 'e': 4, 'i': 2, 'o': 0, 'u': 0}\nEscriba la funci√≥n contar_iniciales(oracion) que retorne un diccionario asociando a cada letra la cantidad de veces que aparece al principio de una palabra:\n&gt;&gt;&gt; contar_iniciales('El elefante avanza hacia Asia')\n{'e': 2, 'h': 1, 'a': 2}\n&gt;&gt;&gt; contar_iniciales('Varias vacas vuelan sobre Venezuela')\n{'s': 1', 'v': 4}\nEscriba la funci√≥n obtener_largo_palabras(oracion) que retorne un diccionario asociando a cada palabra su cantidad de letras:\n&gt;&gt;&gt; obtener_largo_palabras('el gato y el pato son amigos')\n{'el': 2, 'son': 3, 'gato': 4, 'y': 1, 'amigos': 6, 'pato': 4}\nEscriba la funci√≥n contar_palabras(oracion) que retorne un diccionario asociando a cada palabra la cantidad de veces que aparece en la oraci√≥n:\n&gt;&gt;&gt; contar_palabras('El sobre esta sobre el pupitre')\n{'sobre': 2, 'pupitre': 1, 'el': 2, 'esta': 1}\nEscriba la funci√≥n palabras_repetidas(oracion) que retorne una lista con las palabras que est√°n repetidas:\n&gt;&gt;&gt; palabras_repetidas('El partido termino cero a cero')\n['cero']\n&gt;&gt;&gt; palabras_repetidas('El sobre esta sobre el mueble')\n['el', 'sobre']\n&gt;&gt;&gt; palabras_repetidas('Ay, ahi no hay pan')\n[]\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Contenidos",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>üí° Soluci√≥n Ejercicios</span>"
    ]
  }
]